{"paragraphs":[{"text":"%md\n# ![Spark Logo](https://spark.apache.org/images/spark-logo-trademark.png)\n\n# **Introducción a Apache Spark con Apache Zeppelin**\n\n[Apache Spark](http://spark.apache.org/), es un framework para el procesamiento de grandes volumenes de datos. Frameworks de procesamiento tradicionales están diseñados para correr en una sola máquina. En la actualidad, se generan conjuntos de datos de gran tamaño, los cuales no pueden ser almacenados en una sola máquina, por lo cual deben ser almacenados y procesados de manera distribuida. Por otro lado, existen conjuntos de datos que sí pueden almacenarse en una sola máquina, pero éstos pueden ser procesados de manera más rápida en múltiples máquinas.\n\nSpark, es utilizado para el procesamiento y análisis de datos mediante la generación de un plan de trabajo compuesto por una secuencia de operaciones (catalogadas en transformaciones y acciones). Las transformaciones y acciones en Spark están optimizadas para correr de manera distribuida en un clúster de computadoras. El framework de Spark, está diseñado para la eficiencia y escalabilidad, por lo que puedes desarrollar programas en una computadora personal procesando conjuntos de datos pequeños y utilizar el mismo código en un clúster para procesar terabytes+ de datos.\n\nEn esta práctica utilizaremos Spark DataFrames. Los DataFrames representan una colección distribuida de filas que comparten un mismo esquema, éstos son equivalentes a una tabla de una base de datos relacional y son similares a DataFrames en otras APIs (Por ejemplo, DataFrames de R/Pandas).\n\nUsaremos las siguientes operaciones de transformación de DataFrames:\n- `select()`, `filter()`, `distinct()`, `dropDuplicates()`, `orderBy()`, `groupBy()`\n\nY las siguientes operaciones de acción de DataFrames:\n- `first()`, `take()`, `count()`, `collect()`, `show()`\n\nAdemás usaremos las operaciones:\n- `cache()`, `unpersist()`","user":"hduser","dateUpdated":"2018-08-06T08:35:57-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1><img src=\"https://spark.apache.org/images/spark-logo-trademark.png\" alt=\"Spark Logo\" /></h1>\n<h1><strong>Introducción a Apache Spark con Apache Zeppelin</strong></h1>\n<p><a href=\"http://spark.apache.org/\">Apache Spark</a>, es un framework para el procesamiento de grandes volumenes de datos. Frameworks de procesamiento tradicionales están diseñados para correr en una sola máquina. En la actualidad, se generan conjuntos de datos de gran tamaño, los cuales no pueden ser almacenados en una sola máquina, por lo cual deben ser almacenados y procesados de manera distribuida. Por otro lado, existen conjuntos de datos que sí pueden almacenarse en una sola máquina, pero éstos pueden ser procesados de manera más rápida en múltiples máquinas.</p>\n<p>Spark, es utilizado para el procesamiento y análisis de datos mediante la generación de un plan de trabajo compuesto por una secuencia de operaciones (catalogadas en transformaciones y acciones). Las transformaciones y acciones en Spark están optimizadas para correr de manera distribuida en un clúster de computadoras. El framework de Spark, está diseñado para la eficiencia y escalabilidad, por lo que puedes desarrollar programas en una computadora personal procesando conjuntos de datos pequeños y utilizar el mismo código en un clúster para procesar terabytes+ de datos.</p>\n<p>En esta práctica utilizaremos Spark DataFrames. Los DataFrames representan una colección distribuida de filas que comparten un mismo esquema, éstos son equivalentes a una tabla de una base de datos relacional y son similares a DataFrames en otras APIs (Por ejemplo, DataFrames de R/Pandas).</p>\n<p>Usaremos las siguientes operaciones de transformación de DataFrames:</p>\n<ul>\n<li><code>select()</code>, <code>filter()</code>, <code>distinct()</code>, <code>dropDuplicates()</code>, <code>orderBy()</code>, <code>groupBy()</code></li>\n</ul>\n<p>Y las siguientes operaciones de acción de DataFrames:</p>\n<ul>\n<li><code>first()</code>, <code>take()</code>, <code>count()</code>, <code>collect()</code>, <code>show()</code></li>\n</ul>\n<p>Además usaremos las operaciones:</p>\n<ul>\n<li><code>cache()</code>, <code>unpersist()</code></li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1533562513593_725796110","id":"20180709-121129_1303278738","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:35:57-0500","dateFinished":"2018-08-06T08:35:57-0500","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:53"},{"text":"%python\nimport sys\n\nprint(sys.version)\nprint(sys.version_info)","user":"hduser","dateUpdated":"2018-11-22T08:42:19-0600","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"2.7.6 (default, Oct 26 2016, 20:30:19) \n[GCC 4.8.4]\nsys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)\n"}]},"apps":[],"jobName":"paragraph_1533565413951_300986231","id":"20180806-092333_1397002300","dateCreated":"2018-08-06T09:23:33-0500","dateStarted":"2018-11-22T08:42:19-0600","dateFinished":"2018-11-22T08:42:22-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:54"},{"text":"%md\n## **Notebooks en Apache Zeppelin**\n\nLas notebooks de Zeppelin están compuestas de una secuencia lineal de celdas. Cada celda en una notebook puede ejecutar código de un diferente interprete, el interprete es seleccionado en la primera línea de la celda usando `%interprete`, por ejemplo, esta celda utiliza `%md` en su primera línea para usar el interprete markdown. Para utilizar el interprete de Python, usarás `%python` en la primera línea de la celda. Para utilizar el interprete de PySpark, usarás `%pyspark`.\n\nPara ejecutar el contenido de una celda, puedes usar el botón de \"play\" de la celda o utilizar el atajo de teclado `Shift + Enter` al estar posicionado en la celda que quieres ejecutar.","user":"hduser","dateUpdated":"2018-11-07T13:58:47-0600","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2><strong>Notebooks en Apache Zeppelin</strong></h2>\n<p>Las notebooks de Zeppelin están compuestas de una secuencia lineal de celdas. Cada celda en una notebook puede ejecutar código de un diferente interprete, el interprete es seleccionado en la primera línea de la celda usando <code>%interprete</code>, por ejemplo, esta celda utiliza <code>%md</code> en su primera línea para usar el interprete markdown. Para utilizar el interprete de Python, usarás <code>%python</code> en la primera línea de la celda. Para utilizar el interprete de PySpark, usarás <code>%pyspark</code>.</p>\n<p>Para ejecutar el contenido de una celda, puedes usar el botón de &ldquo;play&rdquo; de la celda o utilizar el atajo de teclado <code>Shift + Enter</code> al estar posicionado en la celda que quieres ejecutar.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1533562513599_725026612","id":"20180709-121829_1689048826","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-11-07T13:58:47-0600","dateFinished":"2018-11-07T13:58:50-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:55"},{"text":"%python\n#la linea de arriba declara que la celda usa el interprete de python\n#el siguiente codigo es codigo en python\nprint 'Este es codigo en python, corre esta celda para imprimir este mensaje.'","user":"hduser","dateUpdated":"2018-08-08T09:56:19-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Este es codigo en python, corre esta celda para imprimir este mensaje.\n"}]},"apps":[],"jobName":"paragraph_1533562513600_710790903","id":"20180709-130310_1700445185","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T09:56:19-0500","dateFinished":"2018-08-08T09:56:19-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:56"},{"text":"%python\n#Otra celda que utiliza el interprete de python\nx = 10\nif x > 5:\n    print ('La variable x contiene un valor numerico mayor a 5.')","user":"hduser","dateUpdated":"2018-08-08T09:56:22-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"La variable x contiene un valor numerico mayor a 5.\n"}]},"apps":[],"jobName":"paragraph_1533562513600_710790903","id":"20180709-131245_1688488920","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T09:56:22-0500","dateFinished":"2018-08-08T09:56:22-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:57"},{"text":"%python\n","user":"hduser","dateUpdated":"2018-08-09T10:21:33-0500","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1533828093841_1824478291","id":"20180809-102133_8134385","dateCreated":"2018-08-09T10:21:33-0500","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:58"},{"text":"%md\n### **Las variables declaradas en celdas de la notebook**\n\nLas variables que declaraste y ejecutaste en otras celdas mantienen su valor (unicamente en el interprete donde la declaraste) hasta que el interprete sea reiniciado. Es importante que ejecutes todas las celdas donde existe código para que puedas utilizar las variables declaradas. Al modificar código de una celda, deberás ejecutarla nuevamente para que se realicen los cambios.\n","user":"hduser","dateUpdated":"2018-08-06T08:35:58-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><strong>Las variables declaradas en celdas de la notebook</strong></h3>\n<p>Las variables que declaraste y ejecutaste en otras celdas mantienen su valor (unicamente en el interprete donde la declaraste) hasta que el interprete sea reiniciado. Es importante que ejecutes todas las celdas donde existe código para que puedas utilizar las variables declaradas. Al modificar código de una celda, deberás ejecutarla nuevamente para que se realicen los cambios.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513601_710406154","id":"20180709-131612_219541608","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:35:58-0500","dateFinished":"2018-08-06T08:35:58-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:59"},{"text":"%python\n# Esta celda utiliza la variable que declaraste en una celda anterior, si no ejecutaste tal celda, la celda actual retornara un error \nprint (x * 2)","user":"hduser","dateUpdated":"2018-08-08T09:56:26-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"20\n"}]},"apps":[],"jobName":"paragraph_1533562513602_711560401","id":"20180709-132030_1974900810","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T09:56:26-0500","dateFinished":"2018-08-08T09:56:26-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:60"},{"text":"%md\n## **PySpark**\n\nEn Spark, la comunicación ocurre entre el \"driver\" y los \"executors\". El driver contiene tareas de Spark que deben ser ejecutadas, éstas son divididas y enviadas a los executors para su procesamiento.\n\nEn Zeppelin, para correr código de Spark con Python (PySpark), debemos usar `%pyspark` en la primera línea de la celda.\n\nPara utilizar Spark con la API DataFrame, debemos usar una sesión Spark ([SparkSession](https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.SparkSession)). En Zeppelin, la sesión de Spark es creada de manera automática y puede ser accedida mediante la variable `spark`.","user":"hduser","dateUpdated":"2018-08-06T08:35:58-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2><strong>PySpark</strong></h2>\n<p>En Spark, la comunicación ocurre entre el &ldquo;driver&rdquo; y los &ldquo;executors&rdquo;. El driver contiene tareas de Spark que deben ser ejecutadas, éstas son divididas y enviadas a los executors para su procesamiento.</p>\n<p>En Zeppelin, para correr código de Spark con Python (PySpark), debemos usar <code>%pyspark</code> en la primera línea de la celda.</p>\n<p>Para utilizar Spark con la API DataFrame, debemos usar una sesión Spark (<a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.SparkSession\">SparkSession</a>). En Zeppelin, la sesión de Spark es creada de manera automática y puede ser accedida mediante la variable <code>spark</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513603_711175652","id":"20180709-133143_1838185794","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:35:58-0500","dateFinished":"2018-08-06T08:35:58-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61"},{"text":"%python\nprint('Hola mundo')\n","user":"hduser","dateUpdated":"2018-08-09T10:24:26-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"editorMode":"ace/mode/python","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Hola mundo\n"}]},"apps":[],"jobName":"paragraph_1533828236523_1622282615","id":"20180809-102356_1488019256","dateCreated":"2018-08-09T10:23:56-0500","dateStarted":"2018-08-09T10:24:26-0500","dateFinished":"2018-08-09T10:24:27-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62"},{"text":"%pyspark\n#usamos el interprete de spark con python (pyspark)\nspark#SparkSession","user":"hduser","dateUpdated":"2018-08-08T09:38:52-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<pyspark.sql.session.SparkSession object at 0x7f1e5968ceb8>\n"}]},"apps":[],"jobName":"paragraph_1533562513603_711175652","id":"20180709-140058_214841543","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T09:38:52-0500","dateFinished":"2018-08-08T09:39:05-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:63"},{"text":"%md\n### SparkContext\nEl contexto de Spark ([SparkContext](http://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.SparkContext)), es utilizado para acceder a los métodos de la base de Spark. En Zeppelin, SparkContext es creado de manera automática y puede ser accedido mediante la variable `sc`.","user":"hduser","dateUpdated":"2018-08-06T08:35:58-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>SparkContext</h3>\n<p>El contexto de Spark (<a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.SparkContext\">SparkContext</a>), es utilizado para acceder a los métodos de la base de Spark. En Zeppelin, SparkContext es creado de manera automática y puede ser accedido mediante la variable <code>sc</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513604_709251908","id":"20180709-140705_643261500","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:35:58-0500","dateFinished":"2018-08-06T08:35:58-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64"},{"text":"%pyspark\n#usamos el interprete de spark con python (pyspark)\nsc#SparkContext existe por defecto en la notebook","user":"hduser","dateUpdated":"2018-08-06T08:35:58-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<pyspark.context.SparkContext object at 0x7f35fce78890>\n"}]},"apps":[],"jobName":"paragraph_1533562513605_708867159","id":"20180709-134650_2083109272","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:35:59-0500","dateFinished":"2018-08-06T08:35:59-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"text":"%pyspark\n#La version de Spark que usamos\nsc.version","user":"hduser","dateUpdated":"2018-08-09T10:33:50-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"u'2.0.2'\n"}]},"apps":[],"jobName":"paragraph_1533562513606_710021405","id":"20180709-141640_193342193","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-09T10:33:50-0500","dateFinished":"2018-08-09T10:33:50-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:66"},{"text":"%md\n### Atributos de SparkSession\nPodemos listar todos los atributos de SparkSession (incluidos sus métodos), usando el comando [dir()](https://docs.python.org/2/library/functions.html?highlight=dir#dir) de python.\n","user":"hduser","dateUpdated":"2018-08-06T08:35:59-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Atributos de SparkSession</h3>\n<p>Podemos listar todos los atributos de SparkSession (incluidos sus métodos), usando el comando <a href=\"https://docs.python.org/2/library/functions.html?highlight=dir#dir\">dir()</a> de python.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513606_710021405","id":"20180709-135112_485804452","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:35:59-0500","dateFinished":"2018-08-06T08:35:59-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"text":"%pyspark\n#Enlista los atributos de sqlContext\ndir(spark)\n","user":"hduser","dateUpdated":"2018-08-09T10:33:57-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['Builder', '__class__', '__delattr__', '__dict__', '__doc__', '__enter__', '__exit__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_createFromLocal', '_createFromRDD', '_inferSchema', '_inferSchemaFromList', '_instantiatedContext', '_jsc', '_jsparkSession', '_jvm', '_jwrapped', '_sc', '_wrapped', 'builder', 'catalog', 'conf', 'createDataFrame', 'newSession', 'range', 'read', 'readStream', 'sparkContext', 'sql', 'stop', 'streams', 'table', 'udf', 'version']\n"}]},"apps":[],"jobName":"paragraph_1533562513607_709636656","id":"20180709-135210_584948479","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-09T10:33:57-0500","dateFinished":"2018-08-09T10:33:57-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:68"},{"text":"%md\n### Ayuda en python\nTambién puedes usar el comando [help()](https://docs.python.org/2/library/functions.html?highlight=help#help) de python, para obtener documentación de los atributos.\n","user":"hduser","dateUpdated":"2018-08-06T08:35:59-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Ayuda en python</h3>\n<p>También puedes usar el comando <a href=\"https://docs.python.org/2/library/functions.html?highlight=help#help\">help()</a> de python, para obtener documentación de los atributos.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513608_707712912","id":"20180709-135558_1330640241","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:35:59-0500","dateFinished":"2018-08-06T08:35:59-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"text":"%pyspark\n#comando help() de python\nhelp(spark)","user":"hduser","dateUpdated":"2018-08-09T10:34:01-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Help on SparkSession in module pyspark.sql.session object:\n\nclass SparkSession(__builtin__.object)\n |  The entry point to programming Spark with the Dataset and DataFrame API.\n |  \n |  A SparkSession can be used create :class:`DataFrame`, register :class:`DataFrame` as\n |  tables, execute SQL over tables, cache tables, and read parquet files.\n |  To create a SparkSession, use the following builder pattern:\n |  \n |  >>> spark = SparkSession.builder \\\n |  ...     .master(\"local\") \\\n |  ...     .appName(\"Word Count\") \\\n |  ...     .config(\"spark.some.config.option\", \"some-value\") \\\n |  ...     .getOrCreate()\n |  \n |  Methods defined here:\n |  \n |  __enter__(self)\n |      Enable 'with SparkSession.builder.(...).getOrCreate() as session: app' syntax.\n |      \n |      .. versionadded:: 2.0\n |  \n |  __exit__(self, exc_type, exc_val, exc_tb)\n |      Enable 'with SparkSession.builder.(...).getOrCreate() as session: app' syntax.\n |      \n |      Specifically stop the SparkSession on exit of the with block.\n |      \n |      .. versionadded:: 2.0\n |  \n |  __init__(self, sparkContext, jsparkSession=None)\n |      Creates a new SparkSession.\n |      \n |      >>> from datetime import datetime\n |      >>> spark = SparkSession(sc)\n |      >>> allTypes = sc.parallelize([Row(i=1, s=\"string\", d=1.0, l=1,\n |      ...     b=True, list=[1, 2, 3], dict={\"s\": 0}, row=Row(a=1),\n |      ...     time=datetime(2014, 8, 1, 14, 1, 5))])\n |      >>> df = allTypes.toDF()\n |      >>> df.createOrReplaceTempView(\"allTypes\")\n |      >>> spark.sql('select i+1, d+1, not b, list[1], dict[\"s\"], time, row.a '\n |      ...            'from allTypes where b and i > 0').collect()\n |      [Row((i + CAST(1 AS BIGINT))=2, (d + CAST(1 AS DOUBLE))=2.0, (NOT b)=False, list[1]=2,             dict[s]=0, time=datetime.datetime(2014, 8, 1, 14, 1, 5), a=1)]\n |      >>> df.rdd.map(lambda x: (x.i, x.s, x.d, x.l, x.b, x.time, x.row.a, x.list)).collect()\n |      [(1, u'string', 1.0, 1, True, datetime.datetime(2014, 8, 1, 14, 1, 5), 1, [1, 2, 3])]\n |  \n |  createDataFrame(self, data, schema=None, samplingRatio=None, verifySchema=True)\n |      Creates a :class:`DataFrame` from an :class:`RDD`, a list or a :class:`pandas.DataFrame`.\n |      \n |      When ``schema`` is a list of column names, the type of each column\n |      will be inferred from ``data``.\n |      \n |      When ``schema`` is ``None``, it will try to infer the schema (column names and types)\n |      from ``data``, which should be an RDD of :class:`Row`,\n |      or :class:`namedtuple`, or :class:`dict`.\n |      \n |      When ``schema`` is :class:`pyspark.sql.types.DataType` or\n |      :class:`pyspark.sql.types.StringType`, it must match the\n |      real data, or an exception will be thrown at runtime. If the given schema is not\n |      :class:`pyspark.sql.types.StructType`, it will be wrapped into a\n |      :class:`pyspark.sql.types.StructType` as its only field, and the field name will be \"value\",\n |      each record will also be wrapped into a tuple, which can be converted to row later.\n |      \n |      If schema inference is needed, ``samplingRatio`` is used to determined the ratio of\n |      rows used for schema inference. The first row will be used if ``samplingRatio`` is ``None``.\n |      \n |      :param data: an RDD of any kind of SQL data representation(e.g. row, tuple, int, boolean,\n |          etc.), or :class:`list`, or :class:`pandas.DataFrame`.\n |      :param schema: a :class:`pyspark.sql.types.DataType` or a\n |          :class:`pyspark.sql.types.StringType` or a list of\n |          column names, default is ``None``.  The data type string format equals to\n |          :class:`pyspark.sql.types.DataType.simpleString`, except that top level struct type can\n |          omit the ``struct<>`` and atomic types use ``typeName()`` as their format, e.g. use\n |          ``byte`` instead of ``tinyint`` for :class:`pyspark.sql.types.ByteType`. We can also use\n |          ``int`` as a short name for ``IntegerType``.\n |      :param samplingRatio: the sample ratio of rows used for inferring\n |      :param verifySchema: verify data types of every row against schema.\n |      :return: :class:`DataFrame`\n |      \n |      .. versionchanged:: 2.0.1\n |         Added verifySchema.\n |      \n |      >>> l = [('Alice', 1)]\n |      >>> spark.createDataFrame(l).collect()\n |      [Row(_1=u'Alice', _2=1)]\n |      >>> spark.createDataFrame(l, ['name', 'age']).collect()\n |      [Row(name=u'Alice', age=1)]\n |      \n |      >>> d = [{'name': 'Alice', 'age': 1}]\n |      >>> spark.createDataFrame(d).collect()\n |      [Row(age=1, name=u'Alice')]\n |      \n |      >>> rdd = sc.parallelize(l)\n |      >>> spark.createDataFrame(rdd).collect()\n |      [Row(_1=u'Alice', _2=1)]\n |      >>> df = spark.createDataFrame(rdd, ['name', 'age'])\n |      >>> df.collect()\n |      [Row(name=u'Alice', age=1)]\n |      \n |      >>> from pyspark.sql import Row\n |      >>> Person = Row('name', 'age')\n |      >>> person = rdd.map(lambda r: Person(*r))\n |      >>> df2 = spark.createDataFrame(person)\n |      >>> df2.collect()\n |      [Row(name=u'Alice', age=1)]\n |      \n |      >>> from pyspark.sql.types import *\n |      >>> schema = StructType([\n |      ...    StructField(\"name\", StringType(), True),\n |      ...    StructField(\"age\", IntegerType(), True)])\n |      >>> df3 = spark.createDataFrame(rdd, schema)\n |      >>> df3.collect()\n |      [Row(name=u'Alice', age=1)]\n |      \n |      >>> spark.createDataFrame(df.toPandas()).collect()  # doctest: +SKIP\n |      [Row(name=u'Alice', age=1)]\n |      >>> spark.createDataFrame(pandas.DataFrame([[1, 2]])).collect()  # doctest: +SKIP\n |      [Row(0=1, 1=2)]\n |      \n |      >>> spark.createDataFrame(rdd, \"a: string, b: int\").collect()\n |      [Row(a=u'Alice', b=1)]\n |      >>> rdd = rdd.map(lambda row: row[1])\n |      >>> spark.createDataFrame(rdd, \"int\").collect()\n |      [Row(value=1)]\n |      >>> spark.createDataFrame(rdd, \"boolean\").collect() # doctest: +IGNORE_EXCEPTION_DETAIL\n |      Traceback (most recent call last):\n |          ...\n |      Py4JJavaError: ...\n |      \n |      .. versionadded:: 2.0\n |  \n |  newSession(self)\n |      Returns a new SparkSession as new session, that has separate SQLConf,\n |      registered temporary views and UDFs, but shared SparkContext and\n |      table cache.\n |      \n |      .. versionadded:: 2.0\n |  \n |  range(self, start, end=None, step=1, numPartitions=None)\n |      Create a :class:`DataFrame` with single :class:`pyspark.sql.types.LongType` column named\n |      ``id``, containing elements in a range from ``start`` to ``end`` (exclusive) with\n |      step value ``step``.\n |      \n |      :param start: the start value\n |      :param end: the end value (exclusive)\n |      :param step: the incremental step (default: 1)\n |      :param numPartitions: the number of partitions of the DataFrame\n |      :return: :class:`DataFrame`\n |      \n |      >>> spark.range(1, 7, 2).collect()\n |      [Row(id=1), Row(id=3), Row(id=5)]\n |      \n |      If only one argument is specified, it will be used as the end value.\n |      \n |      >>> spark.range(3).collect()\n |      [Row(id=0), Row(id=1), Row(id=2)]\n |      \n |      .. versionadded:: 2.0\n |  \n |  sql(self, sqlQuery)\n |      Returns a :class:`DataFrame` representing the result of the given query.\n |      \n |      :return: :class:`DataFrame`\n |      \n |      >>> df.createOrReplaceTempView(\"table1\")\n |      >>> df2 = spark.sql(\"SELECT field1 AS f1, field2 as f2 from table1\")\n |      >>> df2.collect()\n |      [Row(f1=1, f2=u'row1'), Row(f1=2, f2=u'row2'), Row(f1=3, f2=u'row3')]\n |      \n |      .. versionadded:: 2.0\n |  \n |  stop(self)\n |      Stop the underlying :class:`SparkContext`.\n |      \n |      .. versionadded:: 2.0\n |  \n |  table(self, tableName)\n |      Returns the specified table as a :class:`DataFrame`.\n |      \n |      :return: :class:`DataFrame`\n |      \n |      >>> df.createOrReplaceTempView(\"table1\")\n |      >>> df2 = spark.table(\"table1\")\n |      >>> sorted(df.collect()) == sorted(df2.collect())\n |      True\n |      \n |      .. versionadded:: 2.0\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  catalog\n |      Interface through which the user may create, drop, alter or query underlying\n |      databases, tables, functions etc.\n |      \n |      .. versionadded:: 2.0\n |  \n |  conf\n |      Runtime configuration interface for Spark.\n |      \n |      This is the interface through which the user can get and set all Spark and Hadoop\n |      configurations that are relevant to Spark SQL. When getting the value of a config,\n |      this defaults to the value set in the underlying :class:`SparkContext`, if any.\n |      \n |      .. versionadded:: 2.0\n |  \n |  read\n |      Returns a :class:`DataFrameReader` that can be used to read data\n |      in as a :class:`DataFrame`.\n |      \n |      :return: :class:`DataFrameReader`\n |      \n |      .. versionadded:: 2.0\n |  \n |  readStream\n |      Returns a :class:`DataStreamReader` that can be used to read data streams\n |      as a streaming :class:`DataFrame`.\n |      \n |      .. note:: Experimental.\n |      \n |      :return: :class:`DataStreamReader`\n |      \n |      .. versionadded:: 2.0\n |  \n |  sparkContext\n |      Returns the underlying :class:`SparkContext`.\n |      \n |      .. versionadded:: 2.0\n |  \n |  streams\n |      Returns a :class:`StreamingQueryManager` that allows managing all the\n |      :class:`StreamingQuery` StreamingQueries active on `this` context.\n |      \n |      .. note:: Experimental.\n |      \n |      :return: :class:`StreamingQueryManager`\n |      \n |      .. versionadded:: 2.0\n |  \n |  udf\n |      Returns a :class:`UDFRegistration` for UDF registration.\n |      \n |      :return: :class:`UDFRegistration`\n |      \n |      .. versionadded:: 2.0\n |  \n |  version\n |      The version of Spark on which this application is running.\n |      \n |      .. versionadded:: 2.0\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  Builder = <class 'pyspark.sql.session.Builder'>\n |      Builder for :class:`SparkSession`.\n |  \n |  builder = <pyspark.sql.session.Builder object>\n\n"}]},"apps":[],"jobName":"paragraph_1533562513609_707328163","id":"20180709-135336_55903813","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-09T10:34:01-0500","dateFinished":"2018-08-09T10:34:01-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"text":"%md\n## **Importar librerías**\n\nEn Zeppelin podemos importar librerías ([modules](https://docs.python.org/2/tutorial/modules.html)) de la forma tradicional de python usando `import`, para importar el módulo especificado.\n","user":"hduser","dateUpdated":"2018-08-06T08:36:00-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2><strong>Importar librerías</strong></h2>\n<p>En Zeppelin podemos importar librerías (<a href=\"https://docs.python.org/2/tutorial/modules.html\">modules</a>) de la forma tradicional de python usando <code>import</code>, para importar el módulo especificado.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513609_707328163","id":"20180709-132412_2120223178","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:00-0500","dateFinished":"2018-08-06T08:36:00-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"text":"%pyspark\n# Importar el modulo de expresiones regulares\nimport re\n#importar el modulo datetime\nimport datetime\n","user":"hduser","dateUpdated":"2018-08-09T10:34:04-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1533562513610_708482410","id":"20180709-133029_2069265860","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-09T10:34:05-0500","dateFinished":"2018-08-09T10:34:05-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"text":"%md\n## Usando DataFrames: Creando un plan de trabajo con transformaciones y acciones\n\nCrearemos un [DataFrame](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame) de Spark. Podemos aplicar una o más transformaciones a un DataFrame. Un DataFrame es *inmutable*, por lo que una vez creado, no puede modificarse. Cada transformación aplicada a un DataFrame creará un nuevo DataFrame. Finalmente, podemos aplicar una o más acciones al DataFrame.\n\nLos DataFrames en Spark son evaluados de manera pasiva, por lo que las transformaciones aplicadas no son ejecutadas hasta que se realiza una acción.","user":"hduser","dateUpdated":"2018-08-06T08:36:00-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Usando DataFrames: Creando un plan de trabajo con transformaciones y acciones</h2>\n<p>Crearemos un <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame\">DataFrame</a> de Spark. Podemos aplicar una o más transformaciones a un DataFrame. Un DataFrame es <em>inmutable</em>, por lo que una vez creado, no puede modificarse. Cada transformación aplicada a un DataFrame creará un nuevo DataFrame. Finalmente, podemos aplicar una o más acciones al DataFrame.</p>\n<p>Los DataFrames en Spark son evaluados de manera pasiva, por lo que las transformaciones aplicadas no son ejecutadas hasta que se realiza una acción.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513611_708097661","id":"20180709-141716_270382616","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:00-0500","dateFinished":"2018-08-06T08:36:00-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"text":"%md\n### Vamos a crear una colección de Python con 10,000 personas\n\nUsaremos el módulo [Faker](https://pypi.org/project/Faker/) para crear una colección de registros falsos de personas.","user":"hduser","dateUpdated":"2018-08-06T08:36:00-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Vamos a crear una colección de Python con 10,000 personas</h3>\n<p>Usaremos el módulo <a href=\"https://pypi.org/project/Faker/\">Faker</a> para crear una colección de registros falsos de personas.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513612_706173916","id":"20180709-143137_2109034824","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:00-0500","dateFinished":"2018-08-06T08:36:00-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"text":"%pyspark\nfrom faker import Faker\nfake = Faker('es_MX')\nfake.seed(4321)","user":"hduser","dateUpdated":"2018-11-22T12:54:09-0600","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1533562513612_706173916","id":"20180709-141614_647075606","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-11-22T12:54:09-0600","dateFinished":"2018-11-22T12:54:10-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"%md\nUsaremos `fake` para crear registros aleatorios de personas. Después crearemos un DataFrame usando estos registros.","user":"hduser","dateUpdated":"2018-08-06T08:36:00-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Usaremos <code>fake</code> para crear registros aleatorios de personas. Después crearemos un DataFrame usando estos registros.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513613_705789167","id":"20180709-143620_217216091","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:00-0500","dateFinished":"2018-08-06T08:36:00-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"text":"%pyspark\n# cada entrada consiste de un apellido, nombre, numero de seguro social, ocupacion y edad (at least 1)\nfrom pyspark.sql import Row\ndef fake_entry():\n  return (fake.last_name(), fake.first_name(), fake.ssn(), fake.job(), abs(2018 - fake.date_time().year) + 1)","user":"hduser","dateUpdated":"2018-11-22T12:54:17-0600","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1533562513614_706943414","id":"20180709-143347_1901683663","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-11-22T12:54:17-0600","dateFinished":"2018-11-22T12:54:17-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"text":"%pyspark\n# Creamos una function secundaria para llamar a una funcion repetidamente\ndef repeat(times, func, *args, **kwargs):\n    for _ in xrange(times):\n        yield func(*args, **kwargs)","user":"hduser","dateUpdated":"2018-11-22T12:54:22-0600","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1533562513615_706558665","id":"20180709-143908_1683906159","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-11-22T12:54:22-0600","dateFinished":"2018-11-22T12:54:22-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:78"},{"text":"%pyspark\ndata = list(repeat(10000, fake_entry))","user":"hduser","dateUpdated":"2018-11-22T12:54:24-0600","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1533562513615_706558665","id":"20180709-143947_1868623492","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-11-22T12:54:24-0600","dateFinished":"2018-11-22T12:54:25-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:79"},{"text":"%md\n`data` es una lista de tuplas ordinaria en python.","user":"hduser","dateUpdated":"2018-08-06T08:36:01-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p><code>data</code> es una lista de tuplas ordinaria en python.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513616_716946886","id":"20180709-144000_357467405","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:01-0500","dateFinished":"2018-08-06T08:36:01-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:80"},{"text":"%pyspark\n#Mostremos el primer elemento en data\nprint (\"Primer registro:\")\nprint (data[0])\n#Contemos el numero de registros en data usando len()\nprint (\"Elementos en data:\")\nprint (len(data))","user":"hduser","dateUpdated":"2018-11-22T12:54:29-0600","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Primer registro:\n(u'Correa', u'Gerardo', u'058-18-3654', 'Systems analyst', 47)\nElementos en data:\n10000\n"}]},"apps":[],"jobName":"paragraph_1533562513617_716562137","id":"20180709-143957_1250316402","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-11-22T12:54:29-0600","dateFinished":"2018-11-22T12:54:29-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:81"},{"text":"%md\n### Crear un DataFrame con una colección de python\n\nEn Spark, los conjuntos de datos se representan mediantes una lista de entradas, donde la lista se reparte en múltiples particiones distribuidas en diferentes máquinas. Cada particion contiene un subconjunto de entradas de la lista. La abstracción de Spark para almacenar estas listas es llamada RDD (Resilient Distributed Datasets). Los DataFrames de Spark son representados a bajo nivel mediante RDDs (con meta-datos adicionales).\n\nLa característica principal de Spark, es su capacidad de almacenar los datos en memoria en lugar de en disco. Esto puede acelerar tareas que reutilizan los datos en diferentes etapas, ya que no deben ser cargados desde disco en cada paso.\n\nPara crear un DataFrame con la colección de python, usaremós la sesión de spark (`spark`) con la función [`createDataFrame()`](https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.SparkSession.createDataFrame). Un DataFrame requiere la especificación del esquema de los datos (como en una tabla de una base de datos relacional), por lo cual se necesita especificar los nombres de las columnas y el tipo de dato que utilizan (en este caso, dejarémos que Spark infiera el tipo de dato).\n","user":"hduser","dateUpdated":"2018-08-06T08:36:01-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Crear un DataFrame con una colección de python</h3>\n<p>En Spark, los conjuntos de datos se representan mediantes una lista de entradas, donde la lista se reparte en múltiples particiones distribuidas en diferentes máquinas. Cada particion contiene un subconjunto de entradas de la lista. La abstracción de Spark para almacenar estas listas es llamada RDD (Resilient Distributed Datasets). Los DataFrames de Spark son representados a bajo nivel mediante RDDs (con meta-datos adicionales).</p>\n<p>La característica principal de Spark, es su capacidad de almacenar los datos en memoria en lugar de en disco. Esto puede acelerar tareas que reutilizan los datos en diferentes etapas, ya que no deben ser cargados desde disco en cada paso.</p>\n<p>Para crear un DataFrame con la colección de python, usaremós la sesión de spark (<code>spark</code>) con la función <a href=\"https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.SparkSession.createDataFrame\"><code>createDataFrame()</code></a>. Un DataFrame requiere la especificación del esquema de los datos (como en una tabla de una base de datos relacional), por lo cual se necesita especificar los nombres de las columnas y el tipo de dato que utilizan (en este caso, dejarémos que Spark infiera el tipo de dato).</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513618_717716383","id":"20180709-144241_697327606","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:01-0500","dateFinished":"2018-08-06T08:36:01-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:82"},{"text":"%md\nUsaremos `createDataFrame()` para generar un DataFrame con la colección de registros generada en python (`data`).","user":"hduser","dateUpdated":"2018-08-06T08:36:01-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Usaremos <code>createDataFrame()</code> para generar un DataFrame con la colección de registros generada en python (<code>data</code>).</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513618_717716383","id":"20180709-145700_1468642317","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:02-0500","dateFinished":"2018-08-06T08:36:02-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:83"},{"text":"%pyspark\ndataDF = spark.createDataFrame(data, ('apellido', 'nombre', 'nss', 'ocupacion', 'edad'))","user":"hduser","dateUpdated":"2018-11-22T12:54:44-0600","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1533562513619_717331634","id":"20180709-144156_2117541068","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-11-22T12:54:44-0600","dateFinished":"2018-11-22T12:54:44-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:84"},{"text":"%md\nMostremos el tipo de dato que nos regresó la función `createDataFrame()`.","user":"hduser","dateUpdated":"2018-08-06T08:36:02-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Mostremos el tipo de dato que nos regresó la función <code>createDataFrame()</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513620_715407890","id":"20180709-145653_1322720655","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:02-0500","dateFinished":"2018-08-06T08:36:02-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:85"},{"text":"%pyspark\nprint ('dataDF es del tipo: {0}'.format(type(dataDF)))","user":"hduser","dateUpdated":"2018-11-22T12:54:49-0600","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dataDF es del tipo: <class 'pyspark.sql.dataframe.DataFrame'>\n"}]},"apps":[],"jobName":"paragraph_1533562513621_715023141","id":"20180709-145429_2143929613","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-11-22T12:54:49-0600","dateFinished":"2018-11-22T12:54:49-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:86"},{"text":"%md\nPodemos visualizar el esquema del DataFrame usando `printSchema()`.","user":"hduser","dateUpdated":"2018-08-06T08:36:02-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Podemos visualizar el esquema del DataFrame usando <code>printSchema()</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513622_716177388","id":"20180709-185450_646863095","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:02-0500","dateFinished":"2018-08-06T08:36:02-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87"},{"text":"%pyspark\ndataDF.printSchema()","user":"hduser","dateUpdated":"2018-08-08T09:49:51-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- apellido: string (nullable = true)\n |-- nombre: string (nullable = true)\n |-- nss: string (nullable = true)\n |-- ocupacion: string (nullable = true)\n |-- edad: long (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1533562513623_715792639","id":"20180709-185452_345335387","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T09:49:52-0500","dateFinished":"2018-08-08T09:49:52-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:88"},{"text":"%md\n¿Qué métodos podemos utilizar con nuestro DataFrame?","user":"hduser","dateUpdated":"2018-08-06T08:36:02-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>¿Qué métodos podemos utilizar con nuestro DataFrame?</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513623_715792639","id":"20180709-151228_1208713852","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:02-0500","dateFinished":"2018-08-06T08:36:02-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:89"},{"text":"%pyspark\nhelp(dataDF)","user":"hduser","dateUpdated":"2018-08-08T10:07:46-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Help on DataFrame in module pyspark.sql.dataframe object:\n\nclass DataFrame(__builtin__.object)\n |  A distributed collection of data grouped into named columns.\n |  \n |  A :class:`DataFrame` is equivalent to a relational table in Spark SQL,\n |  and can be created using various functions in :class:`SQLContext`::\n |  \n |      people = sqlContext.read.parquet(\"...\")\n |  \n |  Once created, it can be manipulated using the various domain-specific-language\n |  (DSL) functions defined in: :class:`DataFrame`, :class:`Column`.\n |  \n |  To select a column from the data frame, use the apply method::\n |  \n |      ageCol = people.age\n |  \n |  A more concrete example::\n |  \n |      # To create DataFrame using SQLContext\n |      people = sqlContext.read.parquet(\"...\")\n |      department = sqlContext.read.parquet(\"...\")\n |  \n |      people.filter(people.age > 30).join(department, people.deptId == department.id) \\\n |        .groupBy(department.name, \"gender\").agg({\"salary\": \"avg\", \"age\": \"max\"})\n |  \n |  .. versionadded:: 1.3\n |  \n |  Methods defined here:\n |  \n |  __getattr__(self, name)\n |      Returns the :class:`Column` denoted by ``name``.\n |      \n |      >>> df.select(df.age).collect()\n |      [Row(age=2), Row(age=5)]\n |      \n |      .. versionadded:: 1.3\n |  \n |  __getitem__(self, item)\n |      Returns the column as a :class:`Column`.\n |      \n |      >>> df.select(df['age']).collect()\n |      [Row(age=2), Row(age=5)]\n |      >>> df[ [\"name\", \"age\"]].collect()\n |      [Row(name=u'Alice', age=2), Row(name=u'Bob', age=5)]\n |      >>> df[ df.age > 3 ].collect()\n |      [Row(age=5, name=u'Bob')]\n |      >>> df[df[0] > 3].collect()\n |      [Row(age=5, name=u'Bob')]\n |      \n |      .. versionadded:: 1.3\n |  \n |  __init__(self, jdf, sql_ctx)\n |  \n |  __repr__(self)\n |  \n |  agg(self, *exprs)\n |      Aggregate on the entire :class:`DataFrame` without groups\n |      (shorthand for ``df.groupBy.agg()``).\n |      \n |      >>> df.agg({\"age\": \"max\"}).collect()\n |      [Row(max(age)=5)]\n |      >>> from pyspark.sql import functions as F\n |      >>> df.agg(F.min(df.age)).collect()\n |      [Row(min(age)=2)]\n |      \n |      .. versionadded:: 1.3\n |  \n |  alias(self, alias)\n |      Returns a new :class:`DataFrame` with an alias set.\n |      \n |      >>> from pyspark.sql.functions import *\n |      >>> df_as1 = df.alias(\"df_as1\")\n |      >>> df_as2 = df.alias(\"df_as2\")\n |      >>> joined_df = df_as1.join(df_as2, col(\"df_as1.name\") == col(\"df_as2.name\"), 'inner')\n |      >>> joined_df.select(\"df_as1.name\", \"df_as2.name\", \"df_as2.age\").collect()\n |      [Row(name=u'Bob', name=u'Bob', age=5), Row(name=u'Alice', name=u'Alice', age=2)]\n |      \n |      .. versionadded:: 1.3\n |  \n |  approxQuantile(self, col, probabilities, relativeError)\n |      Calculates the approximate quantiles of a numerical column of a\n |      DataFrame.\n |      \n |      The result of this algorithm has the following deterministic bound:\n |      If the DataFrame has N elements and if we request the quantile at\n |      probability `p` up to error `err`, then the algorithm will return\n |      a sample `x` from the DataFrame so that the *exact* rank of `x` is\n |      close to (p * N). More precisely,\n |      \n |        floor((p - err) * N) <= rank(x) <= ceil((p + err) * N).\n |      \n |      This method implements a variation of the Greenwald-Khanna\n |      algorithm (with some speed optimizations). The algorithm was first\n |      present in [[http://dx.doi.org/10.1145/375663.375670\n |      Space-efficient Online Computation of Quantile Summaries]]\n |      by Greenwald and Khanna.\n |      \n |      :param col: the name of the numerical column\n |      :param probabilities: a list of quantile probabilities\n |        Each number must belong to [0, 1].\n |        For example 0 is the minimum, 0.5 is the median, 1 is the maximum.\n |      :param relativeError:  The relative target precision to achieve\n |        (>= 0). If set to zero, the exact quantiles are computed, which\n |        could be very expensive. Note that values greater than 1 are\n |        accepted but give the same result as 1.\n |      :return:  the approximate quantiles at the given probabilities\n |      \n |      .. versionadded:: 2.0\n |  \n |  cache(self)\n |      Persists with the default storage level (C{MEMORY_ONLY}).\n |      \n |      .. versionadded:: 1.3\n |  \n |  coalesce(self, numPartitions)\n |      Returns a new :class:`DataFrame` that has exactly `numPartitions` partitions.\n |      \n |      Similar to coalesce defined on an :class:`RDD`, this operation results in a\n |      narrow dependency, e.g. if you go from 1000 partitions to 100 partitions,\n |      there will not be a shuffle, instead each of the 100 new partitions will\n |      claim 10 of the current partitions.\n |      \n |      >>> df.coalesce(1).rdd.getNumPartitions()\n |      1\n |      \n |      .. versionadded:: 1.4\n |  \n |  collect(self)\n |      Returns all the records as a list of :class:`Row`.\n |      \n |      >>> df.collect()\n |      [Row(age=2, name=u'Alice'), Row(age=5, name=u'Bob')]\n |      \n |      .. versionadded:: 1.3\n |  \n |  corr(self, col1, col2, method=None)\n |      Calculates the correlation of two columns of a DataFrame as a double value.\n |      Currently only supports the Pearson Correlation Coefficient.\n |      :func:`DataFrame.corr` and :func:`DataFrameStatFunctions.corr` are aliases of each other.\n |      \n |      :param col1: The name of the first column\n |      :param col2: The name of the second column\n |      :param method: The correlation method. Currently only supports \"pearson\"\n |      \n |      .. versionadded:: 1.4\n |  \n |  count(self)\n |      Returns the number of rows in this :class:`DataFrame`.\n |      \n |      >>> df.count()\n |      2\n |      \n |      .. versionadded:: 1.3\n |  \n |  cov(self, col1, col2)\n |      Calculate the sample covariance for the given columns, specified by their names, as a\n |      double value. :func:`DataFrame.cov` and :func:`DataFrameStatFunctions.cov` are aliases.\n |      \n |      :param col1: The name of the first column\n |      :param col2: The name of the second column\n |      \n |      .. versionadded:: 1.4\n |  \n |  createOrReplaceTempView(self, name)\n |      Creates or replaces a temporary view with this DataFrame.\n |      \n |      The lifetime of this temporary table is tied to the :class:`SparkSession`\n |      that was used to create this :class:`DataFrame`.\n |      \n |      >>> df.createOrReplaceTempView(\"people\")\n |      >>> df2 = df.filter(df.age > 3)\n |      >>> df2.createOrReplaceTempView(\"people\")\n |      >>> df3 = spark.sql(\"select * from people\")\n |      >>> sorted(df3.collect()) == sorted(df2.collect())\n |      True\n |      >>> spark.catalog.dropTempView(\"people\")\n |      \n |      .. versionadded:: 2.0\n |  \n |  createTempView(self, name)\n |      Creates a temporary view with this DataFrame.\n |      \n |      The lifetime of this temporary table is tied to the :class:`SparkSession`\n |      that was used to create this :class:`DataFrame`.\n |      throws :class:`TempTableAlreadyExistsException`, if the view name already exists in the\n |      catalog.\n |      \n |      >>> df.createTempView(\"people\")\n |      >>> df2 = spark.sql(\"select * from people\")\n |      >>> sorted(df.collect()) == sorted(df2.collect())\n |      True\n |      >>> df.createTempView(\"people\")  # doctest: +IGNORE_EXCEPTION_DETAIL\n |      Traceback (most recent call last):\n |      ...\n |      AnalysisException: u\"Temporary table 'people' already exists;\"\n |      >>> spark.catalog.dropTempView(\"people\")\n |      \n |      .. versionadded:: 2.0\n |  \n |  crosstab(self, col1, col2)\n |      Computes a pair-wise frequency table of the given columns. Also known as a contingency\n |      table. The number of distinct values for each column should be less than 1e4. At most 1e6\n |      non-zero pair frequencies will be returned.\n |      The first column of each row will be the distinct values of `col1` and the column names\n |      will be the distinct values of `col2`. The name of the first column will be `$col1_$col2`.\n |      Pairs that have no occurrences will have zero as their counts.\n |      :func:`DataFrame.crosstab` and :func:`DataFrameStatFunctions.crosstab` are aliases.\n |      \n |      :param col1: The name of the first column. Distinct items will make the first item of\n |          each row.\n |      :param col2: The name of the second column. Distinct items will make the column names\n |          of the DataFrame.\n |      \n |      .. versionadded:: 1.4\n |  \n |  cube(self, *cols)\n |      Create a multi-dimensional cube for the current :class:`DataFrame` using\n |      the specified columns, so we can run aggregation on them.\n |      \n |      >>> df.cube(\"name\", df.age).count().orderBy(\"name\", \"age\").show()\n |      +-----+----+-----+\n |      | name| age|count|\n |      +-----+----+-----+\n |      | null|null|    2|\n |      | null|   2|    1|\n |      | null|   5|    1|\n |      |Alice|null|    1|\n |      |Alice|   2|    1|\n |      |  Bob|null|    1|\n |      |  Bob|   5|    1|\n |      +-----+----+-----+\n |      \n |      .. versionadded:: 1.4\n |  \n |  describe(self, *cols)\n |      Computes statistics for numeric columns.\n |      \n |      This include count, mean, stddev, min, and max. If no columns are\n |      given, this function computes statistics for all numerical columns.\n |      \n |      .. note:: This function is meant for exploratory data analysis, as we make no         guarantee about the backward compatibility of the schema of the resulting DataFrame.\n |      \n |      >>> df.describe().show()\n |      +-------+------------------+\n |      |summary|               age|\n |      +-------+------------------+\n |      |  count|                 2|\n |      |   mean|               3.5|\n |      | stddev|2.1213203435596424|\n |      |    min|                 2|\n |      |    max|                 5|\n |      +-------+------------------+\n |      >>> df.describe(['age', 'name']).show()\n |      +-------+------------------+-----+\n |      |summary|               age| name|\n |      +-------+------------------+-----+\n |      |  count|                 2|    2|\n |      |   mean|               3.5| null|\n |      | stddev|2.1213203435596424| null|\n |      |    min|                 2|Alice|\n |      |    max|                 5|  Bob|\n |      +-------+------------------+-----+\n |      \n |      .. versionadded:: 1.3.1\n |  \n |  distinct(self)\n |      Returns a new :class:`DataFrame` containing the distinct rows in this :class:`DataFrame`.\n |      \n |      >>> df.distinct().count()\n |      2\n |      \n |      .. versionadded:: 1.3\n |  \n |  drop(self, col)\n |      Returns a new :class:`DataFrame` that drops the specified column.\n |      This is a no-op if schema doesn't contain the given column name(s).\n |      \n |      :param col: a string name of the column to drop, or a\n |          :class:`Column` to drop.\n |      \n |      >>> df.drop('age').collect()\n |      [Row(name=u'Alice'), Row(name=u'Bob')]\n |      \n |      >>> df.drop(df.age).collect()\n |      [Row(name=u'Alice'), Row(name=u'Bob')]\n |      \n |      >>> df.join(df2, df.name == df2.name, 'inner').drop(df.name).collect()\n |      [Row(age=5, height=85, name=u'Bob')]\n |      \n |      >>> df.join(df2, df.name == df2.name, 'inner').drop(df2.name).collect()\n |      [Row(age=5, name=u'Bob', height=85)]\n |      \n |      .. versionadded:: 1.4\n |  \n |  dropDuplicates(self, subset=None)\n |      Return a new :class:`DataFrame` with duplicate rows removed,\n |      optionally only considering certain columns.\n |      \n |      :func:`drop_duplicates` is an alias for :func:`dropDuplicates`.\n |      \n |      >>> from pyspark.sql import Row\n |      >>> df = sc.parallelize([ \\\n |      ...     Row(name='Alice', age=5, height=80), \\\n |      ...     Row(name='Alice', age=5, height=80), \\\n |      ...     Row(name='Alice', age=10, height=80)]).toDF()\n |      >>> df.dropDuplicates().show()\n |      +---+------+-----+\n |      |age|height| name|\n |      +---+------+-----+\n |      |  5|    80|Alice|\n |      | 10|    80|Alice|\n |      +---+------+-----+\n |      \n |      >>> df.dropDuplicates(['name', 'height']).show()\n |      +---+------+-----+\n |      |age|height| name|\n |      +---+------+-----+\n |      |  5|    80|Alice|\n |      +---+------+-----+\n |      \n |      .. versionadded:: 1.4\n |  \n |  drop_duplicates = dropDuplicates(self, subset=None)\n |      :func:`drop_duplicates` is an alias for :func:`dropDuplicates`.\n |      \n |      .. versionadded:: 1.4\n |  \n |  dropna(self, how='any', thresh=None, subset=None)\n |      Returns a new :class:`DataFrame` omitting rows with null values.\n |      :func:`DataFrame.dropna` and :func:`DataFrameNaFunctions.drop` are aliases of each other.\n |      \n |      :param how: 'any' or 'all'.\n |          If 'any', drop a row if it contains any nulls.\n |          If 'all', drop a row only if all its values are null.\n |      :param thresh: int, default None\n |          If specified, drop rows that have less than `thresh` non-null values.\n |          This overwrites the `how` parameter.\n |      :param subset: optional list of column names to consider.\n |      \n |      >>> df4.na.drop().show()\n |      +---+------+-----+\n |      |age|height| name|\n |      +---+------+-----+\n |      | 10|    80|Alice|\n |      +---+------+-----+\n |      \n |      .. versionadded:: 1.3.1\n |  \n |  explain(self, extended=False)\n |      Prints the (logical and physical) plans to the console for debugging purpose.\n |      \n |      :param extended: boolean, default ``False``. If ``False``, prints only the physical plan.\n |      \n |      >>> df.explain()\n |      == Physical Plan ==\n |      Scan ExistingRDD[age#0,name#1]\n |      \n |      >>> df.explain(True)\n |      == Parsed Logical Plan ==\n |      ...\n |      == Analyzed Logical Plan ==\n |      ...\n |      == Optimized Logical Plan ==\n |      ...\n |      == Physical Plan ==\n |      ...\n |      \n |      .. versionadded:: 1.3\n |  \n |  fillna(self, value, subset=None)\n |      Replace null values, alias for ``na.fill()``.\n |      :func:`DataFrame.fillna` and :func:`DataFrameNaFunctions.fill` are aliases of each other.\n |      \n |      :param value: int, long, float, string, or dict.\n |          Value to replace null values with.\n |          If the value is a dict, then `subset` is ignored and `value` must be a mapping\n |          from column name (string) to replacement value. The replacement value must be\n |          an int, long, float, or string.\n |      :param subset: optional list of column names to consider.\n |          Columns specified in subset that do not have matching data type are ignored.\n |          For example, if `value` is a string, and subset contains a non-string column,\n |          then the non-string column is simply ignored.\n |      \n |      >>> df4.na.fill(50).show()\n |      +---+------+-----+\n |      |age|height| name|\n |      +---+------+-----+\n |      | 10|    80|Alice|\n |      |  5|    50|  Bob|\n |      | 50|    50|  Tom|\n |      | 50|    50| null|\n |      +---+------+-----+\n |      \n |      >>> df4.na.fill({'age': 50, 'name': 'unknown'}).show()\n |      +---+------+-------+\n |      |age|height|   name|\n |      +---+------+-------+\n |      | 10|    80|  Alice|\n |      |  5|  null|    Bob|\n |      | 50|  null|    Tom|\n |      | 50|  null|unknown|\n |      +---+------+-------+\n |      \n |      .. versionadded:: 1.3.1\n |  \n |  filter(self, condition)\n |      Filters rows using the given condition.\n |      \n |      :func:`where` is an alias for :func:`filter`.\n |      \n |      :param condition: a :class:`Column` of :class:`types.BooleanType`\n |          or a string of SQL expression.\n |      \n |      >>> df.filter(df.age > 3).collect()\n |      [Row(age=5, name=u'Bob')]\n |      >>> df.where(df.age == 2).collect()\n |      [Row(age=2, name=u'Alice')]\n |      \n |      >>> df.filter(\"age > 3\").collect()\n |      [Row(age=5, name=u'Bob')]\n |      >>> df.where(\"age = 2\").collect()\n |      [Row(age=2, name=u'Alice')]\n |      \n |      .. versionadded:: 1.3\n |  \n |  first(self)\n |      Returns the first row as a :class:`Row`.\n |      \n |      >>> df.first()\n |      Row(age=2, name=u'Alice')\n |      \n |      .. versionadded:: 1.3\n |  \n |  foreach(self, f)\n |      Applies the ``f`` function to all :class:`Row` of this :class:`DataFrame`.\n |      \n |      This is a shorthand for ``df.rdd.foreach()``.\n |      \n |      >>> def f(person):\n |      ...     print(person.name)\n |      >>> df.foreach(f)\n |      \n |      .. versionadded:: 1.3\n |  \n |  foreachPartition(self, f)\n |      Applies the ``f`` function to each partition of this :class:`DataFrame`.\n |      \n |      This a shorthand for ``df.rdd.foreachPartition()``.\n |      \n |      >>> def f(people):\n |      ...     for person in people:\n |      ...         print(person.name)\n |      >>> df.foreachPartition(f)\n |      \n |      .. versionadded:: 1.3\n |  \n |  freqItems(self, cols, support=None)\n |      Finding frequent items for columns, possibly with false positives. Using the\n |      frequent element count algorithm described in\n |      \"http://dx.doi.org/10.1145/762471.762473, proposed by Karp, Schenker, and Papadimitriou\".\n |      :func:`DataFrame.freqItems` and :func:`DataFrameStatFunctions.freqItems` are aliases.\n |      \n |      .. note::  This function is meant for exploratory data analysis, as we make no         guarantee about the backward compatibility of the schema of the resulting DataFrame.\n |      \n |      :param cols: Names of the columns to calculate frequent items for as a list or tuple of\n |          strings.\n |      :param support: The frequency with which to consider an item 'frequent'. Default is 1%.\n |          The support must be greater than 1e-4.\n |      \n |      .. versionadded:: 1.4\n |  \n |  groupBy(self, *cols)\n |      Groups the :class:`DataFrame` using the specified columns,\n |      so we can run aggregation on them. See :class:`GroupedData`\n |      for all the available aggregate functions.\n |      \n |      :func:`groupby` is an alias for :func:`groupBy`.\n |      \n |      :param cols: list of columns to group by.\n |          Each element should be a column name (string) or an expression (:class:`Column`).\n |      \n |      >>> df.groupBy().avg().collect()\n |      [Row(avg(age)=3.5)]\n |      >>> sorted(df.groupBy('name').agg({'age': 'mean'}).collect())\n |      [Row(name=u'Alice', avg(age)=2.0), Row(name=u'Bob', avg(age)=5.0)]\n |      >>> sorted(df.groupBy(df.name).avg().collect())\n |      [Row(name=u'Alice', avg(age)=2.0), Row(name=u'Bob', avg(age)=5.0)]\n |      >>> sorted(df.groupBy(['name', df.age]).count().collect())\n |      [Row(name=u'Alice', age=2, count=1), Row(name=u'Bob', age=5, count=1)]\n |      \n |      .. versionadded:: 1.3\n |  \n |  groupby = groupBy(self, *cols)\n |      :func:`groupby` is an alias for :func:`groupBy`.\n |      \n |      .. versionadded:: 1.4\n |  \n |  head(self, n=None)\n |      Returns the first ``n`` rows.\n |      \n |      Note that this method should only be used if the resulting array is expected\n |      to be small, as all the data is loaded into the driver's memory.\n |      \n |      :param n: int, default 1. Number of rows to return.\n |      :return: If n is greater than 1, return a list of :class:`Row`.\n |          If n is 1, return a single Row.\n |      \n |      >>> df.head()\n |      Row(age=2, name=u'Alice')\n |      >>> df.head(1)\n |      [Row(age=2, name=u'Alice')]\n |      \n |      .. versionadded:: 1.3\n |  \n |  intersect(self, other)\n |      Return a new :class:`DataFrame` containing rows only in\n |      both this frame and another frame.\n |      \n |      This is equivalent to `INTERSECT` in SQL.\n |      \n |      .. versionadded:: 1.3\n |  \n |  isLocal(self)\n |      Returns ``True`` if the :func:`collect` and :func:`take` methods can be run locally\n |      (without any Spark executors).\n |      \n |      .. versionadded:: 1.3\n |  \n |  join(self, other, on=None, how=None)\n |      Joins with another :class:`DataFrame`, using the given join expression.\n |      \n |      :param other: Right side of the join\n |      :param on: a string for the join column name, a list of column names,\n |          a join expression (Column), or a list of Columns.\n |          If `on` is a string or a list of strings indicating the name of the join column(s),\n |          the column(s) must exist on both sides, and this performs an equi-join.\n |      :param how: str, default 'inner'.\n |          One of `inner`, `outer`, `left_outer`, `right_outer`, `leftsemi`.\n |      \n |      The following performs a full outer join between ``df1`` and ``df2``.\n |      \n |      >>> df.join(df2, df.name == df2.name, 'outer').select(df.name, df2.height).collect()\n |      [Row(name=None, height=80), Row(name=u'Bob', height=85), Row(name=u'Alice', height=None)]\n |      \n |      >>> df.join(df2, 'name', 'outer').select('name', 'height').collect()\n |      [Row(name=u'Tom', height=80), Row(name=u'Bob', height=85), Row(name=u'Alice', height=None)]\n |      \n |      >>> cond = [df.name == df3.name, df.age == df3.age]\n |      >>> df.join(df3, cond, 'outer').select(df.name, df3.age).collect()\n |      [Row(name=u'Alice', age=2), Row(name=u'Bob', age=5)]\n |      \n |      >>> df.join(df2, 'name').select(df.name, df2.height).collect()\n |      [Row(name=u'Bob', height=85)]\n |      \n |      >>> df.join(df4, ['name', 'age']).select(df.name, df.age).collect()\n |      [Row(name=u'Bob', age=5)]\n |      \n |      .. versionadded:: 1.3\n |  \n |  limit(self, num)\n |      Limits the result count to the number specified.\n |      \n |      >>> df.limit(1).collect()\n |      [Row(age=2, name=u'Alice')]\n |      >>> df.limit(0).collect()\n |      []\n |      \n |      .. versionadded:: 1.3\n |  \n |  orderBy = sort(self, *cols, **kwargs)\n |  \n |  persist(self, storageLevel=StorageLevel(False, True, False, False, 1))\n |      Sets the storage level to persist its values across operations\n |      after the first time it is computed. This can only be used to assign\n |      a new storage level if the RDD does not have a storage level set yet.\n |      If no storage level is specified defaults to (C{MEMORY_ONLY}).\n |      \n |      .. versionadded:: 1.3\n |  \n |  printSchema(self)\n |      Prints out the schema in the tree format.\n |      \n |      >>> df.printSchema()\n |      root\n |       |-- age: integer (nullable = true)\n |       |-- name: string (nullable = true)\n |      <BLANKLINE>\n |      \n |      .. versionadded:: 1.3\n |  \n |  randomSplit(self, weights, seed=None)\n |      Randomly splits this :class:`DataFrame` with the provided weights.\n |      \n |      :param weights: list of doubles as weights with which to split the DataFrame. Weights will\n |          be normalized if they don't sum up to 1.0.\n |      :param seed: The seed for sampling.\n |      \n |      >>> splits = df4.randomSplit([1.0, 2.0], 24)\n |      >>> splits[0].count()\n |      1\n |      \n |      >>> splits[1].count()\n |      3\n |      \n |      .. versionadded:: 1.4\n |  \n |  registerTempTable(self, name)\n |      Registers this RDD as a temporary table using the given name.\n |      \n |      The lifetime of this temporary table is tied to the :class:`SQLContext`\n |      that was used to create this :class:`DataFrame`.\n |      \n |      >>> df.registerTempTable(\"people\")\n |      >>> df2 = spark.sql(\"select * from people\")\n |      >>> sorted(df.collect()) == sorted(df2.collect())\n |      True\n |      >>> spark.catalog.dropTempView(\"people\")\n |      \n |      .. note:: Deprecated in 2.0, use createOrReplaceTempView instead.\n |      \n |      .. versionadded:: 1.3\n |  \n |  repartition(self, numPartitions, *cols)\n |      Returns a new :class:`DataFrame` partitioned by the given partitioning expressions. The\n |      resulting DataFrame is hash partitioned.\n |      \n |      ``numPartitions`` can be an int to specify the target number of partitions or a Column.\n |      If it is a Column, it will be used as the first partitioning column. If not specified,\n |      the default number of partitions is used.\n |      \n |      .. versionchanged:: 1.6\n |         Added optional arguments to specify the partitioning columns. Also made numPartitions\n |         optional if partitioning columns are specified.\n |      \n |      >>> df.repartition(10).rdd.getNumPartitions()\n |      10\n |      >>> data = df.union(df).repartition(\"age\")\n |      >>> data.show()\n |      +---+-----+\n |      |age| name|\n |      +---+-----+\n |      |  5|  Bob|\n |      |  5|  Bob|\n |      |  2|Alice|\n |      |  2|Alice|\n |      +---+-----+\n |      >>> data = data.repartition(7, \"age\")\n |      >>> data.show()\n |      +---+-----+\n |      |age| name|\n |      +---+-----+\n |      |  5|  Bob|\n |      |  5|  Bob|\n |      |  2|Alice|\n |      |  2|Alice|\n |      +---+-----+\n |      >>> data.rdd.getNumPartitions()\n |      7\n |      >>> data = data.repartition(\"name\", \"age\")\n |      >>> data.show()\n |      +---+-----+\n |      |age| name|\n |      +---+-----+\n |      |  5|  Bob|\n |      |  5|  Bob|\n |      |  2|Alice|\n |      |  2|Alice|\n |      +---+-----+\n |      \n |      .. versionadded:: 1.3\n |  \n |  replace(self, to_replace, value, subset=None)\n |      Returns a new :class:`DataFrame` replacing a value with another value.\n |      :func:`DataFrame.replace` and :func:`DataFrameNaFunctions.replace` are\n |      aliases of each other.\n |      \n |      :param to_replace: int, long, float, string, or list.\n |          Value to be replaced.\n |          If the value is a dict, then `value` is ignored and `to_replace` must be a\n |          mapping from column name (string) to replacement value. The value to be\n |          replaced must be an int, long, float, or string.\n |      :param value: int, long, float, string, or list.\n |          Value to use to replace holes.\n |          The replacement value must be an int, long, float, or string. If `value` is a\n |          list or tuple, `value` should be of the same length with `to_replace`.\n |      :param subset: optional list of column names to consider.\n |          Columns specified in subset that do not have matching data type are ignored.\n |          For example, if `value` is a string, and subset contains a non-string column,\n |          then the non-string column is simply ignored.\n |      \n |      >>> df4.na.replace(10, 20).show()\n |      +----+------+-----+\n |      | age|height| name|\n |      +----+------+-----+\n |      |  20|    80|Alice|\n |      |   5|  null|  Bob|\n |      |null|  null|  Tom|\n |      |null|  null| null|\n |      +----+------+-----+\n |      \n |      >>> df4.na.replace(['Alice', 'Bob'], ['A', 'B'], 'name').show()\n |      +----+------+----+\n |      | age|height|name|\n |      +----+------+----+\n |      |  10|    80|   A|\n |      |   5|  null|   B|\n |      |null|  null| Tom|\n |      |null|  null|null|\n |      +----+------+----+\n |      \n |      .. versionadded:: 1.4\n |  \n |  rollup(self, *cols)\n |      Create a multi-dimensional rollup for the current :class:`DataFrame` using\n |      the specified columns, so we can run aggregation on them.\n |      \n |      >>> df.rollup(\"name\", df.age).count().orderBy(\"name\", \"age\").show()\n |      +-----+----+-----+\n |      | name| age|count|\n |      +-----+----+-----+\n |      | null|null|    2|\n |      |Alice|null|    1|\n |      |Alice|   2|    1|\n |      |  Bob|null|    1|\n |      |  Bob|   5|    1|\n |      +-----+----+-----+\n |      \n |      .. versionadded:: 1.4\n |  \n |  sample(self, withReplacement, fraction, seed=None)\n |      Returns a sampled subset of this :class:`DataFrame`.\n |      \n |      >>> df.sample(False, 0.5, 42).count()\n |      2\n |      \n |      .. versionadded:: 1.3\n |  \n |  sampleBy(self, col, fractions, seed=None)\n |      Returns a stratified sample without replacement based on the\n |      fraction given on each stratum.\n |      \n |      :param col: column that defines strata\n |      :param fractions:\n |          sampling fraction for each stratum. If a stratum is not\n |          specified, we treat its fraction as zero.\n |      :param seed: random seed\n |      :return: a new DataFrame that represents the stratified sample\n |      \n |      >>> from pyspark.sql.functions import col\n |      >>> dataset = sqlContext.range(0, 100).select((col(\"id\") % 3).alias(\"key\"))\n |      >>> sampled = dataset.sampleBy(\"key\", fractions={0: 0.1, 1: 0.2}, seed=0)\n |      >>> sampled.groupBy(\"key\").count().orderBy(\"key\").show()\n |      +---+-----+\n |      |key|count|\n |      +---+-----+\n |      |  0|    5|\n |      |  1|    9|\n |      +---+-----+\n |      \n |      .. versionadded:: 1.5\n |  \n |  select(self, *cols)\n |      Projects a set of expressions and returns a new :class:`DataFrame`.\n |      \n |      :param cols: list of column names (string) or expressions (:class:`Column`).\n |          If one of the column names is '*', that column is expanded to include all columns\n |          in the current DataFrame.\n |      \n |      >>> df.select('*').collect()\n |      [Row(age=2, name=u'Alice'), Row(age=5, name=u'Bob')]\n |      >>> df.select('name', 'age').collect()\n |      [Row(name=u'Alice', age=2), Row(name=u'Bob', age=5)]\n |      >>> df.select(df.name, (df.age + 10).alias('age')).collect()\n |      [Row(name=u'Alice', age=12), Row(name=u'Bob', age=15)]\n |      \n |      .. versionadded:: 1.3\n |  \n |  selectExpr(self, *expr)\n |      Projects a set of SQL expressions and returns a new :class:`DataFrame`.\n |      \n |      This is a variant of :func:`select` that accepts SQL expressions.\n |      \n |      >>> df.selectExpr(\"age * 2\", \"abs(age)\").collect()\n |      [Row((age * 2)=4, abs(age)=2), Row((age * 2)=10, abs(age)=5)]\n |      \n |      .. versionadded:: 1.3\n |  \n |  show(self, n=20, truncate=True)\n |      Prints the first ``n`` rows to the console.\n |      \n |      :param n: Number of rows to show.\n |      :param truncate: Whether truncate long strings and align cells right.\n |      \n |      >>> df\n |      DataFrame[age: int, name: string]\n |      >>> df.show()\n |      +---+-----+\n |      |age| name|\n |      +---+-----+\n |      |  2|Alice|\n |      |  5|  Bob|\n |      +---+-----+\n |      \n |      .. versionadded:: 1.3\n |  \n |  sort(self, *cols, **kwargs)\n |      Returns a new :class:`DataFrame` sorted by the specified column(s).\n |      \n |      :param cols: list of :class:`Column` or column names to sort by.\n |      :param ascending: boolean or list of boolean (default True).\n |          Sort ascending vs. descending. Specify list for multiple sort orders.\n |          If a list is specified, length of the list must equal length of the `cols`.\n |      \n |      >>> df.sort(df.age.desc()).collect()\n |      [Row(age=5, name=u'Bob'), Row(age=2, name=u'Alice')]\n |      >>> df.sort(\"age\", ascending=False).collect()\n |      [Row(age=5, name=u'Bob'), Row(age=2, name=u'Alice')]\n |      >>> df.orderBy(df.age.desc()).collect()\n |      [Row(age=5, name=u'Bob'), Row(age=2, name=u'Alice')]\n |      >>> from pyspark.sql.functions import *\n |      >>> df.sort(asc(\"age\")).collect()\n |      [Row(age=2, name=u'Alice'), Row(age=5, name=u'Bob')]\n |      >>> df.orderBy(desc(\"age\"), \"name\").collect()\n |      [Row(age=5, name=u'Bob'), Row(age=2, name=u'Alice')]\n |      >>> df.orderBy([\"age\", \"name\"], ascending=[0, 1]).collect()\n |      [Row(age=5, name=u'Bob'), Row(age=2, name=u'Alice')]\n |      \n |      .. versionadded:: 1.3\n |  \n |  sortWithinPartitions(self, *cols, **kwargs)\n |      Returns a new :class:`DataFrame` with each partition sorted by the specified column(s).\n |      \n |      :param cols: list of :class:`Column` or column names to sort by.\n |      :param ascending: boolean or list of boolean (default True).\n |          Sort ascending vs. descending. Specify list for multiple sort orders.\n |          If a list is specified, length of the list must equal length of the `cols`.\n |      \n |      >>> df.sortWithinPartitions(\"age\", ascending=False).show()\n |      +---+-----+\n |      |age| name|\n |      +---+-----+\n |      |  2|Alice|\n |      |  5|  Bob|\n |      +---+-----+\n |      \n |      .. versionadded:: 1.6\n |  \n |  subtract(self, other)\n |      Return a new :class:`DataFrame` containing rows in this frame\n |      but not in another frame.\n |      \n |      This is equivalent to `EXCEPT` in SQL.\n |      \n |      .. versionadded:: 1.3\n |  \n |  take(self, num)\n |      Returns the first ``num`` rows as a :class:`list` of :class:`Row`.\n |      \n |      >>> df.take(2)\n |      [Row(age=2, name=u'Alice'), Row(age=5, name=u'Bob')]\n |      \n |      .. versionadded:: 1.3\n |  \n |  toDF(self, *cols)\n |      Returns a new class:`DataFrame` that with new specified column names\n |      \n |      :param cols: list of new column names (string)\n |      \n |      >>> df.toDF('f1', 'f2').collect()\n |      [Row(f1=2, f2=u'Alice'), Row(f1=5, f2=u'Bob')]\n |  \n |  toJSON(self, use_unicode=True)\n |      Converts a :class:`DataFrame` into a :class:`RDD` of string.\n |      \n |      Each row is turned into a JSON document as one element in the returned RDD.\n |      \n |      >>> df.toJSON().first()\n |      u'{\"age\":2,\"name\":\"Alice\"}'\n |      \n |      .. versionadded:: 1.3\n |  \n |  toLocalIterator(self)\n |      Returns an iterator that contains all of the rows in this :class:`DataFrame`.\n |      The iterator will consume as much memory as the largest partition in this DataFrame.\n |      \n |      >>> list(df.toLocalIterator())\n |      [Row(age=2, name=u'Alice'), Row(age=5, name=u'Bob')]\n |      \n |      .. versionadded:: 2.0\n |  \n |  toPandas(self)\n |      Returns the contents of this :class:`DataFrame` as Pandas ``pandas.DataFrame``.\n |      \n |      Note that this method should only be used if the resulting Pandas's DataFrame is expected\n |      to be small, as all the data is loaded into the driver's memory.\n |      \n |      This is only available if Pandas is installed and available.\n |      \n |      >>> df.toPandas()  # doctest: +SKIP\n |         age   name\n |      0    2  Alice\n |      1    5    Bob\n |      \n |      .. versionadded:: 1.3\n |  \n |  union(self, other)\n |      Return a new :class:`DataFrame` containing union of rows in this\n |      frame and another frame.\n |      \n |      This is equivalent to `UNION ALL` in SQL. To do a SQL-style set union\n |      (that does deduplication of elements), use this function followed by a distinct.\n |      \n |      .. versionadded:: 2.0\n |  \n |  unionAll(self, other)\n |      Return a new :class:`DataFrame` containing union of rows in this\n |      frame and another frame.\n |      \n |      .. note:: Deprecated in 2.0, use union instead.\n |      \n |      .. versionadded:: 1.3\n |  \n |  unpersist(self, blocking=False)\n |      Marks the :class:`DataFrame` as non-persistent, and remove all blocks for it from\n |      memory and disk.\n |      \n |      .. note:: `blocking` default has changed to False to match Scala in 2.0.\n |      \n |      .. versionadded:: 1.3\n |  \n |  where = filter(self, condition)\n |      :func:`where` is an alias for :func:`filter`.\n |      \n |      .. versionadded:: 1.3\n |  \n |  withColumn(self, colName, col)\n |      Returns a new :class:`DataFrame` by adding a column or replacing the\n |      existing column that has the same name.\n |      \n |      :param colName: string, name of the new column.\n |      :param col: a :class:`Column` expression for the new column.\n |      \n |      >>> df.withColumn('age2', df.age + 2).collect()\n |      [Row(age=2, name=u'Alice', age2=4), Row(age=5, name=u'Bob', age2=7)]\n |      \n |      .. versionadded:: 1.3\n |  \n |  withColumnRenamed(self, existing, new)\n |      Returns a new :class:`DataFrame` by renaming an existing column.\n |      This is a no-op if schema doesn't contain the given column name.\n |      \n |      :param existing: string, name of the existing column to rename.\n |      :param col: string, new name of the column.\n |      \n |      >>> df.withColumnRenamed('age', 'age2').collect()\n |      [Row(age2=2, name=u'Alice'), Row(age2=5, name=u'Bob')]\n |      \n |      .. versionadded:: 1.3\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  columns\n |      Returns all column names as a list.\n |      \n |      >>> df.columns\n |      ['age', 'name']\n |      \n |      .. versionadded:: 1.3\n |  \n |  dtypes\n |      Returns all column names and their data types as a list.\n |      \n |      >>> df.dtypes\n |      [('age', 'int'), ('name', 'string')]\n |      \n |      .. versionadded:: 1.3\n |  \n |  isStreaming\n |      Returns true if this :class:`Dataset` contains one or more sources that continuously\n |      return data as it arrives. A :class:`Dataset` that reads data from a streaming source\n |      must be executed as a :class:`StreamingQuery` using the :func:`start` method in\n |      :class:`DataStreamWriter`.  Methods that return a single answer, (e.g., :func:`count` or\n |      :func:`collect`) will throw an :class:`AnalysisException` when there is a streaming\n |      source present.\n |      \n |      .. note:: Experimental\n |      \n |      .. versionadded:: 2.0\n |  \n |  na\n |      Returns a :class:`DataFrameNaFunctions` for handling missing values.\n |      \n |      .. versionadded:: 1.3.1\n |  \n |  rdd\n |      Returns the content as an :class:`pyspark.RDD` of :class:`Row`.\n |      \n |      .. versionadded:: 1.3\n |  \n |  schema\n |      Returns the schema of this :class:`DataFrame` as a :class:`pyspark.sql.types.StructType`.\n |      \n |      >>> df.schema\n |      StructType(List(StructField(age,IntegerType,true),StructField(name,StringType,true)))\n |      \n |      .. versionadded:: 1.3\n |  \n |  stat\n |      Returns a :class:`DataFrameStatFunctions` for statistic functions.\n |      \n |      .. versionadded:: 1.4\n |  \n |  write\n |      Interface for saving the content of the non-streaming :class:`DataFrame` out into external\n |      storage.\n |      \n |      :return: :class:`DataFrameWriter`\n |      \n |      .. versionadded:: 1.4\n |  \n |  writeStream\n |      Interface for saving the content of the streaming :class:`DataFrame` out into external\n |      storage.\n |      \n |      .. note:: Experimental.\n |      \n |      :return: :class:`DataStreamWriter`\n |      \n |      .. versionadded:: 2.0\n\n"}]},"apps":[],"jobName":"paragraph_1533562513624_713868894","id":"20180709-151226_454386823","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:07:46-0500","dateFinished":"2018-08-08T10:07:46-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:90"},{"text":"%md\nPodemos visualizar el número de particiones que contiene nuestro DataFrame usando `getNumPartitions()`:\n","user":"hduser","dateUpdated":"2018-08-06T08:36:03-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Podemos visualizar el número de particiones que contiene nuestro DataFrame usando <code>getNumPartitions()</code>:</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513625_713484145","id":"20180709-151140_741948350","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:03-0500","dateFinished":"2018-08-06T08:36:03-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:91"},{"text":"%pyspark\ndataDF.rdd.getNumPartitions()","user":"hduser","dateUpdated":"2018-08-08T10:07:51-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"60\n"}]},"apps":[],"jobName":"paragraph_1533562513626_714638392","id":"20180709-151137_39727695","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:07:51-0500","dateFinished":"2018-08-08T10:07:51-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:92"},{"text":"%md\n**Ejecución pasiva de DataFrames en SparkSQL**\n\nCuando utilizas DataFrames o SparkSQL, las transformaciones aplicadas crean un plan de trabajo. Este plan de trabajo solamente se lleva a cabo cuando aplicas una acción.\nLa evaluación pasiva permite a Spark optimizar el plan de trabajo generado, convertirlo a operaciones de RDDs y finalmente ser ejecutado de forma eficiente por los nodos del clúster.\n","user":"hduser","dateUpdated":"2018-08-06T08:36:03-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p><strong>Ejecución pasiva de DataFrames en SparkSQL</strong></p>\n<p>Cuando utilizas DataFrames o SparkSQL, las transformaciones aplicadas crean un plan de trabajo. Este plan de trabajo solamente se lleva a cabo cuando aplicas una acción.\n<br  />La evaluación pasiva permite a Spark optimizar el plan de trabajo generado, convertirlo a operaciones de RDDs y finalmente ser ejecutado de forma eficiente por los nodos del clúster.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513627_714253643","id":"20180709-145902_2111230260","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:03-0500","dateFinished":"2018-08-06T08:36:03-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93"},{"text":"%md\nPuedes visualizar el plan de trabajo generado por Spark usando el método `explain()`.","user":"hduser","dateUpdated":"2018-08-06T08:36:03-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Puedes visualizar el plan de trabajo generado por Spark usando el método <code>explain()</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513627_714253643","id":"20180709-150510_1532903342","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:03-0500","dateFinished":"2018-08-06T08:36:03-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:94"},{"text":"%pyspark\nnewDF = dataDF.distinct().select('*')\nnewDF.explain(True)","user":"hduser","dateUpdated":"2018-08-08T10:07:54-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Parsed Logical Plan ==\n'Project [*]\n+- Aggregate [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L], [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L]\n   +- LogicalRDD [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L]\n\n== Analyzed Logical Plan ==\napellido: string, nombre: string, nss: string, ocupacion: string, edad: bigint\nProject [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L]\n+- Aggregate [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L], [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L]\n   +- LogicalRDD [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L]\n\n== Optimized Logical Plan ==\nAggregate [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L], [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L]\n+- LogicalRDD [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L]\n\n== Physical Plan ==\n*HashAggregate(keys=[apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L], functions=[], output=[apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L])\n+- Exchange hashpartitioning(apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L, 200)\n   +- *HashAggregate(keys=[apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L], functions=[], output=[apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L])\n      +- Scan ExistingRDD[apellido#0,nombre#1,nss#2,ocupacion#3,edad#4L]\n"}]},"apps":[],"jobName":"paragraph_1533562513628_712329899","id":"20180709-145449_232999730","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:07:54-0500","dateFinished":"2018-08-08T10:07:54-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:95"},{"text":"%md\n### Restando usando *select*\n\nPodemos aplicar operaciones a nuestro conjunto de datos. Muchas operaciones pueden ser especificadas como \"aplicar una misma operación a cada elemento del conjunto de datos\". Esta clase de operaciones son fácilmente paralelizables, ya que cada elemento del conjunto de datos puede ser procesado de manera independiente (la opereción en una entrada no afecta a operaciones en otras entradas). Spark permite paralelizar esta clase de operaciones.\n\nUna operación común en DataFrames es la transformación `select()`, ésta trabaja de manera similar a la operación 'SELECT' de SQL.\n\n`select()`, al ser una transformación, regresará un plan de trabajo para generar un nuevo DataFrame. El plan de trabajo se ejecutará hasta que apliquemos una acción.","user":"hduser","dateUpdated":"2018-08-06T08:36:03-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Restando usando <em>select</em></h3>\n<p>Podemos aplicar operaciones a nuestro conjunto de datos. Muchas operaciones pueden ser especificadas como &ldquo;aplicar una misma operación a cada elemento del conjunto de datos&rdquo;. Esta clase de operaciones son fácilmente paralelizables, ya que cada elemento del conjunto de datos puede ser procesado de manera independiente (la opereción en una entrada no afecta a operaciones en otras entradas). Spark permite paralelizar esta clase de operaciones.</p>\n<p>Una operación común en DataFrames es la transformación <code>select()</code>, ésta trabaja de manera similar a la operación 'SELECT' de SQL.</p>\n<p><code>select()</code>, al ser una transformación, regresará un plan de trabajo para generar un nuevo DataFrame. El plan de trabajo se ejecutará hasta que apliquemos una acción.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513629_711945150","id":"20180709-151001_1900368947","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:04-0500","dateFinished":"2018-08-06T08:36:04-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:96"},{"text":"%pyspark\n# Transformar dataDF usando select para restar 1 a la columna edad\n# select() es una transformacion, no pasara nada al correr esta celda\nsubDF = dataDF.select('apellido', 'nombre', 'nss', 'ocupacion', (dataDF.edad - 1).alias('edad'))","user":"hduser","dateUpdated":"2018-08-08T10:08:00-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1533562513630_713099397","id":"20180709-150632_1668055091","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:08:00-0500","dateFinished":"2018-08-08T10:08:00-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:97"},{"text":"%md\nObservemos el plan de trabajo generado:","user":"hduser","dateUpdated":"2018-08-06T08:36:04-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Observemos el plan de trabajo generado:</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513630_713099397","id":"20180709-152217_2110056357","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:04-0500","dateFinished":"2018-08-06T08:36:04-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:98"},{"text":"%pyspark\nsubDF.explain(True)","user":"hduser","dateUpdated":"2018-08-08T10:08:04-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"== Parsed Logical Plan ==\n'Project [unresolvedalias('apellido, None), unresolvedalias('nombre, None), unresolvedalias('nss, None), unresolvedalias('ocupacion, None), (edad#4L - 1) AS edad#18]\n+- LogicalRDD [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L]\n\n== Analyzed Logical Plan ==\napellido: string, nombre: string, nss: string, ocupacion: string, edad: bigint\nProject [apellido#0, nombre#1, nss#2, ocupacion#3, (edad#4L - cast(1 as bigint)) AS edad#18L]\n+- LogicalRDD [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L]\n\n== Optimized Logical Plan ==\nProject [apellido#0, nombre#1, nss#2, ocupacion#3, (edad#4L - 1) AS edad#18L]\n+- LogicalRDD [apellido#0, nombre#1, nss#2, ocupacion#3, edad#4L]\n\n== Physical Plan ==\n*Project [apellido#0, nombre#1, nss#2, ocupacion#3, (edad#4L - 1) AS edad#18L]\n+- Scan ExistingRDD[apellido#0,nombre#1,nss#2,ocupacion#3,edad#4L]\n"}]},"apps":[],"jobName":"paragraph_1533562513631_712714648","id":"20180709-152206_663961424","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:08:04-0500","dateFinished":"2018-08-08T10:08:04-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:99"},{"text":"%md\n### Usando *collect* para visualizar resultados\n\nPara visualizar una lista de los elementos de nuestro conjunto de datos, podemos utilizar la acción `collect()` en nuestro DataFrame. La operación `collect()` regresará todos los elementos del DataFrame al nodo Driver, por lo que solo debe ser utilizada cuando se sabe que éstos caben en la memoria del nodo. Si la memoria no es suficiente, el nodo fallará por falta de memoria.\n\n`collect()`, al ser una acción, causará que el plan de trabajo generado se ejecute.","user":"hduser","dateUpdated":"2018-08-06T08:36:04-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Usando <em>collect</em> para visualizar resultados</h3>\n<p>Para visualizar una lista de los elementos de nuestro conjunto de datos, podemos utilizar la acción <code>collect()</code> en nuestro DataFrame. La operación <code>collect()</code> regresará todos los elementos del DataFrame al nodo Driver, por lo que solo debe ser utilizada cuando se sabe que éstos caben en la memoria del nodo. Si la memoria no es suficiente, el nodo fallará por falta de memoria.</p>\n<p><code>collect()</code>, al ser una acción, causará que el plan de trabajo generado se ejecute.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513632_698478938","id":"20180709-152234_483484824","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:04-0500","dateFinished":"2018-08-06T08:36:04-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:100"},{"text":"%pyspark\n# Recolectar los datos al nodo Driver usando collect\nresults = subDF.collect()\nprint (results[:100])","user":"hduser","dateUpdated":"2018-08-08T10:08:13-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[Row(apellido=u'Correa', nombre=u'Gerardo', nss=u'058-18-3654', ocupacion=u'Systems analyst', edad=46), Row(apellido=u'Carre\\xf3n', nombre=u'Alejandro', nss=u'262-60-4012', ocupacion=u'Theatre stage manager', edad=27), Row(apellido=u'Vald\\xe9s', nombre=u'HermelindaHern\\xe1n', nss=u'103-16-2343', ocupacion=u'Social research officer, government', edad=36), Row(apellido=u'Mu\\xf1iz', nombre=u'Pilar', nss=u'505-44-2197', ocupacion=u'Midwife', edad=39), Row(apellido=u'Collado', nombre=u'Pablo', nss=u'382-11-7793', ocupacion=u'Designer, multimedia', edad=39), Row(apellido=u'Fr\\xedas', nombre=u'Mayte', nss=u'659-40-4529', ocupacion=u'Exhibitions officer, museum/gallery', edad=17), Row(apellido=u'Jaime', nombre=u'Antonia', nss=u'810-97-0959', ocupacion=u'Barista', edad=0), Row(apellido=u'Oliv\\xe1rez', nombre=u'Alta  Gracia', nss=u'182-27-5288', ocupacion=u'Amenity horticulturist', edad=22), Row(apellido=u'Franco', nombre=u'Ang\\xe9lica', nss=u'172-92-5397', ocupacion=u'Retail banker', edad=44), Row(apellido=u'Sauceda', nombre=u'Nadia', nss=u'787-80-4216', ocupacion=u'Secretary/administrator', edad=10), Row(apellido=u'Molina', nombre=u'Camila', nss=u'731-90-2815', ocupacion=u'Theatre director', edad=37), Row(apellido=u'Botello', nombre=u'Itzel', nss=u'752-30-6554', ocupacion=u'Orthoptist', edad=46), Row(apellido=u'Fierro', nombre=u'Esteban', nss=u'194-03-8285', ocupacion=u'Forensic scientist', edad=36), Row(apellido=u'Olivera', nombre=u'Armando', nss=u'041-23-3263', ocupacion=u'Broadcast presenter', edad=24), Row(apellido=u'Guevara', nombre=u'Abigail', nss=u'203-80-6159', ocupacion=u'Building services engineer', edad=45), Row(apellido=u'Barajas', nombre=u'Anabel', nss=u'264-73-2981', ocupacion=u'Research officer, government', edad=27), Row(apellido=u'Bustos', nombre=u'Mart\\xedn', nss=u'846-70-9284', ocupacion=u'Astronomer', edad=2), Row(apellido=u'Sauceda', nombre=u'Sandra', nss=u'610-96-7803', ocupacion=u'Runner, broadcasting/film/video', edad=45), Row(apellido=u'Tijerina', nombre=u'Blanca', nss=u'644-32-7297', ocupacion=u'IT sales professional', edad=32), Row(apellido=u'Orozco', nombre=u'Eduardo', nss=u'009-56-7562', ocupacion=u'Estate manager/land agent', edad=34), Row(apellido=u'Arriaga', nombre=u'Graciela', nss=u'056-60-8511', ocupacion=u'Statistician', edad=37), Row(apellido=u'Soto', nombre=u'Socorro', nss=u'363-94-7993', ocupacion=u'Administrator, education', edad=42), Row(apellido=u'Ord\\xf3\\xf1ez', nombre=u'Carla', nss=u'040-43-3935', ocupacion=u'Lighting technician, broadcasting/film/video', edad=26), Row(apellido=u'Rodr\\xedquez', nombre=u'Carla', nss=u'192-53-8187', ocupacion=u'Health and safety inspector', edad=44), Row(apellido=u'Curiel', nombre=u'Ren\\xe9', nss=u'630-93-7112', ocupacion=u'Sports therapist', edad=47), Row(apellido=u'Trujillo', nombre=u'Natividad', nss=u'403-06-8972', ocupacion=u'Garment/textile technologist', edad=6), Row(apellido=u'Concepci\\xf3n', nombre=u'Mar\\xeda', nss=u'853-30-5167', ocupacion=u'Surveyor, mining', edad=47), Row(apellido=u'Rold\\xe1n', nombre=u'Tom\\xe1s', nss=u'443-69-1547', ocupacion=u'Secretary, company', edad=34), Row(apellido=u'Rivera', nombre=u'Asunci\\xf3n', nss=u'551-46-6107', ocupacion=u'Planning and development surveyor', edad=11), Row(apellido=u'Vigil', nombre=u'Andrea', nss=u'695-93-4517', ocupacion=u'Communications engineer', edad=36), Row(apellido=u'Lozano', nombre=u'Mauricio', nss=u'721-19-1341', ocupacion=u'Journalist, newspaper', edad=8), Row(apellido=u'Batista', nombre=u'Margarita', nss=u'227-26-5019', ocupacion=u'Psychologist, prison and probation services', edad=21), Row(apellido=u'Camarillo', nombre=u'Miguel', nss=u'460-53-9861', ocupacion=u'Psychologist, forensic', edad=29), Row(apellido=u'Olivera', nombre=u'Salma', nss=u'324-54-3965', ocupacion=u'Geneticist, molecular', edad=0), Row(apellido=u'Ram\\xf3n', nombre=u'Catalina', nss=u'418-61-5464', ocupacion=u'Programmer, applications', edad=33), Row(apellido=u'Estrada', nombre=u'Eduardo', nss=u'507-10-0419', ocupacion=u'Cabin crew', edad=26), Row(apellido=u'Caraballo', nombre=u'Reina', nss=u'621-23-3079', ocupacion=u'Operational investment banker', edad=46), Row(apellido=u'de Jes\\xfas', nombre=u'Mitzy', nss=u'155-76-0838', ocupacion=u'Environmental health practitioner', edad=47), Row(apellido=u'D\\xe1vila', nombre=u'Mar\\xeda Eugenia', nss=u'848-18-6745', ocupacion=u'Database administrator', edad=6), Row(apellido=u'Guevara', nombre=u'Emilio', nss=u'824-11-7415', ocupacion=u'Industrial buyer', edad=44), Row(apellido=u'Vanegas', nombre=u'Gilberto', nss=u'516-10-2457', ocupacion=u'Contractor', edad=11), Row(apellido=u'Narv\\xe1ez', nombre=u'Abelardo', nss=u'343-80-6261', ocupacion=u'Ceramics designer', edad=13), Row(apellido=u'Urrutia', nombre=u'Judith', nss=u'647-78-9963', ocupacion=u'Catering manager', edad=36), Row(apellido=u'Segura', nombre=u'Ana Luisa', nss=u'363-83-5358', ocupacion=u'Horticultural consultant', edad=8), Row(apellido=u'Vargas', nombre=u'Modesto', nss=u'823-43-5986', ocupacion=u'Horticulturist, amenity', edad=36), Row(apellido=u'Arguello', nombre=u'Jos\\xe9 Eduardo', nss=u'416-69-0271', ocupacion=u'Financial planner', edad=35), Row(apellido=u'Gonzales', nombre=u'Carlota', nss=u'472-69-2503', ocupacion=u'Educational psychologist', edad=38), Row(apellido=u'Gaona', nombre=u'Ignacio', nss=u'421-99-1614', ocupacion=u'Community arts worker', edad=9), Row(apellido=u'Osorio', nombre=u'Esteban', nss=u'054-40-5322', ocupacion=u'Barista', edad=1), Row(apellido=u'Barraza', nombre=u'Anel', nss=u'113-64-0675', ocupacion=u'Scientist, product/process development', edad=43), Row(apellido=u'Escamilla', nombre=u'Delia', nss=u'345-72-1769', ocupacion=u'Chartered loss adjuster', edad=41), Row(apellido=u'Verduzco', nombre=u'Ra\\xfal', nss=u'367-70-9003', ocupacion=u'Radio broadcast assistant', edad=16), Row(apellido=u'Almaraz', nombre=u'Aida', nss=u'494-58-8536', ocupacion=u'Higher education lecturer', edad=4), Row(apellido=u'Vanegas', nombre=u'Enrique', nss=u'884-57-1945', ocupacion=u'Historic buildings inspector/conservation officer', edad=10), Row(apellido=u'Cadena', nombre=u'Aida', nss=u'262-24-1032', ocupacion=u'Engineer, petroleum', edad=47), Row(apellido=u'Ch\\xe1vez', nombre=u'Josefina', nss=u'355-87-5032', ocupacion=u'Horticulturist, commercial', edad=18), Row(apellido=u'Guardado', nombre=u'Alicia', nss=u'482-65-9527', ocupacion=u'Building services engineer', edad=18), Row(apellido=u'Balderas', nombre=u'Esperanza', nss=u'237-01-0002', ocupacion=u'Retail merchandiser', edad=29), Row(apellido=u'Valencia', nombre=u'Cristobal', nss=u'655-24-4124', ocupacion=u'Public house manager', edad=16), Row(apellido=u'Lozada', nombre=u'M\\xf3nica', nss=u'369-75-2259', ocupacion=u'Community education officer', edad=23), Row(apellido=u'Gil', nombre=u'Claudio', nss=u'340-54-3457', ocupacion=u'Learning disability nurse', edad=37), Row(apellido=u'Pichardo', nombre=u'Indira', nss=u'417-02-3711', ocupacion=u'TEFL teacher', edad=37), Row(apellido=u'Hernandes', nombre=u'Javier', nss=u'658-23-5755', ocupacion=u'Probation officer', edad=16), Row(apellido=u'Rubio', nombre=u'C\\xe9sar', nss=u'240-67-4794', ocupacion=u'Designer, graphic', edad=3), Row(apellido=u'Canales', nombre=u'Ruby', nss=u'319-20-7301', ocupacion=u'Administrator, sports', edad=40), Row(apellido=u'Ben\\xedtez', nombre=u'Citlali', nss=u'461-99-5390', ocupacion=u'Exhibitions officer, museum/gallery', edad=14), Row(apellido=u'Pantoja', nombre=u'Clara', nss=u'520-18-6071', ocupacion=u'Health and safety inspector', edad=23), Row(apellido=u'Chac\\xf3n', nombre=u'Ana Mar\\xeda', nss=u'893-58-8021', ocupacion=u'Financial adviser', edad=25), Row(apellido=u'Roque', nombre=u'Benito', nss=u'651-71-9847', ocupacion=u'Health and safety adviser', edad=31), Row(apellido=u'Haro', nombre=u'Karla', nss=u'461-60-8712', ocupacion=u'Cartographer', edad=44), Row(apellido=u'Gallegos', nombre=u'Eloy', nss=u'205-43-9487', ocupacion=u'Exhibitions officer, museum/gallery', edad=34), Row(apellido=u'V\\xe1squez', nombre=u'Armando', nss=u'209-27-9609', ocupacion=u'Surveyor, building control', edad=1), Row(apellido=u'Matos', nombre=u'Mariano', nss=u'646-25-7018', ocupacion=u'Network engineer', edad=33), Row(apellido=u'Mayorga', nombre=u'Frida', nss=u'071-77-0364', ocupacion=u'Psychologist, counselling', edad=41), Row(apellido=u'Alc\\xe1ntar', nombre=u'Maximiliano', nss=u'727-68-2970', ocupacion=u'Sports therapist', edad=17), Row(apellido=u'Alvarez', nombre=u'Mario', nss=u'685-37-7370', ocupacion=u'Tourism officer', edad=39), Row(apellido=u'de la Fuente', nombre=u'Mar\\xeda Teresa', nss=u'875-29-6911', ocupacion=u'Multimedia programmer', edad=41), Row(apellido=u'Madrigal', nombre=u'Zeferino', nss=u'091-02-2217', ocupacion=u'Geologist, wellsite', edad=24), Row(apellido=u'Montoya', nombre=u'Silvano', nss=u'573-46-6402', ocupacion=u'Telecommunications researcher', edad=21), Row(apellido=u'Pantoja', nombre=u'Noelia', nss=u'508-92-5295', ocupacion=u'Food technologist', edad=12), Row(apellido=u'Cant\\xfa', nombre=u'Nicol\\xe1s', nss=u'610-35-2838', ocupacion=u'Heritage manager', edad=31), Row(apellido=u'Maya', nombre=u'Eugenia', nss=u'027-41-1079', ocupacion=u'Herpetologist', edad=32), Row(apellido=u'Ju\\xe1rez', nombre=u'Samuel', nss=u'004-41-3243', ocupacion=u'Accommodation manager', edad=16), Row(apellido=u'D\\xedaz', nombre=u'H\\xe9ctor', nss=u'067-72-7228', ocupacion=u'Surveyor, building control', edad=14), Row(apellido=u'Sanabria', nombre=u'Esteban', nss=u'851-94-4266', ocupacion=u'Engineer, petroleum', edad=25), Row(apellido=u'Medina', nombre=u'Clara', nss=u'318-06-8811', ocupacion=u'Textile designer', edad=26), Row(apellido=u'Cab\\xe1n', nombre=u'Cynthia', nss=u'612-26-5209', ocupacion=u'Meteorologist', edad=44), Row(apellido=u'Gamboa', nombre=u'Patricio', nss=u'270-44-8635', ocupacion=u'Biomedical engineer', edad=34), Row(apellido=u'Casanova', nombre=u'Bernardo', nss=u'171-53-1766', ocupacion=u'Surveyor, mining', edad=6), Row(apellido=u'Ortiz', nombre=u'Eric', nss=u'525-50-8638', ocupacion=u'Software engineer', edad=44), Row(apellido=u'Malave', nombre=u'Linda', nss=u'714-87-5335', ocupacion=u'Medical physicist', edad=11), Row(apellido=u'Alarc\\xf3n', nombre=u'Carolina', nss=u'843-05-6322', ocupacion=u'Operational researcher', edad=37), Row(apellido=u'Robles', nombre=u'Agust\\xedn', nss=u'333-67-7289', ocupacion=u'Commercial/residential surveyor', edad=1), Row(apellido=u'Casta\\xf1eda', nombre=u'Gabriel', nss=u'076-01-2168', ocupacion=u'Engineer, automotive', edad=21), Row(apellido=u'Camacho', nombre=u'Francisca', nss=u'873-85-4598', ocupacion=u'Scientist, audiological', edad=42), Row(apellido=u'Fern\\xe1ndez', nombre=u'Violeta', nss=u'053-93-8268', ocupacion=u'Herbalist', edad=15), Row(apellido=u'Valladares', nombre=u'Gabriela', nss=u'736-05-9994', ocupacion=u'Multimedia programmer', edad=22), Row(apellido=u'Guevara', nombre=u'Antonio', nss=u'332-57-2134', ocupacion=u'Sound technician, broadcasting/film/video', edad=22), Row(apellido=u'Lerma', nombre=u'Zeferino', nss=u'374-87-4372', ocupacion=u'Editor, film/video', edad=18), Row(apellido=u'Ceja', nombre=u'Bernardo', nss=u'785-92-3226', ocupacion=u'Administrator, Civil Service', edad=8)]\n"}]},"apps":[],"jobName":"paragraph_1533562513633_698094189","id":"20180709-152912_697791879","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:08:13-0500","dateFinished":"2018-08-08T10:08:30-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:101"},{"text":"%md\nUna mejor manera de visualizar los resultados es usar el método `show()`, éste limita el número de registros que se regresan al nodo driver, por defecto solo se mostrarán 20 registros.\n","user":"hduser","dateUpdated":"2018-08-06T08:36:04-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Una mejor manera de visualizar los resultados es usar el método <code>show()</code>, éste limita el número de registros que se regresan al nodo driver, por defecto solo se mostrarán 20 registros.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513633_698094189","id":"20180709-152939_1485422681","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:04-0500","dateFinished":"2018-08-06T08:36:04-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:102"},{"text":"%pyspark\nsubDF.show()","user":"hduser","dateUpdated":"2018-08-08T10:08:36-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----------------+-----------+--------------------+----+\n|apellido|          nombre|        nss|           ocupacion|edad|\n+--------+----------------+-----------+--------------------+----+\n|  Correa|         Gerardo|058-18-3654|     Systems analyst|  46|\n| Carreón|       Alejandro|262-60-4012|Theatre stage man...|  27|\n|  Valdés|HermelindaHernán|103-16-2343|Social research o...|  36|\n|   Muñiz|           Pilar|505-44-2197|             Midwife|  39|\n| Collado|           Pablo|382-11-7793|Designer, multimedia|  39|\n|   Frías|           Mayte|659-40-4529|Exhibitions offic...|  17|\n|   Jaime|         Antonia|810-97-0959|             Barista|   0|\n|Olivárez|    Alta  Gracia|182-27-5288|Amenity horticult...|  22|\n|  Franco|        Angélica|172-92-5397|       Retail banker|  44|\n| Sauceda|           Nadia|787-80-4216|Secretary/adminis...|  10|\n|  Molina|          Camila|731-90-2815|    Theatre director|  37|\n| Botello|           Itzel|752-30-6554|          Orthoptist|  46|\n|  Fierro|         Esteban|194-03-8285|  Forensic scientist|  36|\n| Olivera|         Armando|041-23-3263| Broadcast presenter|  24|\n| Guevara|         Abigail|203-80-6159|Building services...|  45|\n| Barajas|          Anabel|264-73-2981|Research officer,...|  27|\n|  Bustos|          Martín|846-70-9284|          Astronomer|   2|\n| Sauceda|          Sandra|610-96-7803|Runner, broadcast...|  45|\n|Tijerina|          Blanca|644-32-7297|IT sales professi...|  32|\n|  Orozco|         Eduardo|009-56-7562|Estate manager/la...|  34|\n+--------+----------------+-----------+--------------------+----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1533562513634_699248436","id":"20180709-153144_1359610915","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:08:36-0500","dateFinished":"2018-08-08T10:08:36-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:103"},{"text":"%md\n`show()` pueder recibir parámetos adicionales, por ejemplo el número de registros para mostrar y si deseas truncar la salida.","user":"hduser","dateUpdated":"2018-08-06T08:36:05-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p><code>show()</code> pueder recibir parámetos adicionales, por ejemplo el número de registros para mostrar y si deseas truncar la salida.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513635_698863687","id":"20180709-153247_1440150699","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:05-0500","dateFinished":"2018-08-06T08:36:05-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:104"},{"text":"%pyspark\nsubDF.show(n=300, truncate=False)","user":"hduser","dateUpdated":"2018-08-08T10:08:41-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+----------------+-----------+-----------------------------------------------------------+----+\n|apellido    |nombre          |nss        |ocupacion                                                  |edad|\n+------------+----------------+-----------+-----------------------------------------------------------+----+\n|Correa      |Gerardo         |058-18-3654|Systems analyst                                            |46  |\n|Carreón     |Alejandro       |262-60-4012|Theatre stage manager                                      |27  |\n|Valdés      |HermelindaHernán|103-16-2343|Social research officer, government                        |36  |\n|Muñiz       |Pilar           |505-44-2197|Midwife                                                    |39  |\n|Collado     |Pablo           |382-11-7793|Designer, multimedia                                       |39  |\n|Frías       |Mayte           |659-40-4529|Exhibitions officer, museum/gallery                        |17  |\n|Jaime       |Antonia         |810-97-0959|Barista                                                    |0   |\n|Olivárez    |Alta  Gracia    |182-27-5288|Amenity horticulturist                                     |22  |\n|Franco      |Angélica        |172-92-5397|Retail banker                                              |44  |\n|Sauceda     |Nadia           |787-80-4216|Secretary/administrator                                    |10  |\n|Molina      |Camila          |731-90-2815|Theatre director                                           |37  |\n|Botello     |Itzel           |752-30-6554|Orthoptist                                                 |46  |\n|Fierro      |Esteban         |194-03-8285|Forensic scientist                                         |36  |\n|Olivera     |Armando         |041-23-3263|Broadcast presenter                                        |24  |\n|Guevara     |Abigail         |203-80-6159|Building services engineer                                 |45  |\n|Barajas     |Anabel          |264-73-2981|Research officer, government                               |27  |\n|Bustos      |Martín          |846-70-9284|Astronomer                                                 |2   |\n|Sauceda     |Sandra          |610-96-7803|Runner, broadcasting/film/video                            |45  |\n|Tijerina    |Blanca          |644-32-7297|IT sales professional                                      |32  |\n|Orozco      |Eduardo         |009-56-7562|Estate manager/land agent                                  |34  |\n|Arriaga     |Graciela        |056-60-8511|Statistician                                               |37  |\n|Soto        |Socorro         |363-94-7993|Administrator, education                                   |42  |\n|Ordóñez     |Carla           |040-43-3935|Lighting technician, broadcasting/film/video               |26  |\n|Rodríquez   |Carla           |192-53-8187|Health and safety inspector                                |44  |\n|Curiel      |René            |630-93-7112|Sports therapist                                           |47  |\n|Trujillo    |Natividad       |403-06-8972|Garment/textile technologist                               |6   |\n|Concepción  |María           |853-30-5167|Surveyor, mining                                           |47  |\n|Roldán      |Tomás           |443-69-1547|Secretary, company                                         |34  |\n|Rivera      |Asunción        |551-46-6107|Planning and development surveyor                          |11  |\n|Vigil       |Andrea          |695-93-4517|Communications engineer                                    |36  |\n|Lozano      |Mauricio        |721-19-1341|Journalist, newspaper                                      |8   |\n|Batista     |Margarita       |227-26-5019|Psychologist, prison and probation services                |21  |\n|Camarillo   |Miguel          |460-53-9861|Psychologist, forensic                                     |29  |\n|Olivera     |Salma           |324-54-3965|Geneticist, molecular                                      |0   |\n|Ramón       |Catalina        |418-61-5464|Programmer, applications                                   |33  |\n|Estrada     |Eduardo         |507-10-0419|Cabin crew                                                 |26  |\n|Caraballo   |Reina           |621-23-3079|Operational investment banker                              |46  |\n|de Jesús    |Mitzy           |155-76-0838|Environmental health practitioner                          |47  |\n|Dávila      |María Eugenia   |848-18-6745|Database administrator                                     |6   |\n|Guevara     |Emilio          |824-11-7415|Industrial buyer                                           |44  |\n|Vanegas     |Gilberto        |516-10-2457|Contractor                                                 |11  |\n|Narváez     |Abelardo        |343-80-6261|Ceramics designer                                          |13  |\n|Urrutia     |Judith          |647-78-9963|Catering manager                                           |36  |\n|Segura      |Ana Luisa       |363-83-5358|Horticultural consultant                                   |8   |\n|Vargas      |Modesto         |823-43-5986|Horticulturist, amenity                                    |36  |\n|Arguello    |José Eduardo    |416-69-0271|Financial planner                                          |35  |\n|Gonzales    |Carlota         |472-69-2503|Educational psychologist                                   |38  |\n|Gaona       |Ignacio         |421-99-1614|Community arts worker                                      |9   |\n|Osorio      |Esteban         |054-40-5322|Barista                                                    |1   |\n|Barraza     |Anel            |113-64-0675|Scientist, product/process development                     |43  |\n|Escamilla   |Delia           |345-72-1769|Chartered loss adjuster                                    |41  |\n|Verduzco    |Raúl            |367-70-9003|Radio broadcast assistant                                  |16  |\n|Almaraz     |Aida            |494-58-8536|Higher education lecturer                                  |4   |\n|Vanegas     |Enrique         |884-57-1945|Historic buildings inspector/conservation officer          |10  |\n|Cadena      |Aida            |262-24-1032|Engineer, petroleum                                        |47  |\n|Chávez      |Josefina        |355-87-5032|Horticulturist, commercial                                 |18  |\n|Guardado    |Alicia          |482-65-9527|Building services engineer                                 |18  |\n|Balderas    |Esperanza       |237-01-0002|Retail merchandiser                                        |29  |\n|Valencia    |Cristobal       |655-24-4124|Public house manager                                       |16  |\n|Lozada      |Mónica          |369-75-2259|Community education officer                                |23  |\n|Gil         |Claudio         |340-54-3457|Learning disability nurse                                  |37  |\n|Pichardo    |Indira          |417-02-3711|TEFL teacher                                               |37  |\n|Hernandes   |Javier          |658-23-5755|Probation officer                                          |16  |\n|Rubio       |César           |240-67-4794|Designer, graphic                                          |3   |\n|Canales     |Ruby            |319-20-7301|Administrator, sports                                      |40  |\n|Benítez     |Citlali         |461-99-5390|Exhibitions officer, museum/gallery                        |14  |\n|Pantoja     |Clara           |520-18-6071|Health and safety inspector                                |23  |\n|Chacón      |Ana María       |893-58-8021|Financial adviser                                          |25  |\n|Roque       |Benito          |651-71-9847|Health and safety adviser                                  |31  |\n|Haro        |Karla           |461-60-8712|Cartographer                                               |44  |\n|Gallegos    |Eloy            |205-43-9487|Exhibitions officer, museum/gallery                        |34  |\n|Vásquez     |Armando         |209-27-9609|Surveyor, building control                                 |1   |\n|Matos       |Mariano         |646-25-7018|Network engineer                                           |33  |\n|Mayorga     |Frida           |071-77-0364|Psychologist, counselling                                  |41  |\n|Alcántar    |Maximiliano     |727-68-2970|Sports therapist                                           |17  |\n|Alvarez     |Mario           |685-37-7370|Tourism officer                                            |39  |\n|de la Fuente|María Teresa    |875-29-6911|Multimedia programmer                                      |41  |\n|Madrigal    |Zeferino        |091-02-2217|Geologist, wellsite                                        |24  |\n|Montoya     |Silvano         |573-46-6402|Telecommunications researcher                              |21  |\n|Pantoja     |Noelia          |508-92-5295|Food technologist                                          |12  |\n|Cantú       |Nicolás         |610-35-2838|Heritage manager                                           |31  |\n|Maya        |Eugenia         |027-41-1079|Herpetologist                                              |32  |\n|Juárez      |Samuel          |004-41-3243|Accommodation manager                                      |16  |\n|Díaz        |Héctor          |067-72-7228|Surveyor, building control                                 |14  |\n|Sanabria    |Esteban         |851-94-4266|Engineer, petroleum                                        |25  |\n|Medina      |Clara           |318-06-8811|Textile designer                                           |26  |\n|Cabán       |Cynthia         |612-26-5209|Meteorologist                                              |44  |\n|Gamboa      |Patricio        |270-44-8635|Biomedical engineer                                        |34  |\n|Casanova    |Bernardo        |171-53-1766|Surveyor, mining                                           |6   |\n|Ortiz       |Eric            |525-50-8638|Software engineer                                          |44  |\n|Malave      |Linda           |714-87-5335|Medical physicist                                          |11  |\n|Alarcón     |Carolina        |843-05-6322|Operational researcher                                     |37  |\n|Robles      |Agustín         |333-67-7289|Commercial/residential surveyor                            |1   |\n|Castañeda   |Gabriel         |076-01-2168|Engineer, automotive                                       |21  |\n|Camacho     |Francisca       |873-85-4598|Scientist, audiological                                    |42  |\n|Fernández   |Violeta         |053-93-8268|Herbalist                                                  |15  |\n|Valladares  |Gabriela        |736-05-9994|Multimedia programmer                                      |22  |\n|Guevara     |Antonio         |332-57-2134|Sound technician, broadcasting/film/video                  |22  |\n|Lerma       |Zeferino        |374-87-4372|Editor, film/video                                         |18  |\n|Ceja        |Bernardo        |785-92-3226|Administrator, Civil Service                               |8   |\n|Arreola     |Marcos          |429-26-5903|Civil engineer, contracting                                |41  |\n|Orosco      |Jesús           |852-44-3340|Surveyor, planning and development                         |37  |\n|Otero       |Úrsula          |441-87-8090|Corporate investment banker                                |13  |\n|Alcántar    |Gabino          |743-51-7362|Engineer, automotive                                       |37  |\n|Olmos       |Rosalia         |042-87-0872|Senior tax professional/tax inspector                      |48  |\n|Soria       |Emilia          |800-58-5339|Structural engineer                                        |45  |\n|Baca        |Alta  Gracia    |590-16-3719|Doctor, general practice                                   |17  |\n|Bustamante  |Mariano         |461-82-1285|Film/video editor                                          |9   |\n|Loya        |Porfirio        |162-66-3274|Graphic designer                                           |18  |\n|Medina      |Abril           |223-82-8835|Programmer, systems                                        |3   |\n|Padilla     |Amelia          |280-15-8468|Race relations officer                                     |9   |\n|Candelaria  |Miriam          |071-46-9578|Records manager                                            |48  |\n|Roque       |Guillermo       |466-89-1855|Journalist, broadcasting                                   |1   |\n|Quezada     |Celia           |023-14-3724|Solicitor, Scotland                                        |2   |\n|Barraza     |Graciela        |399-94-7975|Editor, film/video                                         |32  |\n|Almonte     |Raúl            |351-77-5855|Call centre manager                                        |9   |\n|Linares     |Helena          |437-99-6742|Designer, graphic                                          |45  |\n|Velásquez   |Felix           |192-28-9339|Chief Executive Officer                                    |39  |\n|Zayas       |Renato          |860-85-5468|IT technical support officer                               |12  |\n|Valle       |Daniel          |131-71-4810|Counsellor                                                 |42  |\n|Salinas     |Fabiola         |774-69-3169|Mudlogger                                                  |29  |\n|Colunga     |Bernabé         |133-48-6552|Surveyor, hydrographic                                     |38  |\n|Ulibarri    |Citlali         |251-10-2051|Teacher, music                                             |8   |\n|Loera       |Dalia           |019-82-5920|Leisure centre manager                                     |29  |\n|Villagómez  |Tania           |180-16-0247|Therapist, occupational                                    |18  |\n|Guzmán      |Leonardo        |576-03-8993|Programmer, applications                                   |12  |\n|Verduzco    |Víctor          |598-29-5289|Psychologist, educational                                  |45  |\n|Longoria    |Jesús           |508-79-5477|Tour manager                                               |30  |\n|Quiñónez    |Blanca          |518-37-1087|Patent examiner                                            |46  |\n|Garza       |José Emilio     |246-27-8489|Fisheries officer                                          |36  |\n|Garibay     |Natalia         |039-90-8868|Tree surgeon                                               |13  |\n|Adame       |Adela           |179-52-6686|Heritage manager                                           |43  |\n|Hernandes   |Reina           |275-68-3283|Psychiatric nurse                                          |36  |\n|Merino      |Santiago        |766-24-4496|Microbiologist                                             |4   |\n|Tello       |Ariadna         |072-56-7783|Warden/ranger                                              |18  |\n|Carbajal    |Leonardo        |658-78-0619|Surveyor, commercial/residential                           |37  |\n|Canales     |Óliver          |087-48-4021|Brewing technologist                                       |41  |\n|García      |Ana             |691-69-2880|Chief of Staff                                             |30  |\n|Luna        |Elvira          |690-11-8458|IT consultant                                              |16  |\n|Villareal   |Mayte           |404-17-0084|Herpetologist                                              |6   |\n|del Río     |Eugenio         |799-88-1365|Chartered management accountant                            |11  |\n|Urbina      |Fidel           |165-05-3974|Musician                                                   |35  |\n|Ojeda       |Esparta         |734-74-7476|Programme researcher, broadcasting/film/video              |42  |\n|Baeza       |Norma           |106-38-7918|Hydrogeologist                                             |8   |\n|Holguín     |Susana          |320-58-5487|Nurse, learning disability                                 |47  |\n|Caballero   |Eva             |022-83-8344|Bonds trader                                               |5   |\n|Orta        |Elvira          |623-83-2251|Chief Executive Officer                                    |41  |\n|Zavala      |Yuridia         |753-50-5987|Armed forces training and education officer                |48  |\n|Galindo     |Darío           |235-35-8539|Chief Technology Officer                                   |21  |\n|Gaitán      |Sessa           |680-48-2374|Airline pilot                                              |3   |\n|Parra       |Nayeli          |727-13-4158|Lighting technician, broadcasting/film/video               |10  |\n|Durán       |Socorro         |504-85-4449|Retail buyer                                               |40  |\n|Fuentes     |Itzel           |325-60-0118|Advertising account planner                                |48  |\n|Padilla     |Eloy            |705-57-1096|Geologist, engineering                                     |10  |\n|Flórez      |Luis Miguel     |336-26-5627|Engineer, maintenance (IT)                                 |29  |\n|Saldaña     |Uriel           |026-84-3329|Investment banker, operational                             |8   |\n|Magaña      |Ángela          |848-69-2768|Restaurant manager                                         |18  |\n|Gallegos    |Inés            |425-18-2398|Public librarian                                           |13  |\n|Castillo    |Cecilia         |773-82-5638|Microbiologist                                             |29  |\n|Otero       |Cristina        |133-42-1593|Hotel manager                                              |20  |\n|Garica      |Adriana         |093-03-1883|Immunologist                                               |1   |\n|Palomino    |Conchita        |799-58-7982|Arts development officer                                   |33  |\n|Rocha       |Paola           |391-64-8825|Associate Professor                                        |2   |\n|Galarza     |Hugo            |020-82-2482|Engineer, civil (contracting)                              |25  |\n|Nájera      |Elisa           |653-09-3606|Metallurgist                                               |11  |\n|Galván      |Noemí           |689-67-8739|Surveyor, hydrographic                                     |39  |\n|Yáñez       |Yeni            |740-91-1753|Occupational therapist                                     |46  |\n|Gracia      |Elias           |154-35-1451|Regulatory affairs officer                                 |37  |\n|Fierro      |Humberto        |826-82-5735|Designer, fashion/clothing                                 |2   |\n|Olmos       |Dulce           |543-68-0969|Engineer, electronics                                      |17  |\n|Esquivel    |Oswaldo         |511-12-4216|Producer, television/film/video                            |43  |\n|Gómez       |Rodolfo         |169-98-2699|Phytotherapist                                             |20  |\n|Rivera      |Pilar           |156-80-4888|Engineer, production                                       |42  |\n|Laboy       |Omar            |227-42-5796|Psychologist, sport and exercise                           |46  |\n|Ontiveros   |Miguel          |033-04-9110|Geophysical data processor                                 |2   |\n|Rivero      |Cornelio        |255-03-6861|Programmer, applications                                   |28  |\n|Laboy       |Alicia          |062-08-0637|Engineer, water                                            |32  |\n|Tórrez      |Esther          |753-83-4419|Local government officer                                   |13  |\n|Negrón      |Ernesto         |083-92-9584|Education officer, museum                                  |6   |\n|Echeverría  |José Emilio     |138-58-4441|Armed forces training and education officer                |3   |\n|Gaytán      |Miguel          |466-25-9991|Museum/gallery conservator                                 |15  |\n|Miranda     |Uriel           |248-18-3945|Dramatherapist                                             |43  |\n|Villanueva  |Nelly           |113-80-1686|Pathologist                                                |10  |\n|Orosco      |Alfonso         |842-56-0920|Press sub                                                  |32  |\n|Arreola     |Alonso          |248-73-1904|Scientist, clinical (histocompatibility and immunogenetics)|34  |\n|Benavídez   |Abelardo        |149-07-0781|Biochemist, clinical                                       |8   |\n|Ochoa       |Leonor          |649-03-8292|Horticulturist, amenity                                    |47  |\n|Zelaya      |Claudio         |627-25-9573|Engineer, petroleum                                        |31  |\n|Gaitán      |Eric            |493-52-3308|Environmental consultant                                   |46  |\n|Mora        |Verónica        |601-64-3785|Arts development officer                                   |11  |\n|Ramón       |Patricia        |612-57-9098|Actuary                                                    |13  |\n|Gamboa      |Clara           |515-72-0861|Scientist, research (maths)                                |27  |\n|Figueroa    |Horacio         |193-08-3697|Surveyor, minerals                                         |3   |\n|Roque       |Eugenio         |634-30-7451|Printmaker                                                 |7   |\n|Enríquez    |Carla           |072-27-9656|Surgeon                                                    |17  |\n|Sauceda     |Amelia          |609-56-2373|Advice worker                                              |29  |\n|Noriega     |Jos             |651-28-2458|Programmer, applications                                   |2   |\n|Medina      |Gregorio        |266-53-3622|Contracting civil engineer                                 |46  |\n|Gallegos    |Luz             |575-18-1850|Designer, furniture                                        |7   |\n|Rael        |Bernabé         |226-65-6128|Counselling psychologist                                   |24  |\n|Medrano     |Maximiliano     |096-29-1552|Higher education careers adviser                           |41  |\n|Guerra      |Dulce           |627-07-7861|Youth worker                                               |29  |\n|Olmos       |Salvador        |687-80-5931|IT sales professional                                      |11  |\n|Villegas    |Julio César     |409-07-7357|Programmer, systems                                        |31  |\n|Montemayor  |Patricio        |030-32-8967|Tax inspector                                              |36  |\n|Fonseca     |Genaro          |024-26-1570|Engineer, manufacturing                                    |3   |\n|Tamez       |Abelardo        |335-05-6196|Operational researcher                                     |31  |\n|Terrazas    |Adriana         |521-41-3593|Financial manager                                          |35  |\n|Puga        |Enrique         |449-82-1104|Interior and spatial designer                              |12  |\n|Fajardo     |Guadalupe       |111-95-7437|Journalist, broadcasting                                   |44  |\n|Mayorga     |Claudia         |510-71-7274|Claims inspector/assessor                                  |16  |\n|Armendáriz  |Humberto        |069-34-0212|Chief of Staff                                             |26  |\n|Huerta      |Eugenio         |826-96-1446|Visual merchandiser                                        |31  |\n|Montenegro  |Humberto        |492-35-6594|Engineer, technical sales                                  |42  |\n|Padrón      |Eduardo         |267-16-1331|Tourism officer                                            |21  |\n|Acuña       |Rosario         |400-15-4747|Education officer, community                               |44  |\n|Ortiz       |Héctor          |467-37-5167|Air traffic controller                                     |45  |\n|Pulido      |Adriana         |861-32-2198|Special effects artist                                     |13  |\n|Morales     |Micaela         |415-94-0417|Medical physicist                                          |23  |\n|Munguía     |Micaela         |508-80-8246|Conservator, museum/gallery                                |30  |\n|Alva        |Victoria        |214-62-3749|Engineer, energy                                           |13  |\n|Pulido      |Julio           |418-36-5979|Chemist, analytical                                        |4   |\n|Verduzco    |Sandra          |086-51-7487|Printmaker                                                 |27  |\n|Magaña      |Beatriz         |304-66-9346|International aid/development worker                       |20  |\n|Rodríguez   |Alberto         |519-66-7678|Chiropodist                                                |25  |\n|Naranjo     |Leonor          |886-83-2083|Runner, broadcasting/film/video                            |43  |\n|Alemán      |Nadia           |385-23-9868|Photographer                                               |33  |\n|Corral      |Francisco Javier|528-69-7908|Early years teacher                                        |1   |\n|Nieves      |Mauro           |651-96-7961|Economist                                                  |39  |\n|Elizondo    |Rosa            |124-66-2839|Production designer, theatre/television/film               |25  |\n|Matías      |Cynthia         |106-81-7655|Chief Executive Officer                                    |40  |\n|Garay       |Teresa          |121-58-1866|Medical secretary                                          |40  |\n|Torres      |Horacio         |058-86-5174|Purchasing manager                                         |6   |\n|Saavedra    |Blanca          |053-73-6765|Editorial assistant                                        |45  |\n|Gil         |Ivonne          |277-50-2399|Pharmacologist                                             |12  |\n|Haro        |Bianca          |651-72-1560|Teacher, early years/pre                                   |46  |\n|Alonzo      |Alfredo         |375-70-2512|Higher education careers adviser                           |11  |\n|Oquendo     |Patricia        |661-47-8636|Horticulturist, amenity                                    |5   |\n|Alvarado    |Berta           |709-23-4351|Sales executive                                            |41  |\n|Partida     |Fidel           |207-78-4914|Scientific laboratory technician                           |5   |\n|Puga        |Víctor          |187-56-8840|Museum/gallery exhibitions officer                         |18  |\n|Bueno       |Esteban         |123-08-3966|Publishing copy                                            |22  |\n|Ceballos    |Roberto         |154-86-3726|Education officer, community                               |22  |\n|Matías      |Lucía           |446-75-3727|Government social research officer                         |1   |\n|Brito       |Adalberto       |536-70-3813|Engineering geologist                                      |21  |\n|Lira        |Luisa           |622-99-6547|Hospital pharmacist                                        |13  |\n|Rojas       |Modesto         |343-88-1003|Cytogeneticist                                             |15  |\n|Camacho     |Ernesto         |842-51-1940|Financial trader                                           |4   |\n|Zepeda      |Isabela         |340-80-5890|Museum/gallery conservator                                 |4   |\n|Bétancourt  |Flavio          |686-64-6934|Structural engineer                                        |27  |\n|León        |Carmen          |608-76-0030|Clinical embryologist                                      |22  |\n|Espinoza    |Asunción        |242-68-2215|Glass blower/designer                                      |21  |\n|Escalante   |Virginia        |743-02-9665|Horticultural therapist                                    |8   |\n|Garza       |Claudio         |041-54-8809|Product designer                                           |35  |\n|Concepción  |Agustín         |726-20-9140|Paediatric nurse                                           |20  |\n|Verduzco    |Óliver          |469-74-4804|Hydrogeologist                                             |38  |\n|Meza        |Juan Carlos     |517-79-9422|Engineer, manufacturing                                    |5   |\n|Ybarra      |Guillermina     |090-82-2165|Chartered public finance accountant                        |32  |\n|Sauceda     |Oswaldo         |652-03-2949|Banker                                                     |36  |\n|Rodrígez    |Juana           |794-76-5527|Accountant, chartered certified                            |44  |\n|Muñiz       |Raquel          |114-11-0496|Journalist, magazine                                       |28  |\n|Archuleta   |Judith          |351-69-0455|Farm manager                                               |39  |\n|Pizarro     |Bruno           |168-55-6069|Logistics and distribution manager                         |22  |\n|Ledesma     |Linda           |204-34-8012|Engineer, chemical                                         |45  |\n|Quiroz      |Irma            |842-27-5222|Chartered loss adjuster                                    |30  |\n|Tejada      |Marcos          |297-99-8659|Journalist, broadcasting                                   |27  |\n|Mata        |Ernesto         |875-55-7139|Conservation officer, nature                               |15  |\n|Estrada     |Marisol         |629-17-0295|Print production planner                                   |25  |\n|Osorio      |Gerónimo        |269-52-0226|Sales promotion account executive                          |43  |\n|de Anda     |Perla           |828-32-7867|Engineer, control and instrumentation                      |45  |\n|Tamayo      |Ángel           |829-11-9334|Health service manager                                     |14  |\n|Montenegro  |Sergio          |840-92-1561|Environmental education officer                            |23  |\n|Gómez       |Eloy            |388-67-8880|Actor                                                      |5   |\n|Lerma       |Minerva         |294-44-3119|Air traffic controller                                     |19  |\n|Matías      |Samuel          |896-89-8757|Multimedia programmer                                      |23  |\n|Parra       |Julia           |049-85-3941|Development worker, community                              |2   |\n|Vergara     |Alejandro       |204-11-0358|Field trials officer                                       |28  |\n|Peres       |María Teresa    |772-67-1238|Consulting civil engineer                                  |6   |\n|Lugo        |Rodolfo         |365-21-1471|Race relations officer                                     |30  |\n|Villa       |Clemente        |440-56-1762|Sport and exercise psychologist                            |13  |\n|Palomo      |Eugenia         |109-87-6334|Optometrist                                                |41  |\n|Abrego      |Débora          |652-93-4009|Health promotion specialist                                |23  |\n|Curiel      |Dulce María     |073-79-9081|Designer, multimedia                                       |15  |\n|Ponce       |Espartaco       |226-77-5583|Engineer, petroleum                                        |5   |\n|Batista     |Víctor          |033-60-1286|Restaurant manager                                         |42  |\n|Montenegro  |Patricia        |725-23-7467|Landscape architect                                        |9   |\n|Sosa        |Alta  Gracia    |615-59-6828|Clinical molecular geneticist                              |6   |\n|Saucedo     |Irene           |121-11-5992|Journalist, newspaper                                      |20  |\n|Espinal     |Martha          |594-02-3790|Petroleum engineer                                         |8   |\n|Enríquez    |Jesús           |456-76-3706|Operations geologist                                       |16  |\n|Iglesias    |Estefanía       |688-04-2795|Midwife                                                    |37  |\n|González    |Martín          |593-57-0254|Programmer, systems                                        |31  |\n|Olivárez    |Juan            |645-44-7271|Physicist, medical                                         |11  |\n|Reyes       |Juan            |884-69-6300|Data scientist                                             |41  |\n|Parra       |Alvaro          |105-40-7556|Civil engineer, contracting                                |20  |\n|Sosa        |Aida            |464-53-5840|Radiographer, diagnostic                                   |23  |\n|Ávila       |Cristobal       |839-27-6797|Environmental education officer                            |2   |\n|Guerrero    |Bianca          |372-99-4292|Estate agent                                               |32  |\n|Méndez      |Guillermo       |470-28-3961|Librarian, public                                          |46  |\n|Rodarte     |Jonás           |064-65-1288|Physicist, medical                                         |46  |\n+------------+----------------+-----------+-----------------------------------------------------------+----+\nonly showing top 300 rows\n\n"}]},"apps":[],"jobName":"paragraph_1533562513636_696939943","id":"20180709-153211_135517819","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:08:41-0500","dateFinished":"2018-08-08T10:08:41-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:105"},{"text":"%md\nEl contexto de Zeppelin (`z`), también puede ser utilizado dentro de múltiples interpretes para visualizar los resultados.","user":"hduser","dateUpdated":"2018-08-06T08:36:05-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>El contexto de Zeppelin (<code>z</code>), también puede ser utilizado dentro de múltiples interpretes para visualizar los resultados.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513637_696555194","id":"20180709-153403_1674026957","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:05-0500","dateFinished":"2018-08-06T08:36:05-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:106"},{"text":"%md\n","user":"hduser","dateUpdated":"2018-08-09T10:40:40-0500","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1533829240110_1528609676","id":"20180809-104040_1638639520","dateCreated":"2018-08-09T10:40:40-0500","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:107"},{"text":"%pyspark\nz.show(subDF)","user":"hduser","dateUpdated":"2018-08-09T10:41:14-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"apellido":"string","nombre":"string","nss":"string","ocupacion":"string","edad":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}},"helium":{}}},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"apellido\tnombre\tnss\tocupacion\tedad\nCorrea\tGerardo\t058-18-3654\tSystems analyst\t46\nCarreón\tAlejandro\t262-60-4012\tTheatre stage manager\t27\nValdés\tHermelindaHernán\t103-16-2343\tSocial research officer, government\t36\nMuñiz\tPilar\t505-44-2197\tMidwife\t39\nCollado\tPablo\t382-11-7793\tDesigner, multimedia\t39\nFrías\tMayte\t659-40-4529\tExhibitions officer, museum/gallery\t17\nJaime\tAntonia\t810-97-0959\tBarista\t0\nOlivárez\tAlta  Gracia\t182-27-5288\tAmenity horticulturist\t22\nFranco\tAngélica\t172-92-5397\tRetail banker\t44\nSauceda\tNadia\t787-80-4216\tSecretary/administrator\t10\nMolina\tCamila\t731-90-2815\tTheatre director\t37\nBotello\tItzel\t752-30-6554\tOrthoptist\t46\nFierro\tEsteban\t194-03-8285\tForensic scientist\t36\nOlivera\tArmando\t041-23-3263\tBroadcast presenter\t24\nGuevara\tAbigail\t203-80-6159\tBuilding services engineer\t45\nBarajas\tAnabel\t264-73-2981\tResearch officer, government\t27\nBustos\tMartín\t846-70-9284\tAstronomer\t2\nSauceda\tSandra\t610-96-7803\tRunner, broadcasting/film/video\t45\nTijerina\tBlanca\t644-32-7297\tIT sales professional\t32\nOrozco\tEduardo\t009-56-7562\tEstate manager/land agent\t34\nArriaga\tGraciela\t056-60-8511\tStatistician\t37\nSoto\tSocorro\t363-94-7993\tAdministrator, education\t42\nOrdóñez\tCarla\t040-43-3935\tLighting technician, broadcasting/film/video\t26\nRodríquez\tCarla\t192-53-8187\tHealth and safety inspector\t44\nCuriel\tRené\t630-93-7112\tSports therapist\t47\nTrujillo\tNatividad\t403-06-8972\tGarment/textile technologist\t6\nConcepción\tMaría\t853-30-5167\tSurveyor, mining\t47\nRoldán\tTomás\t443-69-1547\tSecretary, company\t34\nRivera\tAsunción\t551-46-6107\tPlanning and development surveyor\t11\nVigil\tAndrea\t695-93-4517\tCommunications engineer\t36\nLozano\tMauricio\t721-19-1341\tJournalist, newspaper\t8\nBatista\tMargarita\t227-26-5019\tPsychologist, prison and probation services\t21\nCamarillo\tMiguel\t460-53-9861\tPsychologist, forensic\t29\nOlivera\tSalma\t324-54-3965\tGeneticist, molecular\t0\nRamón\tCatalina\t418-61-5464\tProgrammer, applications\t33\nEstrada\tEduardo\t507-10-0419\tCabin crew\t26\nCaraballo\tReina\t621-23-3079\tOperational investment banker\t46\nde Jesús\tMitzy\t155-76-0838\tEnvironmental health practitioner\t47\nDávila\tMaría Eugenia\t848-18-6745\tDatabase administrator\t6\nGuevara\tEmilio\t824-11-7415\tIndustrial buyer\t44\nVanegas\tGilberto\t516-10-2457\tContractor\t11\nNarváez\tAbelardo\t343-80-6261\tCeramics designer\t13\nUrrutia\tJudith\t647-78-9963\tCatering manager\t36\nSegura\tAna Luisa\t363-83-5358\tHorticultural consultant\t8\nVargas\tModesto\t823-43-5986\tHorticulturist, amenity\t36\nArguello\tJosé Eduardo\t416-69-0271\tFinancial planner\t35\nGonzales\tCarlota\t472-69-2503\tEducational psychologist\t38\nGaona\tIgnacio\t421-99-1614\tCommunity arts worker\t9\nOsorio\tEsteban\t054-40-5322\tBarista\t1\nBarraza\tAnel\t113-64-0675\tScientist, product/process development\t43\nEscamilla\tDelia\t345-72-1769\tChartered loss adjuster\t41\nVerduzco\tRaúl\t367-70-9003\tRadio broadcast assistant\t16\nAlmaraz\tAida\t494-58-8536\tHigher education lecturer\t4\nVanegas\tEnrique\t884-57-1945\tHistoric buildings inspector/conservation officer\t10\nCadena\tAida\t262-24-1032\tEngineer, petroleum\t47\nChávez\tJosefina\t355-87-5032\tHorticulturist, commercial\t18\nGuardado\tAlicia\t482-65-9527\tBuilding services engineer\t18\nBalderas\tEsperanza\t237-01-0002\tRetail merchandiser\t29\nValencia\tCristobal\t655-24-4124\tPublic house manager\t16\nLozada\tMónica\t369-75-2259\tCommunity education officer\t23\nGil\tClaudio\t340-54-3457\tLearning disability nurse\t37\nPichardo\tIndira\t417-02-3711\tTEFL teacher\t37\nHernandes\tJavier\t658-23-5755\tProbation officer\t16\nRubio\tCésar\t240-67-4794\tDesigner, graphic\t3\nCanales\tRuby\t319-20-7301\tAdministrator, sports\t40\nBenítez\tCitlali\t461-99-5390\tExhibitions officer, museum/gallery\t14\nPantoja\tClara\t520-18-6071\tHealth and safety inspector\t23\nChacón\tAna María\t893-58-8021\tFinancial adviser\t25\nRoque\tBenito\t651-71-9847\tHealth and safety adviser\t31\nHaro\tKarla\t461-60-8712\tCartographer\t44\nGallegos\tEloy\t205-43-9487\tExhibitions officer, museum/gallery\t34\nVásquez\tArmando\t209-27-9609\tSurveyor, building control\t1\nMatos\tMariano\t646-25-7018\tNetwork engineer\t33\nMayorga\tFrida\t071-77-0364\tPsychologist, counselling\t41\nAlcántar\tMaximiliano\t727-68-2970\tSports therapist\t17\nAlvarez\tMario\t685-37-7370\tTourism officer\t39\nde la Fuente\tMaría Teresa\t875-29-6911\tMultimedia programmer\t41\nMadrigal\tZeferino\t091-02-2217\tGeologist, wellsite\t24\nMontoya\tSilvano\t573-46-6402\tTelecommunications researcher\t21\nPantoja\tNoelia\t508-92-5295\tFood technologist\t12\nCantú\tNicolás\t610-35-2838\tHeritage manager\t31\nMaya\tEugenia\t027-41-1079\tHerpetologist\t32\nJuárez\tSamuel\t004-41-3243\tAccommodation manager\t16\nDíaz\tHéctor\t067-72-7228\tSurveyor, building control\t14\nSanabria\tEsteban\t851-94-4266\tEngineer, petroleum\t25\nMedina\tClara\t318-06-8811\tTextile designer\t26\nCabán\tCynthia\t612-26-5209\tMeteorologist\t44\nGamboa\tPatricio\t270-44-8635\tBiomedical engineer\t34\nCasanova\tBernardo\t171-53-1766\tSurveyor, mining\t6\nOrtiz\tEric\t525-50-8638\tSoftware engineer\t44\nMalave\tLinda\t714-87-5335\tMedical physicist\t11\nAlarcón\tCarolina\t843-05-6322\tOperational researcher\t37\nRobles\tAgustín\t333-67-7289\tCommercial/residential surveyor\t1\nCastañeda\tGabriel\t076-01-2168\tEngineer, automotive\t21\nCamacho\tFrancisca\t873-85-4598\tScientist, audiological\t42\nFernández\tVioleta\t053-93-8268\tHerbalist\t15\nValladares\tGabriela\t736-05-9994\tMultimedia programmer\t22\nGuevara\tAntonio\t332-57-2134\tSound technician, broadcasting/film/video\t22\nLerma\tZeferino\t374-87-4372\tEditor, film/video\t18\nCeja\tBernardo\t785-92-3226\tAdministrator, Civil Service\t8\nArreola\tMarcos\t429-26-5903\tCivil engineer, contracting\t41\nOrosco\tJesús\t852-44-3340\tSurveyor, planning and development\t37\nOtero\tÚrsula\t441-87-8090\tCorporate investment banker\t13\nAlcántar\tGabino\t743-51-7362\tEngineer, automotive\t37\nOlmos\tRosalia\t042-87-0872\tSenior tax professional/tax inspector\t48\nSoria\tEmilia\t800-58-5339\tStructural engineer\t45\nBaca\tAlta  Gracia\t590-16-3719\tDoctor, general practice\t17\nBustamante\tMariano\t461-82-1285\tFilm/video editor\t9\nLoya\tPorfirio\t162-66-3274\tGraphic designer\t18\nMedina\tAbril\t223-82-8835\tProgrammer, systems\t3\nPadilla\tAmelia\t280-15-8468\tRace relations officer\t9\nCandelaria\tMiriam\t071-46-9578\tRecords manager\t48\nRoque\tGuillermo\t466-89-1855\tJournalist, broadcasting\t1\nQuezada\tCelia\t023-14-3724\tSolicitor, Scotland\t2\nBarraza\tGraciela\t399-94-7975\tEditor, film/video\t32\nAlmonte\tRaúl\t351-77-5855\tCall centre manager\t9\nLinares\tHelena\t437-99-6742\tDesigner, graphic\t45\nVelásquez\tFelix\t192-28-9339\tChief Executive Officer\t39\nZayas\tRenato\t860-85-5468\tIT technical support officer\t12\nValle\tDaniel\t131-71-4810\tCounsellor\t42\nSalinas\tFabiola\t774-69-3169\tMudlogger\t29\nColunga\tBernabé\t133-48-6552\tSurveyor, hydrographic\t38\nUlibarri\tCitlali\t251-10-2051\tTeacher, music\t8\nLoera\tDalia\t019-82-5920\tLeisure centre manager\t29\nVillagómez\tTania\t180-16-0247\tTherapist, occupational\t18\nGuzmán\tLeonardo\t576-03-8993\tProgrammer, applications\t12\nVerduzco\tVíctor\t598-29-5289\tPsychologist, educational\t45\nLongoria\tJesús\t508-79-5477\tTour manager\t30\nQuiñónez\tBlanca\t518-37-1087\tPatent examiner\t46\nGarza\tJosé Emilio\t246-27-8489\tFisheries officer\t36\nGaribay\tNatalia\t039-90-8868\tTree surgeon\t13\nAdame\tAdela\t179-52-6686\tHeritage manager\t43\nHernandes\tReina\t275-68-3283\tPsychiatric nurse\t36\nMerino\tSantiago\t766-24-4496\tMicrobiologist\t4\nTello\tAriadna\t072-56-7783\tWarden/ranger\t18\nCarbajal\tLeonardo\t658-78-0619\tSurveyor, commercial/residential\t37\nCanales\tÓliver\t087-48-4021\tBrewing technologist\t41\nGarcía\tAna\t691-69-2880\tChief of Staff\t30\nLuna\tElvira\t690-11-8458\tIT consultant\t16\nVillareal\tMayte\t404-17-0084\tHerpetologist\t6\ndel Río\tEugenio\t799-88-1365\tChartered management accountant\t11\nUrbina\tFidel\t165-05-3974\tMusician\t35\nOjeda\tEsparta\t734-74-7476\tProgramme researcher, broadcasting/film/video\t42\nBaeza\tNorma\t106-38-7918\tHydrogeologist\t8\nHolguín\tSusana\t320-58-5487\tNurse, learning disability\t47\nCaballero\tEva\t022-83-8344\tBonds trader\t5\nOrta\tElvira\t623-83-2251\tChief Executive Officer\t41\nZavala\tYuridia\t753-50-5987\tArmed forces training and education officer\t48\nGalindo\tDarío\t235-35-8539\tChief Technology Officer\t21\nGaitán\tSessa\t680-48-2374\tAirline pilot\t3\nParra\tNayeli\t727-13-4158\tLighting technician, broadcasting/film/video\t10\nDurán\tSocorro\t504-85-4449\tRetail buyer\t40\nFuentes\tItzel\t325-60-0118\tAdvertising account planner\t48\nPadilla\tEloy\t705-57-1096\tGeologist, engineering\t10\nFlórez\tLuis Miguel\t336-26-5627\tEngineer, maintenance (IT)\t29\nSaldaña\tUriel\t026-84-3329\tInvestment banker, operational\t8\nMagaña\tÁngela\t848-69-2768\tRestaurant manager\t18\nGallegos\tInés\t425-18-2398\tPublic librarian\t13\nCastillo\tCecilia\t773-82-5638\tMicrobiologist\t29\nOtero\tCristina\t133-42-1593\tHotel manager\t20\nGarica\tAdriana\t093-03-1883\tImmunologist\t1\nPalomino\tConchita\t799-58-7982\tArts development officer\t33\nRocha\tPaola\t391-64-8825\tAssociate Professor\t2\nGalarza\tHugo\t020-82-2482\tEngineer, civil (contracting)\t25\nNájera\tElisa\t653-09-3606\tMetallurgist\t11\nGalván\tNoemí\t689-67-8739\tSurveyor, hydrographic\t39\nYáñez\tYeni\t740-91-1753\tOccupational therapist\t46\nGracia\tElias\t154-35-1451\tRegulatory affairs officer\t37\nFierro\tHumberto\t826-82-5735\tDesigner, fashion/clothing\t2\nOlmos\tDulce\t543-68-0969\tEngineer, electronics\t17\nEsquivel\tOswaldo\t511-12-4216\tProducer, television/film/video\t43\nGómez\tRodolfo\t169-98-2699\tPhytotherapist\t20\nRivera\tPilar\t156-80-4888\tEngineer, production\t42\nLaboy\tOmar\t227-42-5796\tPsychologist, sport and exercise\t46\nOntiveros\tMiguel\t033-04-9110\tGeophysical data processor\t2\nRivero\tCornelio\t255-03-6861\tProgrammer, applications\t28\nLaboy\tAlicia\t062-08-0637\tEngineer, water\t32\nTórrez\tEsther\t753-83-4419\tLocal government officer\t13\nNegrón\tErnesto\t083-92-9584\tEducation officer, museum\t6\nEcheverría\tJosé Emilio\t138-58-4441\tArmed forces training and education officer\t3\nGaytán\tMiguel\t466-25-9991\tMuseum/gallery conservator\t15\nMiranda\tUriel\t248-18-3945\tDramatherapist\t43\nVillanueva\tNelly\t113-80-1686\tPathologist\t10\nOrosco\tAlfonso\t842-56-0920\tPress sub\t32\nArreola\tAlonso\t248-73-1904\tScientist, clinical (histocompatibility and immunogenetics)\t34\nBenavídez\tAbelardo\t149-07-0781\tBiochemist, clinical\t8\nOchoa\tLeonor\t649-03-8292\tHorticulturist, amenity\t47\nZelaya\tClaudio\t627-25-9573\tEngineer, petroleum\t31\nGaitán\tEric\t493-52-3308\tEnvironmental consultant\t46\nMora\tVerónica\t601-64-3785\tArts development officer\t11\nRamón\tPatricia\t612-57-9098\tActuary\t13\nGamboa\tClara\t515-72-0861\tScientist, research (maths)\t27\nFigueroa\tHoracio\t193-08-3697\tSurveyor, minerals\t3\nRoque\tEugenio\t634-30-7451\tPrintmaker\t7\nEnríquez\tCarla\t072-27-9656\tSurgeon\t17\nSauceda\tAmelia\t609-56-2373\tAdvice worker\t29\nNoriega\tJos\t651-28-2458\tProgrammer, applications\t2\nMedina\tGregorio\t266-53-3622\tContracting civil engineer\t46\nGallegos\tLuz\t575-18-1850\tDesigner, furniture\t7\nRael\tBernabé\t226-65-6128\tCounselling psychologist\t24\nMedrano\tMaximiliano\t096-29-1552\tHigher education careers adviser\t41\nGuerra\tDulce\t627-07-7861\tYouth worker\t29\nOlmos\tSalvador\t687-80-5931\tIT sales professional\t11\nVillegas\tJulio César\t409-07-7357\tProgrammer, systems\t31\nMontemayor\tPatricio\t030-32-8967\tTax inspector\t36\nFonseca\tGenaro\t024-26-1570\tEngineer, manufacturing\t3\nTamez\tAbelardo\t335-05-6196\tOperational researcher\t31\nTerrazas\tAdriana\t521-41-3593\tFinancial manager\t35\nPuga\tEnrique\t449-82-1104\tInterior and spatial designer\t12\nFajardo\tGuadalupe\t111-95-7437\tJournalist, broadcasting\t44\nMayorga\tClaudia\t510-71-7274\tClaims inspector/assessor\t16\nArmendáriz\tHumberto\t069-34-0212\tChief of Staff\t26\nHuerta\tEugenio\t826-96-1446\tVisual merchandiser\t31\nMontenegro\tHumberto\t492-35-6594\tEngineer, technical sales\t42\nPadrón\tEduardo\t267-16-1331\tTourism officer\t21\nAcuña\tRosario\t400-15-4747\tEducation officer, community\t44\nOrtiz\tHéctor\t467-37-5167\tAir traffic controller\t45\nPulido\tAdriana\t861-32-2198\tSpecial effects artist\t13\nMorales\tMicaela\t415-94-0417\tMedical physicist\t23\nMunguía\tMicaela\t508-80-8246\tConservator, museum/gallery\t30\nAlva\tVictoria\t214-62-3749\tEngineer, energy\t13\nPulido\tJulio\t418-36-5979\tChemist, analytical\t4\nVerduzco\tSandra\t086-51-7487\tPrintmaker\t27\nMagaña\tBeatriz\t304-66-9346\tInternational aid/development worker\t20\nRodríguez\tAlberto\t519-66-7678\tChiropodist\t25\nNaranjo\tLeonor\t886-83-2083\tRunner, broadcasting/film/video\t43\nAlemán\tNadia\t385-23-9868\tPhotographer\t33\nCorral\tFrancisco Javier\t528-69-7908\tEarly years teacher\t1\nNieves\tMauro\t651-96-7961\tEconomist\t39\nElizondo\tRosa\t124-66-2839\tProduction designer, theatre/television/film\t25\nMatías\tCynthia\t106-81-7655\tChief Executive Officer\t40\nGaray\tTeresa\t121-58-1866\tMedical secretary\t40\nTorres\tHoracio\t058-86-5174\tPurchasing manager\t6\nSaavedra\tBlanca\t053-73-6765\tEditorial assistant\t45\nGil\tIvonne\t277-50-2399\tPharmacologist\t12\nHaro\tBianca\t651-72-1560\tTeacher, early years/pre\t46\nAlonzo\tAlfredo\t375-70-2512\tHigher education careers adviser\t11\nOquendo\tPatricia\t661-47-8636\tHorticulturist, amenity\t5\nAlvarado\tBerta\t709-23-4351\tSales executive\t41\nPartida\tFidel\t207-78-4914\tScientific laboratory technician\t5\nPuga\tVíctor\t187-56-8840\tMuseum/gallery exhibitions officer\t18\nBueno\tEsteban\t123-08-3966\tPublishing copy\t22\nCeballos\tRoberto\t154-86-3726\tEducation officer, community\t22\nMatías\tLucía\t446-75-3727\tGovernment social research officer\t1\nBrito\tAdalberto\t536-70-3813\tEngineering geologist\t21\nLira\tLuisa\t622-99-6547\tHospital pharmacist\t13\nRojas\tModesto\t343-88-1003\tCytogeneticist\t15\nCamacho\tErnesto\t842-51-1940\tFinancial trader\t4\nZepeda\tIsabela\t340-80-5890\tMuseum/gallery conservator\t4\nBétancourt\tFlavio\t686-64-6934\tStructural engineer\t27\nLeón\tCarmen\t608-76-0030\tClinical embryologist\t22\nEspinoza\tAsunción\t242-68-2215\tGlass blower/designer\t21\nEscalante\tVirginia\t743-02-9665\tHorticultural therapist\t8\nGarza\tClaudio\t041-54-8809\tProduct designer\t35\nConcepción\tAgustín\t726-20-9140\tPaediatric nurse\t20\nVerduzco\tÓliver\t469-74-4804\tHydrogeologist\t38\nMeza\tJuan Carlos\t517-79-9422\tEngineer, manufacturing\t5\nYbarra\tGuillermina\t090-82-2165\tChartered public finance accountant\t32\nSauceda\tOswaldo\t652-03-2949\tBanker\t36\nRodrígez\tJuana\t794-76-5527\tAccountant, chartered certified\t44\nMuñiz\tRaquel\t114-11-0496\tJournalist, magazine\t28\nArchuleta\tJudith\t351-69-0455\tFarm manager\t39\nPizarro\tBruno\t168-55-6069\tLogistics and distribution manager\t22\nLedesma\tLinda\t204-34-8012\tEngineer, chemical\t45\nQuiroz\tIrma\t842-27-5222\tChartered loss adjuster\t30\nTejada\tMarcos\t297-99-8659\tJournalist, broadcasting\t27\nMata\tErnesto\t875-55-7139\tConservation officer, nature\t15\nEstrada\tMarisol\t629-17-0295\tPrint production planner\t25\nOsorio\tGerónimo\t269-52-0226\tSales promotion account executive\t43\nde Anda\tPerla\t828-32-7867\tEngineer, control and instrumentation\t45\nTamayo\tÁngel\t829-11-9334\tHealth service manager\t14\nMontenegro\tSergio\t840-92-1561\tEnvironmental education officer\t23\nGómez\tEloy\t388-67-8880\tActor\t5\nLerma\tMinerva\t294-44-3119\tAir traffic controller\t19\nMatías\tSamuel\t896-89-8757\tMultimedia programmer\t23\nParra\tJulia\t049-85-3941\tDevelopment worker, community\t2\nVergara\tAlejandro\t204-11-0358\tField trials officer\t28\nPeres\tMaría Teresa\t772-67-1238\tConsulting civil engineer\t6\nLugo\tRodolfo\t365-21-1471\tRace relations officer\t30\nVilla\tClemente\t440-56-1762\tSport and exercise psychologist\t13\nPalomo\tEugenia\t109-87-6334\tOptometrist\t41\nAbrego\tDébora\t652-93-4009\tHealth promotion specialist\t23\nCuriel\tDulce María\t073-79-9081\tDesigner, multimedia\t15\nPonce\tEspartaco\t226-77-5583\tEngineer, petroleum\t5\nBatista\tVíctor\t033-60-1286\tRestaurant manager\t42\nMontenegro\tPatricia\t725-23-7467\tLandscape architect\t9\nSosa\tAlta  Gracia\t615-59-6828\tClinical molecular geneticist\t6\nSaucedo\tIrene\t121-11-5992\tJournalist, newspaper\t20\nEspinal\tMartha\t594-02-3790\tPetroleum engineer\t8\nEnríquez\tJesús\t456-76-3706\tOperations geologist\t16\nIglesias\tEstefanía\t688-04-2795\tMidwife\t37\nGonzález\tMartín\t593-57-0254\tProgrammer, systems\t31\nOlivárez\tJuan\t645-44-7271\tPhysicist, medical\t11\nReyes\tJuan\t884-69-6300\tData scientist\t41\nParra\tAlvaro\t105-40-7556\tCivil engineer, contracting\t20\nSosa\tAida\t464-53-5840\tRadiographer, diagnostic\t23\nÁvila\tCristobal\t839-27-6797\tEnvironmental education officer\t2\nGuerrero\tBianca\t372-99-4292\tEstate agent\t32\nMéndez\tGuillermo\t470-28-3961\tLibrarian, public\t46\nRodarte\tJonás\t064-65-1288\tPhysicist, medical\t46\nBallesteros\tIndira\t821-28-2405\tDesigner, multimedia\t8\nMascareñas\tAlejandra\t236-18-5042\tAdministrator, Civil Service\t33\nNájera\tAmelia\t380-78-5002\tSound technician, broadcasting/film/video\t9\nSegovia\tGerónimo\t245-16-2723\tEngineering geologist\t34\nIbarra\tRodrigo\t442-33-2600\tIndustrial buyer\t2\nEnríquez\tMarcela\t808-28-6258\tMedia buyer\t31\nNarváez\tOlga\t145-38-0045\tAdvertising account planner\t4\nArreola\tElvia\t484-41-2877\tPhysiotherapist\t47\nSoria\tAugusto\t821-46-6751\tLecturer, further education\t48\nde Anda\tBarbara\t291-32-1000\tConservator, museum/gallery\t34\nNieto\tGenaro\t162-32-2651\tAnimal technologist\t7\nPonce\tMaría José\t334-69-9312\tRestaurant manager\t7\nValencia\tElvira\t023-11-8172\tNurse, learning disability\t38\nBustos\tEloy\t573-63-1131\tResearch scientist (life sciences)\t39\nGaray\tDavid\t297-82-5711\tEngineer, communications\t40\nLedesma\tZoé\t625-95-0479\tLibrarian, academic\t41\nEstévez\tZacarías\t454-84-1599\tDesigner, interior/spatial\t46\nTijerina\tVirginia\t415-23-7510\tFilm/video editor\t25\nGuajardo\tRené\t709-24-6315\tProgrammer, systems\t6\nJaimes\tRolando\t183-70-9774\tClinical embryologist\t37\nGracia\tPorfirio\t888-68-7723\tHuman resources officer\t3\nSolano\tPerla\t595-93-0669\tInterior and spatial designer\t47\nMateo\tIsabel\t111-93-3612\tField seismologist\t34\nGaribay\tAraceli\t662-16-4347\tInternational aid/development worker\t34\nCuellar\tMagdalena\t826-48-0809\tPsychologist, occupational\t16\nValle\tYeni\t346-22-9768\tMusic tutor\t37\nEsquibel\tLeonardo\t498-09-8004\tIT consultant\t0\nLozada\tAlvaro\t667-16-6720\tSurveyor, hydrographic\t38\nBarela\tBerta\t430-83-3372\tCommunity education officer\t34\nNarváez\tElsa\t691-10-8050\tHorticultural consultant\t6\nRuelas\tAntonio\t210-95-3436\tInformation officer\t11\nBétancourt\tMarco Antonio\t217-37-4368\tEngineer, land\t23\nRíos\tAldo\t113-26-3972\tBroadcast journalist\t6\nSerrano\tBianca\t314-01-1102\tPrint production planner\t36\nAcosta\tJacintoJacobo\t845-61-6313\tYouth worker\t32\nMatías\tEsparta\t507-48-3841\tHigher education careers adviser\t21\nBueno\tJosé Emilio\t458-38-8105\tProduct/process development scientist\t12\nPiña\tAbraham\t591-10-8699\tTeacher, primary school\t41\nJaramillo\tRaquel\t317-40-0830\tComputer games developer\t15\nMurillo\tGloria\t173-64-0741\tSoil scientist\t18\nDuarte\tDavid\t673-30-3279\tExhibitions officer, museum/gallery\t4\nLuevano\tCynthia\t710-50-1356\tEngineer, land\t40\nRendón,Rentería\tMarisela\t395-32-7278\tMedical technical officer\t26\nSalgado\tErnesto\t486-56-3091\tGames developer\t26\nPortillo\tNorma\t114-57-6636\tProofreader\t12\nJaramillo\tGregorio\t727-38-9947\tAdministrator, education\t8\nde la Fuente\tRuby\t165-87-9675\tConservator, museum/gallery\t22\nBarreto\tLilia\t743-99-0875\tTour manager\t35\nRolón\tEsther\t756-94-6513\tPatent attorney\t19\nSanabria\tCarlos\t769-52-5580\tBest boy\t33\nCeja\tLorenzo\t094-23-9546\tCareers information officer\t35\nManzanares\tAugusto\t860-52-9526\tCeramics designer\t35\nContreras\tAntonia\t229-71-0610\tOccupational therapist\t40\nUlloa\tLiliana\t589-28-2836\tLand/geomatics surveyor\t41\nBarajas\tRenato\t577-79-6966\tTelevision production assistant\t7\nBaeza\tArturo\t585-19-8204\tMedical physicist\t40\nPizarro\tAntonia\t082-69-0699\tAdult nurse\t11\nGamboa\tEspartaco\t111-44-1126\tHerpetologist\t26\nJiménez\tGregorio\t022-97-7956\tFirefighter\t2\nPacheco\tConchita\t366-34-3242\tCounsellor\t5\nLoya\tElsa\t307-90-5964\tFurniture designer\t23\nFigueroa\tAlfonso\t084-86-3456\tInterior and spatial designer\t37\nAmaya\tMariano\t371-59-8543\tMedia planner\t48\nVera\tGregorio\t031-62-1637\tOptician, dispensing\t23\nGuajardo\tAdán\t298-52-6524\tCommunity development worker\t5\nCamacho\tDaniela\t277-81-6881\tEngineer, aeronautical\t45\nSalinas\tFrancisco\t154-82-4677\tManufacturing systems engineer\t44\nZambrano\tMartín\t097-17-8063\tProduct manager\t45\nMerino\tLiliana\t126-39-4284\tManufacturing engineer\t46\nAlonso\tAbigail\t708-40-3550\tAdvice worker\t31\nCaraballo\tPaola\t580-14-6806\tTherapist, nutritional\t42\nCotto\tCecilia\t726-04-6606\tAnalytical chemist\t5\nAbrego\tYuridia\t197-42-5854\tFirefighter\t4\nBétancourt\tNorma\t768-34-8259\tVolunteer coordinator\t0\nHernádez\tPaulina\t612-18-7871\tJournalist, broadcasting\t11\nCarrasco\tAurora\t373-01-1572\tHorticulturist, amenity\t41\nGallardo\tYuridia\t579-67-0297\tCopy\t45\nMontez\tWilfrido\t851-86-9928\tScientist, audiological\t28\nCotto\tCynthia\t300-69-9699\tDiagnostic radiographer\t9\nPartida\tNayeli\t284-20-0807\tRecords manager\t8\nGuardado\tOmar\t001-72-6631\tCustomer service manager\t38\nAlba\tCristobal\t492-52-5587\tMultimedia programmer\t43\nMolina\tRosario\t794-71-1184\tEngineer, biomedical\t18\nAnaya\tJulio César\t760-48-0330\tSales promotion account executive\t26\nMadrid\tBernabé\t324-53-3868\tPsychologist, forensic\t30\nVázquez\tFlorencia\t151-18-7450\tSocial researcher\t18\nSáenz\tEsparta\t556-04-3839\tStage manager\t26\nHernández\tAlvaro\t452-55-2465\tOutdoor activities/education manager\t4\nGriego\tAlfonso\t817-56-9577\tIllustrator\t14\nCollazo\tGerónimo\t143-37-0711\tAdministrator, Civil Service\t34\nPizarro\tNoemí\t439-98-5000\tScientist, biomedical\t15\nBenavídez\tGabriel\t663-65-7324\tCharity fundraiser\t22\nGuzmán\tLeonardo\t885-92-4427\tPatent attorney\t11\nAmaya\tAlfonso\t826-59-0742\tNetwork engineer\t12\nGalarza\tJaqueline\t185-48-7934\tCabin crew\t41\nAlejandro\tCristina\t255-96-6077\tRanger/warden\t45\nCarmona\tEvelio\t537-43-2661\tTeacher, music\t34\nCarreón\tGenaro\t127-61-3961\tBiomedical scientist\t31\nBahena\tPascual\t788-28-0960\tGeographical information systems officer\t24\nLeón\tOlivia\t237-25-7914\tConservator, furniture\t46\nBalderas\tMiguel Ángel\t579-21-6502\tScientist, audiological\t12\nVillegas\tEloy\t157-96-6559\tForensic scientist\t21\nMenchaca\tRaúl\t475-34-5986\tLexicographer\t9\nSanabria\tPablo\t552-07-7898\tAnimal nutritionist\t7\nYáñez\tEnrique\t894-02-0309\tTherapist, drama\t35\nReynoso\tNatalia\t700-31-7606\tScientist, clinical (histocompatibility and immunogenetics)\t29\nLinares\tMauro\t245-77-9286\tLand/geomatics surveyor\t2\nMata\tMario\t765-69-3888\tGeologist, engineering\t47\nEspinal\tZeferino\t383-41-9849\tProducer, radio\t8\nGaray\tGerónimo\t734-92-7035\tStage manager\t9\nHeredia\tZeferino\t329-66-4820\tData processing manager\t5\nVillalobos\tMartha\t559-55-1857\tSocial research officer, government\t36\nArredondo\tAndrés\t189-91-3511\tSound technician, broadcasting/film/video\t11\nGonzález\tAndrea\t303-68-9565\tEducation officer, museum\t47\nEsquibel\tEspartaco\t521-03-1324\tFinancial trader\t20\nZamora\tIrma\t422-03-8227\tCommunity arts worker\t29\nAbreu\tYuridia\t465-48-4759\tQuality manager\t25\nMojica\tBruno\t374-04-6818\tSales promotion account executive\t41\nLoya\tLeonel\t116-68-0655\tComputer games developer\t27\nSalas\tSandra\t525-51-9866\tScientist, physiological\t31\nTello\tÓscar\t571-66-6211\tDesigner, graphic\t21\nGodínez\tLeonardo\t196-23-3480\tClinical scientist, histocompatibility and immunogenetics\t38\nCervantes\tCristobal\t828-20-9223\tScientist, audiological\t37\nGracia\tOlivia\t404-56-4652\tSeismic interpreter\t35\nVilla\tSessa\t672-04-1762\tEnvironmental consultant\t48\nSevilla\tMicaela\t098-94-3920\tChemist, analytical\t23\nBonilla\tSessa\t112-59-9846\tTechnical sales engineer\t42\nde la O\tZacarías\t195-17-9550\tDesigner, fashion/clothing\t6\nAguilera\tLeonel\t596-72-1438\tBuilding control surveyor\t39\nMesa\tWilfrido\t551-53-8388\tCounsellor\t34\nGaona\tMaría Luisa\t729-28-1188\tGovernment social research officer\t38\nCastro\tEnrique\t838-60-2931\tEngineer, drilling\t26\nMerino\tMiguel Ángel\t417-16-5362\tGeneticist, molecular\t40\nSotelo\tJulio César\t041-62-8048\tTherapist, sports\t16\nNaranjo\tMaría Eugenia\t847-74-1631\tPublishing rights manager\t23\nUribe\tJosé Emilio\t635-93-7059\tFisheries officer\t0\nLovato\tÁngel\t579-43-9711\tChild psychotherapist\t8\nReyes\tBeatriz\t802-67-0753\tRace relations officer\t34\nCordero\tRosa\t782-45-4150\tPodiatrist\t5\nIrizarry\tCarlota\t587-65-9872\tChiropodist\t45\nAyala\tMaría\t123-01-2394\tLocal government officer\t13\nVerdugo\tCamila\t890-98-2585\tTeacher, early years/pre\t5\nDomínguez\tRosa\t187-48-5613\tTree surgeon\t7\nConcepción\tLinda\t319-60-9561\tPrintmaker\t9\nQuiñónez\tLorenzo\t782-29-5654\tJournalist, broadcasting\t16\nMendoza\tEric\t637-38-6829\tExhibitions officer, museum/gallery\t23\nRivera\tLeonel\t175-57-7040\tResearch scientist (medical)\t34\nTapia\tCamilo\t338-11-1453\tInsurance underwriter\t43\nDíaz\tDulce\t653-51-5738\tTelevision/film/video producer\t11\nUlloa\tMaría Elena\t026-07-6472\tField trials officer\t3\nIbarra\tJulia\t562-99-4971\tSales professional, IT\t48\nCasillas\tMaría Elena\t130-08-2067\tVisual merchandiser\t20\nRangel\tVirginia\t107-51-1614\tFisheries officer\t1\nEstévez\tAurora\t499-08-7644\tNurse, adult\t13\nSandoval\tSonia\t262-41-5588\tRestaurant manager\t42\nVillarreal\tJosé Eduardo\t846-29-5360\tPersonal assistant\t3\nNaranjo\tYuridia\t081-17-9343\tArchitect\t4\nRodríguez\tNicolás\t200-01-8053\tEmbryologist, clinical\t17\nCaballero\tPedro\t829-85-1095\tPsychologist, occupational\t30\nSerrano\tGerardo\t407-80-1431\tTeacher, primary school\t40\nFajardo\tSandra\t880-47-8598\tHealth and safety adviser\t47\nde la Garza\tBenjamín\t071-93-1992\tPsychotherapist, dance movement\t30\nRosales\tAsunción\t495-06-8478\tTechnical sales engineer\t1\nJuárez\tJerónimo\t192-82-5116\tInsurance underwriter\t44\nMiramontes\tFelix\t557-61-4633\tInsurance claims handler\t38\nCarrión\tEugenia\t279-44-3411\tLocation manager\t1\nGodínez\tElisa\t857-18-0155\tPsychologist, counselling\t39\nJaramillo\tClara\t240-83-0552\tIntelligence analyst\t28\nPerales\tDolores\t751-20-7892\tCommunity development worker\t33\nGarica\tCarolina\t100-30-4743\tPhytotherapist\t4\nVelásquez\tAldonza\t719-35-6021\tTeaching laboratory technician\t17\nCintrón\tCarla\t029-99-3908\tNeurosurgeon\t25\nOtero\tMónica\t266-88-4538\tChief Operating Officer\t14\nSisneros\tAna María\t473-15-0053\tBuilding services engineer\t32\nLoya\tPedro\t620-99-4278\tBuyer, industrial\t37\nMedina\tPedro\t574-62-6401\tDietitian\t26\nRoque\tFelipe\t594-41-0418\tAdvertising copywriter\t21\nParra\tJavier\t053-58-2932\tTechnical author\t25\nAlba\tEstefanía\t090-17-1647\tSurveyor, hydrographic\t20\nMunguía\tDiego\t017-43-0521\tEngineer, materials\t39\nVéliz\tLaura\t751-75-1734\tScientific laboratory technician\t32\nManzanares\tIsabela\t820-91-5067\tEngineer, aeronautical\t14\nAlvarado\tVioleta\t837-84-7281\tPublic librarian\t19\nRaya\tSalvador\t774-33-2072\tCivil engineer, contracting\t14\nViera\tGenaro\t790-77-8246\tNutritional therapist\t22\nPizarro\tLuz\t737-93-3153\tCommercial art gallery manager\t7\nCortés\tIvonne\t571-26-8708\tNurse, mental health\t22\nde la Torre\tMateo\t192-65-3216\tSales promotion account executive\t34\nÁvila\tMaximiliano\t638-82-5194\tScientist, research (life sciences)\t5\nRoybal\tJacintoJacobo\t498-05-0457\tDesigner, television/film set\t31\nBecerra\tDiego\t202-39-1029\tEngineer, water\t26\nSantiago\tSoledad\t657-38-4133\tEditorial assistant\t12\nRuelas\tMaría Teresa\t114-08-7159\tNature conservation officer\t16\nFarías\tCristian\t823-51-8422\tProduction assistant, radio\t34\nFlórez\tIvonne\t418-60-0399\tSite engineer\t45\nRubio\tMagdalena\t491-01-2332\tCharity fundraiser\t27\nGaitán\tCristina\t410-15-8233\tEngineer, building services\t6\nOlivares\tMiguel\t714-28-3131\tConservation officer, historic buildings\t41\nRubio\tEloisa\t747-57-1731\tComputer games developer\t15\nMuñoz\tMiguel Ángel\t001-08-1112\tPlanning and development surveyor\t43\nRoybal\tRicardo\t211-89-1490\tBrewing technologist\t34\nZapata\tZacarías\t403-56-8785\tNature conservation officer\t8\nQuiñones\tWendolin\t070-28-6671\tClinical embryologist\t26\nCastellanos\tJacintoJacobo\t662-42-9112\tLogistics and distribution manager\t10\nToro\tJorge Luis\t601-52-5401\tEducational psychologist\t3\nGirón\tWendolin\t591-53-0090\tPhysicist, medical\t39\nUlloa\tJoaquín\t448-07-6159\tData scientist\t44\nMiranda\tEmilia\t465-25-6564\tScientist, biomedical\t5\nJimínez\tPatricia\t457-81-0872\tPublic affairs consultant\t25\nGálvez\tSusana\t683-50-7583\tTechnical sales engineer\t12\nZavala\tLilia\t108-99-9121\tEnglish as a second language teacher\t30\nCarrión\tDulce\t762-04-2768\tOccupational hygienist\t23\nAlva\tKarinaLeticia\t710-25-6423\tScientist, clinical (histocompatibility and immunogenetics)\t24\nBueno\tSalvador\t840-15-5182\tEngineer, agricultural\t26\nAranda\tRuby\t755-58-5468\tLeisure centre manager\t28\nRegalado\tAldonza\t008-20-6173\tFurniture designer\t42\nPorras\tGonzalo\t673-46-1497\tTrade union research officer\t35\nOrta\tAngélica\t717-78-0849\tExhibitions officer, museum/gallery\t13\nMarrero\tFabiola\t043-48-8388\tDesigner, television/film set\t32\nMorales\tLeonardo\t747-99-5678\tImmigration officer\t21\nPáez\tCarla\t525-69-8160\tBroadcast presenter\t11\nCampos\tModesto\t867-88-4599\tAid worker\t47\nQuiñones\tGuillermina\t876-44-3977\tProduction manager\t43\nRosado\tAlfonso\t799-55-8587\tLearning disability nurse\t28\nQuiroz\tSusana\t078-60-1807\tClinical embryologist\t27\nGuevara\tZeferino\t830-21-8895\tGarment/textile technologist\t10\nSegura\tTania\t473-94-0212\tClinical psychologist\t1\nCaraballo\tEsther\t005-52-5860\tDancer\t13\nGrijalva\tSilvano\t203-69-1277\tGlass blower/designer\t48\nLinares\tRolando\t779-91-3572\tAdvertising copywriter\t30\nOlivárez\tJosé Luis\t349-75-4727\tData processing manager\t24\nCovarrubias\tJosé Luis\t819-17-0517\tEstate manager/land agent\t18\nColón\tDolores\t506-84-1814\tLocal government officer\t13\nNevárez\tNoelia\t006-23-3491\tTechnical brewer\t3\nLaboy\tGraciela\t435-95-4194\tJournalist, newspaper\t23\nVelásquez\tEduardo\t536-33-4016\tPublic librarian\t6\nCruz\tNelly\t504-71-2644\tEarly years teacher\t11\nLomeli\tOlga\t267-81-4348\tScientist, research (medical)\t24\nBravo\tAlma\t598-79-5299\tPsychologist, forensic\t23\nMeraz\tHéctor\t712-15-5260\tImmigration officer\t40\nMolina\tOfelia\t730-60-3348\tPsychologist, forensic\t34\nRobledo\tMicaela\t604-20-1398\tFarm manager\t39\nUlibarri\tSilvia\t475-64-7882\tMedia planner\t1\nRoybal\tCristobal\t386-70-4375\tProgrammer, systems\t30\nMolina\tIsaac\t545-50-6058\tTeacher, secondary school\t29\nEcheverría\tJaqueline\t162-62-3531\tCartographer\t3\nCenteno\tMaximiliano\t082-91-3791\tAccountant, chartered certified\t28\nQuintana\tRaquel\t162-11-8329\tVisual merchandiser\t47\nCarrillo\tAldonza\t882-59-7684\tLibrarian, public\t5\nGil\tAlejandro\t298-22-8247\tFast food restaurant manager\t44\nAlejandro\tZeferino\t530-50-5799\tAnimal technologist\t13\nAranda\tMaría José\t500-01-9291\tEngineer, mining\t14\nGálvez\tAdalberto\t709-20-2743\tScientist, marine\t36\nToro\tHumberto\t449-81-0650\tEducation officer, community\t9\nMontez\tEugenio\t566-58-1111\tLawyer\t32\nCanales\tTomás\t359-76-5717\tOutdoor activities/education manager\t26\nUrías\tAndrés\t569-69-4451\tSite engineer\t34\nCarreón\tPerla\t677-74-5674\tToxicologist\t42\nMaldonado\tIván\t436-19-6040\tFast food restaurant manager\t15\nSevilla\tPedro\t117-41-7168\tSurveyor, rural practice\t29\nEsparza\tRosario\t492-63-2645\tDance movement psychotherapist\t29\nRolón\tLeonel\t592-83-6373\tTree surgeon\t37\nSerrato\tTomás\t418-68-0928\tBuilding surveyor\t37\nMuro\tEmiliano\t848-81-3385\tAdministrator, charities/voluntary organisations\t43\nChavarría\tLuis\t615-77-2970\tChild psychotherapist\t32\nLaureano\tÓscar\t478-40-3929\tTheme park manager\t18\nMorales\tJavier\t798-90-4840\tTherapist, music\t23\nCorrales\tMariana\t302-42-6854\tInternational aid/development worker\t12\nArriaga\tNadia\t228-29-6832\tRetail buyer\t43\nOcasio\tBenjamín\t084-20-2980\tAdvice worker\t32\nAlfaro\tConchita\t016-21-0552\tAccountant, chartered\t5\nGarica\tMariano\t451-36-5213\tAdvertising account executive\t48\nQuiñónez\tAlicia\t316-98-1392\tProgramme researcher, broadcasting/film/video\t11\nOrta\tMiguel Ángel\t352-08-2757\tTeacher, English as a foreign language\t46\nGurule\tCarla\t867-91-3338\tSports therapist\t8\nOlmos\tMayte\t590-37-1363\tTherapist, drama\t31\nRoldán\tDiana\t486-05-2703\tTheatre stage manager\t5\nMadrigal\tAida\t626-04-3617\tPsychologist, counselling\t6\nTamayo\tPascual\t638-51-7320\tSurveyor, planning and development\t16\nLaureano\tJaime\t716-26-8380\tClinical molecular geneticist\t42\nEscobedo\tDiego\t864-98-1654\tRecycling officer\t38\nGalván\tClara\t231-15-3764\tSpecial effects artist\t2\nGastélum\tCésar\t568-16-1293\tMaterials engineer\t26\nArmas\tAnel\t031-86-4105\tEngineer, drilling\t41\nBarraza\tSerafín\t438-18-8546\tScientist, clinical (histocompatibility and immunogenetics)\t24\nRomero\tElsa\t053-80-1730\tTeaching laboratory technician\t37\nQuintana\tIrma\t759-07-1722\tTeacher, music\t47\nSoria\tEstela\t661-81-2792\tArmed forces training and education officer\t25\nPonce\tJuana\t171-16-5134\tRanger/warden\t43\nMojica\tMariano\t648-16-9459\tAcademic librarian\t38\nMontes\tCarla\t872-42-2213\tMedical illustrator\t19\nEscalante\tSilvia\t848-21-7982\tRetail merchandiser\t34\nUlibarri\tBernabé\t005-78-6547\tEcologist\t18\nCasillas\tInés\t860-47-1770\tArts administrator\t4\nAmador\tLorena\t098-78-8862\tMental health nurse\t34\nAdame\tLilia\t480-63-8483\tSeismic interpreter\t13\nPaz\tIgnacio\t639-77-8465\tCustomer service manager\t41\ndel Valle\tRenato\t688-98-0267\tAmbulance person\t34\ndel Río\tGraciela\t259-93-2451\tSurveyor, land/geomatics\t45\nValentín\tÁngela\t251-22-4817\tOptometrist\t30\nGalarza\tFabiola\t785-99-9931\tScience writer\t48\nRoldán\tEva\t780-30-5749\tPhysicist, medical\t45\nMacías\tMauricio\t600-35-7789\tPaediatric nurse\t36\nGuardado\tMiguel\t240-19-8167\tSurveyor, hydrographic\t37\nPulido\tBeatriz\t319-99-5769\tSet designer\t48\nTrujillo\tMauro\t505-27-6957\tCareers information officer\t2\nCortés\tElena\t752-23-9705\tFine artist\t33\nCorrea\tAurelio\t626-61-6272\tBarrister\t0\nMeléndez\tConcepción\t643-98-8186\tJournalist, magazine\t3\nTreviño\tAndrea\t534-55-4031\tIT technical support officer\t34\nJaramillo\tMariana\t676-44-9515\tFinancial risk analyst\t43\nVillaseñor\tCatalina\t472-29-7129\tVisual merchandiser\t42\nJáquez\tGeorgina\t841-43-4463\tAeronautical engineer\t38\nCardenas\tGabriel\t051-05-3227\tPlant breeder/geneticist\t20\nAbreu\tNatalia\t404-13-1350\tEngineer, energy\t16\nGuevara\tJulio\t816-94-5940\tLecturer, higher education\t21\nRivas\tNatividad\t542-77-1803\tPrint production planner\t11\nRosario\tMiriam\t562-74-6966\tTechnical author\t14\nVelásquez\tMagdalena\t274-40-9255\tAir traffic controller\t3\nCervántez\tElvira\t065-56-8132\tCareers information officer\t46\nCadena\tDavid\t639-99-3435\tTheme park manager\t10\nTello\tMario\t280-26-6063\tTechnical brewer\t42\nOrnelas\tMarisela\t603-28-9194\tConsulting civil engineer\t1\nGómez\tGonzalo\t496-86-9276\tSocial research officer, government\t4\nRamos\tFelix\t739-41-7717\tRetail buyer\t18\nEcheverría\tAndrea\t174-39-9350\tEngineer, drilling\t14\nRojas\tHomero\t770-60-2039\tEngineer, agricultural\t47\nTejeda\tSamuel\t331-11-8113\tProgramme researcher, broadcasting/film/video\t11\nArce\tCristina\t492-88-9406\tIntelligence analyst\t48\nApodaca\tZeferino\t204-76-6974\tCommercial horticulturist\t16\nGriego\tFrancisca\t148-11-9991\tDesigner, interior/spatial\t12\nAragón\tRufino\t829-25-7984\tDevelopment worker, international aid\t37\nColunga\tYolanda\t048-14-6408\tMagazine features editor\t1\nIbarra\tNoelia\t534-38-8767\tScientist, research (medical)\t37\nLucio\tEsperanza\t081-67-4861\tStage manager\t2\nEscobedo\tRosalia\t065-28-6884\tBuilding control surveyor\t18\nSarabia\tGilberto\t855-69-6633\tBiochemist, clinical\t26\nEnríquez\tVíctor\t628-82-1351\tArt gallery manager\t12\nCortez\tRenato\t450-84-1559\tTheatre manager\t25\nHinojosa\tAbril\t283-93-1916\tInsurance underwriter\t17\nViera\tPaulina\t371-79-7471\tFashion designer\t39\nMascareñas\tDarío\t857-76-9707\tAnimator\t25\nZapata\tGuillermo\t437-47-0842\tSports therapist\t37\nPuente\tMónica\t365-85-7415\tDrilling engineer\t33\nMadrid\tMaría Cristina\t557-83-3912\tEnvironmental education officer\t48\nZamudio\tGerardo\t214-78-3873\tPharmacologist\t22\nCedillo\tAriadna\t295-24-1041\tDance movement psychotherapist\t21\nMarroquín\tGonzalo\t046-94-7953\tTree surgeon\t45\nEnríquez\tJulio César\t350-31-5177\tScientist, physiological\t18\nOlivárez\tEsther\t480-01-5077\tContractor\t21\nFierro\tDalia\t376-39-3482\tElectronics engineer\t34\nBaeza\tAlejandra\t426-37-0940\tSet designer\t48\nPerales\tMarisol\t609-04-9675\tConservation officer, historic buildings\t48\nGracia\tAlicia\t113-92-5827\tHealth visitor\t5\nMascareñas\tCarolina\t085-86-0441\tFirefighter\t3\nLovato\tAbel\t663-62-4494\tSoil scientist\t28\nMiramontes\tMaximiliano\t446-97-5945\tLecturer, further education\t35\nEsquibel\tBeatriz\t135-68-9812\tConservator, museum/gallery\t32\nCaldera\tJorge\t658-29-0359\tCommunity education officer\t41\nMéndez\tTrinidad\t498-12-0138\tTeacher, special educational needs\t23\nFlores\tHilda\t542-92-9493\tMerchant navy officer\t20\nTreviño\tTrinidad\t415-85-8931\tCamera operator\t44\nSaiz\tAlfredo\t486-54-1506\tChartered public finance accountant\t27\ndel Río\tLeonor\t723-31-0115\tMuseum/gallery conservator\t44\nOcampo\tEstela\t246-19-7892\tTheatre director\t34\nEsquivel\tSofía\t757-26-6728\tPublic affairs consultant\t28\nVillalobos\tErnesto\t401-84-4770\tRetail merchandiser\t27\nMoya\tGerardo\t209-80-8748\tDesigner, furniture\t19\nMonroy\tTeresa\t222-33-4520\tEngineer, water\t45\nArias\tPerla\t628-07-3821\tProduction engineer\t35\nGirón\tLuz\t896-75-9561\tEngineer, building services\t3\nCavazos\tNoemí\t436-75-4316\tSurveyor, insurance\t7\nMontes\tCarlos\t330-84-6135\tProduction manager\t3\nJurado\tEsperanza\t237-64-5661\tBuilding surveyor\t40\nMolina\tItzel\t027-32-0993\tDealer\t19\nPeres\tAldo\t810-82-7194\tEngineering geologist\t32\nHuerta\tReynaldo\t069-07-7670\tMusician\t4\nVenegas\tGregorio\t794-80-0655\tAnimal technologist\t25\nViera\tFederico\t718-66-1622\tPrivate music teacher\t23\nMalave\tNoelia\t870-42-6037\tEngineer, civil (consulting)\t43\nMesa\tElvira\t525-16-4609\tChartered loss adjuster\t28\nAlejandro\tJerónimo\t724-70-4264\tTelevision/film/video producer\t27\nHurtado\tArmando\t347-97-3021\tSite engineer\t32\nSarabia\tPilar\t084-96-8490\tCorporate investment banker\t43\nÁvila\tLuz\t667-54-4388\tScientist, clinical (histocompatibility and immunogenetics)\t47\nArroyo\tAmalia\t319-94-9000\tEngineer, maintenance\t17\nSantillán\tAdela\t860-43-9959\tTrade union research officer\t16\nNájera\tBernardo\t174-32-2570\tIT trainer\t47\nPerea\tAlejandra\t282-61-9407\tHomeopath\t12\nCorral\tAlfredo\t375-81-8678\tSales promotion account executive\t5\nLeyva\tNadia\t052-36-2990\tBarrister's clerk\t4\nBarrientos\tZeferino\t451-44-7009\tRetail banker\t22\nCisneros\tNancy\t180-63-4502\tRural practice surveyor\t0\nYáñez\tCarmen\t780-95-9545\tMaterials engineer\t35\nMuñoz\tCristal\t068-62-7277\tTransport planner\t30\nEscalante\tCamilo\t295-43-3911\tDesigner, interior/spatial\t30\nArreola\tReina\t153-52-9169\tAdvice worker\t4\nMaya\tOctavio\t336-42-2201\tSurveyor, mining\t19\nLerma\tHelena\t198-58-1038\tMedical secretary\t46\nZúñiga\tMarcos\t409-62-2661\tRecords manager\t46\nFeliciano\tPerla\t761-66-8236\tEditor, magazine features\t24\nVásquez\tLuisa\t444-35-9510\tAdvertising account executive\t48\nHidalgo\tManuel\t046-81-8500\tProduction engineer\t44\nBecerra\tVictoria\t256-85-7181\tEngineer, technical sales\t7\nTerrazas\tCristina\t597-13-6950\tScience writer\t29\nMaldonado\tBernardo\t713-85-3295\tGeophysical data processor\t39\nBarajas\tGloria\t266-18-3562\tScientist, forensic\t24\nCervantes\tMaría Teresa\t486-75-3588\tAgricultural consultant\t39\nBarragán\tIndira\t758-79-0211\tIT sales professional\t24\nFernández\tAlfonso\t071-61-6616\tSports development officer\t43\nEscamilla\tLorena\t519-58-5771\tPrintmaker\t23\nZaragoza\tAnel\t558-18-5470\tGeologist, wellsite\t8\nMireles\tCarlota\t264-97-9753\tPolitician's assistant\t10\nTello\tEric\t243-43-2299\tTelevision/film/video producer\t30\nMondragón\tCornelio\t236-64-4437\tHorticulturist, amenity\t29\nReséndez\tLeonel\t464-97-9792\tEditor, film/video\t15\nSolano\tCitlali\t805-75-8482\tVisual merchandiser\t36\nGaray\tAlberto\t635-67-3464\tFurniture designer\t40\nBarela\tMariano\t530-07-7556\tSurgeon\t48\nNarváez\tEstela\t198-87-3788\tEducational psychologist\t48\nde la Rosa\tHumberto\t750-94-1222\tEducation officer, environmental\t20\nToledo\tHumberto\t105-18-5195\tArchaeologist\t14\nOcampo\tArmando\t626-03-9185\tGeochemist\t13\nMontañez\tMayte\t124-56-8276\tSolicitor, Scotland\t46\nTejeda\tEsperanza\t372-45-2043\tSub\t42\nPantoja\tGeorgina\t014-58-7554\tEngineer, communications\t27\nRosado\tSonia\t434-78-4830\tSecretary/administrator\t15\nTapia\tAbigail\t589-58-3253\tAccountant, chartered management\t22\nGutiérrez\tAdalberto\t867-57-7092\tPodiatrist\t25\nNúñez\tLaura\t777-98-0654\tEconomist\t17\nSuárez\tJavier\t885-94-4179\tBiomedical scientist\t33\nValdés\tAlejandro\t015-55-6711\tTeaching laboratory technician\t40\nCaldera\tVirginia\t159-10-8737\tMental health nurse\t9\nHinojosa\tYeni\t323-07-3083\tCharity fundraiser\t31\nTamayo\tMartín\t748-61-5498\tManufacturing systems engineer\t12\nLozada\tAsunción\t464-05-4884\tScientist, product/process development\t38\nRodríquez\tTeodoro\t159-91-3666\tResearch scientist (medical)\t43\nJuárez\tAsunción\t103-96-3637\tDesigner, fashion/clothing\t39\nBriseño\tCelia\t064-48-8400\tPsychologist, sport and exercise\t29\nConcepción\tNoemí\t299-66-3364\tFinancial controller\t13\nVallejo\tJuan Carlos\t293-47-3361\tRisk analyst\t11\nGuillen\tÓliver\t092-57-5322\tNurse, children's\t6\nRíos\tAdán\t036-94-6441\tEngineer, chemical\t21\nPorras\tSantiago\t854-21-0256\tDiplomatic Services operational officer\t37\nZapata\tYuridia\t324-32-5105\tTherapist, sports\t15\nPizarro\tAugusto\t644-55-5455\tShip broker\t39\nRobledo\tSerafín\t257-45-6363\tChartered certified accountant\t4\nChávez\tMateo\t112-76-6802\tEarly years teacher\t36\nTamayo\tMarcos\t772-40-6854\tSenior tax professional/tax inspector\t48\nGalarza\tJosé Luis\t177-11-9115\tRadio producer\t35\nMenéndez\tMarisela\t181-75-8700\tTechnical brewer\t28\nCarranza\tKarinaLeticia\t464-90-9931\tQuarry manager\t39\nUlloa\tLiliana\t774-74-8698\tRisk manager\t17\nEsparza\tJulia\t740-79-7782\tProbation officer\t2\nSanches\tCamila\t406-10-7113\tVideo editor\t33\nUrrutia\tAlma\t428-44-6872\tFinancial controller\t18\nBonilla\tEnrique\t399-74-2008\tRestaurant manager, fast food\t4\nRíos\tSantiago\t457-48-4521\tHigher education careers adviser\t30\nSolorzano\tAgustín\t196-02-5855\tEnglish as a second language teacher\t8\nYbarra\tMaría José\t518-54-5626\tPublishing copy\t16\nBarreto\tJuan\t063-39-7486\tRace relations officer\t43\nArriaga\tMaría Teresa\t130-08-9747\tSales promotion account executive\t11\nCarrión\tOfelia\t530-02-0025\tTEFL teacher\t25\nRomo\tLuz\t223-47-5930\tEngineer, materials\t27\nHeredia\tAlfonso\t529-61-5087\tScientist, marine\t25\nOrtiz\tLorenzo\t344-35-9859\tLocal government officer\t1\nCordero\tGilberto\t148-99-2633\tComptroller\t24\nCampos\tEugenia\t492-54-3484\tHorticultural therapist\t10\nRael\tGuillermo\t036-06-8254\tPersonal assistant\t27\nCastellanos\tDavid\t576-35-2979\tFast food restaurant manager\t26\nVenegas\tAriadna\t187-73-5037\tMechanical engineer\t36\nCarvajal\tFrida\t251-24-0718\tDesigner, industrial/product\t13\nValadez\tDaniela\t508-70-5510\tControl and instrumentation engineer\t36\nGuerrero\tMaximiliano\t153-77-9418\tOsteopath\t28\nVanegas\tCarolina\t880-56-1371\tChartered loss adjuster\t8\nArredondo\tIván\t079-50-0313\tEngineer, land\t11\nEspinal\tVíctor\t529-47-1295\tLocation manager\t1\nMojica\tFrancisco Javier\t445-03-0748\tOceanographer\t23\nde la Rosa\tOmar\t342-67-0643\tCommercial horticulturist\t46\nZepeda\tRoberto\t118-96-0124\tScientist, research (maths)\t3\nLucero\tWendolin\t410-91-0663\tAdministrator\t24\nQuintanilla\tMarisol\t497-16-0320\tPsychotherapist, child\t48\nMadera\tCatalina\t314-05-4569\tSolicitor\t9\nMarrero\tKarinaLeticia\t480-26-9265\tMining engineer\t9\nGodoy\tGraciela\t475-49-3500\tDatabase administrator\t19\nHeredia\tErnesto\t775-29-2541\tEngineer, technical sales\t4\nMarín\tBeatriz\t861-60-3297\tAssociate Professor\t48\nChávez\tJos\t116-20-2109\tFinancial planner\t2\nTirado\tJosé\t247-35-0242\tOccupational psychologist\t29\nTejada\tEstefanía\t339-49-1944\tAdvertising account executive\t45\nReynoso\tOswaldo\t481-16-5600\tAdministrator, education\t28\nMeraz\tCecilia\t267-35-9506\tHealth promotion specialist\t45\nPantoja\tElisa\t321-90-8320\tTeacher, secondary school\t3\nRubio\tMario\t478-21-5189\tAudiological scientist\t25\nQuezada\tMauro\t244-76-3419\tSales professional, IT\t22\nAlcántar\tAbel\t104-95-6935\tEngineer, technical sales\t18\nUlloa\tAsunción\t748-63-9119\tEngineer, maintenance (IT)\t10\nTirado\tAlfonso\t184-59-4300\tLecturer, higher education\t17\nPichardo\tNayeli\t705-26-0369\tChiropodist\t40\nAguilar\tPilar\t717-24-0623\tSenior tax professional/tax inspector\t24\nChapa\tJosé Emilio\t358-19-0313\tHoliday representative\t16\nVélez\tRaquel\t810-43-3509\tTherapist, art\t26\nNieto\tIsabel\t598-28-8573\tTeacher, early years/pre\t20\nTello\tKarla\t556-41-7970\tSecondary school teacher\t15\nRascón\tJos\t440-05-4196\tEditor, film/video\t14\nRomo\tDaniela\t592-37-2402\tRural practice surveyor\t5\nMalave\tMónica\t127-57-5161\tMultimedia specialist\t35\nAlmaraz\tAbril\t287-30-7107\tHaematologist\t27\nCanales\tCaridad\t069-41-9935\tLecturer, higher education\t4\nLoya\tJulio César\t569-87-0552\tTraining and development officer\t7\nOrozco\tCecilia\t077-01-4377\tPlant breeder/geneticist\t44\nValles\tFidel\t675-34-8171\tRadio producer\t20\nMurillo\tLuz\t615-18-9564\tEngineer, agricultural\t12\nPuente\tKarla\t858-54-4570\tPsychotherapist\t41\nGodínez\tAurora\t083-20-4333\tRisk analyst\t47\nde la Rosa\tBerta\t075-72-7141\tTeacher, primary school\t10\nMascareñas\tMaría Cristina\t535-98-0536\tHealth service manager\t2\nMatos\tMarco Antonio\t769-96-5959\tPilot, airline\t17\nMarrero\tVicente\t344-24-1436\tMedical illustrator\t37\nBrito\tEsteban\t622-11-2680\tArmed forces logistics/support/administrative officer\t8\nMerino\tAbigail\t882-52-3098\tImmunologist\t26\nPeña\tItzel\t069-66-8525\tResearch scientist (medical)\t15\nMartínez\tEmilia\t719-64-7356\tTeacher, special educational needs\t0\nSierra\tRaquel\t326-50-8271\tPaediatric nurse\t14\nGonzales\tOswaldo\t282-19-1700\tAnalytical chemist\t8\nOrosco\tPorfirio\t776-43-2145\tScientist, audiological\t13\nDuarte\tMaría Elena\t867-57-9753\tMedical sales representative\t28\nOrta\tDébora\t137-45-3678\tCivil engineer, consulting\t36\nOsorio\tAbigail\t740-40-4323\tResearch scientist (physical sciences)\t43\nMatías\tOlivia\t447-99-2093\tEstate manager/land agent\t27\nFernández\tOswaldo\t040-67-7312\tSport and exercise psychologist\t13\nUlibarri\tLuis Manuel\t030-44-6237\tConsulting civil engineer\t24\nSolano\tCristina\t487-06-1950\tHuman resources officer\t3\nVelasco\tJavier\t008-70-5932\tSurveyor, mining\t41\nMarroquín\tJuana\t354-48-5116\tMetallurgist\t17\nRosales\tSerafín\t819-84-2586\tGraphic designer\t7\nDávila\tAldo\t310-54-9498\tTour manager\t31\nRosario\tEloisa\t382-16-6732\tAdministrator, local government\t42\nValladares\tYeni\t012-72-3716\tDesigner, exhibition/display\t40\nFonseca\tEmiliano\t726-18-3379\tWater quality scientist\t15\nCarreón\tSocorro\t451-33-1256\tSurveyor, land/geomatics\t17\nCoronado\tTimoteo\t201-90-6794\tTransport planner\t7\nQuiñones\tGuillermina\t821-99-5689\tOccupational psychologist\t7\nContreras\tMartín\t225-07-1738\tPurchasing manager\t36\nMadrigal\tJosé Eduardo\t077-34-7178\tCommunity education officer\t19\nMontañez\tGilberto\t400-51-8586\tAir cabin crew\t6\nLovato\tRosa\t870-22-2922\tTechnical sales engineer\t46\nRaya\tDarío\t714-63-4539\tScientist, audiological\t32\nAguayo\tLuis Miguel\t190-56-8320\tTelecommunications researcher\t18\nLinares\tHermelindaHernán\t427-68-8350\tHydrographic surveyor\t34\nGuerra\tMaximiliano\t336-04-1021\tMudlogger\t42\nSegura\tJulia\t271-53-2812\tChief Strategy Officer\t30\nVerdugo\tModesto\t451-32-3380\tGovernment social research officer\t41\nAguilar\tJorge\t699-02-6633\tMusic therapist\t44\nBarragán\tMiguel Ángel\t781-64-6594\tFurther education lecturer\t12\nRivero\tAlberto\t493-82-9311\tSystems analyst\t44\nCarrero\tDolores\t797-84-2246\tArts administrator\t32\nSarabia\tRosa\t292-93-9369\tEngineer, civil (contracting)\t12\nRascón\tErnesto\t714-13-2185\tDesigner, industrial/product\t27\nBermúdez\tZeferino\t832-19-1433\tChief Executive Officer\t47\nEspinoza\tConchita\t541-01-1277\tInsurance risk surveyor\t36\nOlivárez\tTeodoro\t760-12-2340\tData scientist\t28\nSolorio\tRocío\t556-42-0208\tRadiographer, diagnostic\t18\nFeliciano\tJavier\t580-80-7550\tPsychotherapist, child\t23\nValdez\tRafaél\t481-18-0019\tEngineer, building services\t33\nMalave\tSalvador\t164-81-0207\tPsychiatric nurse\t28\nDueñas\tDiana\t025-77-7674\tPsychotherapist, child\t24\nCollado\tCristobal\t037-85-3040\tResearch scientist (physical sciences)\t2\nCarreón\tAida\t787-98-9864\tMidwife\t30\nBriones\tFrancisco Javier\t052-83-4063\tTEFL teacher\t15\nSarabia\tNancy\t119-53-6505\tChartered certified accountant\t47\nMora\tCarolina\t114-60-1023\tOceanographer\t14\nCarreón\tEsperanza\t490-77-9039\tDesigner, blown glass/stained glass\t17\nMarroquín\tRaquel\t006-88-3122\tLeisure centre manager\t6\nGil\tZacarías\t197-39-7247\tCommercial horticulturist\t6\nUreña\tEsteban\t150-39-5720\tSite engineer\t6\nVerdugo\tAurelio\t758-82-1987\tVeterinary surgeon\t31\nAcuña\tDelia\t831-74-7410\tTherapist, drama\t17\nPerea\tEugenia\t892-51-9147\tChartered certified accountant\t35\nMiramontes\tYeni\t136-60-0514\tHerpetologist\t16\nPreciado\tRenato\t576-72-4768\tRisk analyst\t15\nZepeda\tRaúl\t317-59-2115\tSenior tax professional/tax inspector\t20\nNúñez\tRuby\t326-85-8100\tEquities trader\t43\nCrespo\tMaría Eugenia\t453-71-4764\tAccountant, chartered certified\t48\nPacheco\tCristina\t396-76-7488\tFinancial trader\t43\nMuñoz\tMario\t459-71-6292\tPresenter, broadcasting\t15\nMondragón\tDalia\t816-47-7898\tEnvironmental health practitioner\t15\nMarroquín\tConchita\t690-91-0293\tInformation officer\t45\nVela\tJulia\t528-64-9146\tLibrarian, academic\t9\nRamón\tIván\t768-78-4731\tSecretary, company\t17\nGarcía\tTomás\t038-57-2246\tSales professional, IT\t47\nQuiñones\tFidel\t491-25-5344\tMarketing executive\t29\nMeléndez\tJosefina\t201-23-8853\tChartered management accountant\t19\nBermúdez\tElvira\t819-03-5567\tOceanographer\t47\nLoera\tGloria\t810-36-5415\tMedical technical officer\t43\nJáquez\tGerardo\t611-37-5072\tTrading standards officer\t36\nCalvillo\tRocío\t417-36-3227\tRunner, broadcasting/film/video\t13\nFierro\tJosefina\t522-54-1247\tPrint production planner\t24\nArriaga\tJosé Luis\t260-85-3336\tCytogeneticist\t40\nMesa\tLilia\t738-82-5088\tAnalytical chemist\t27\nEscobedo\tBeatriz\t443-76-6485\tDesigner, jewellery\t40\nPedraza\tCatalina\t197-73-0897\tEngineer, civil (consulting)\t8\nMarrero\tErnesto\t225-09-3497\tPublic affairs consultant\t37\nBernal\tLeonor\t588-62-8949\tSocial worker\t5\nAlarcón\tClemente\t301-90-4433\tChief Marketing Officer\t20\nJáquez\tItzel\t438-68-3507\tVeterinary surgeon\t41\nArchuleta\tGermán\t633-35-6911\tRural practice surveyor\t38\nCantú\tJosé Eduardo\t827-72-9372\tCivil engineer, contracting\t26\nMorales\tEmiliano\t094-26-7611\tAssociate Professor\t19\nOrtega\tGenaro\t880-07-7132\tRetail manager\t28\nCeballos\tElisa\t677-88-8775\tTherapist, drama\t16\nPiña\tJaime\t256-32-9972\tAccountant, chartered\t41\nCardenas\tAbel\t652-89-3710\tMinerals surveyor\t4\nAcosta\tEstela\t701-72-8726\tClinical cytogeneticist\t28\nMontalvo\tEspartaco\t765-94-2880\tArts administrator\t38\nGálvez\tSoledad\t303-65-0081\tFurther education lecturer\t41\nCarrasco\tIlse\t155-46-9013\tEditor, magazine features\t34\nRuelas\tRosa\t398-46-0419\tVeterinary surgeon\t18\nLimón\tMaría Elena\t336-05-5246\tFinancial planner\t37\nMesa\tIvonne\t825-12-4238\tFreight forwarder\t3\nTovar\tIsrael\t054-88-8970\tEcologist\t18\nRobles\tIván\t463-62-5945\tSolicitor\t5\nMolina\tLuz\t457-09-6873\tLeisure centre manager\t4\nAguilera\tDiego\t443-12-3456\tSet designer\t14\nCampos\tAmanda\t318-58-8311\tFinancial trader\t23\nVéliz\tEnrique\t333-89-8410\tLand\t45\nZedillo\tAdriana\t278-02-1531\tChief Operating Officer\t23\nUribe\tLaura\t567-78-8529\tOccupational therapist\t0\nPadilla\tBarbara\t198-37-5214\tMicrobiologist\t18\nPonce\tMauro\t738-72-1957\tSales promotion account executive\t21\nLedesma\tLorena\t589-03-3758\tCeramics designer\t12\nAponte\tAdalberto\t422-04-8225\tLand/geomatics surveyor\t0\nVenegas\tSerafín\t799-89-9873\tPharmacist, hospital\t4\nToro\tIsabel\t444-19-0708\tBiomedical engineer\t0\nGuerra\tMargarita\t230-73-7905\tSports therapist\t3\nVásquez\tWendolin\t458-27-3994\tAdvice worker\t30\nValdivia\tJesús\t309-75-1557\tBuilding control surveyor\t10\nCanales\tLuisa\t029-20-8088\tAdvertising copywriter\t42\nCastro\tVioleta\t243-44-6756\tResearch officer, government\t29\nFajardo\tMaría Eugenia\t314-41-0207\tBroadcast presenter\t0\nGaray\tEstefanía\t618-11-2053\tHospital doctor\t22\nValentín\tIsrael\t597-52-3992\tScientist, marine\t12\nBonilla\tGuillermo\t778-89-9118\tJournalist, newspaper\t4\nLeiva\tAlicia\t013-16-7043\tEngineer, materials\t34\nValles\tHomero\t624-85-5891\tDramatherapist\t30\nMontoya\tMercedes\t188-92-2969\tClinical scientist, histocompatibility and immunogenetics\t6\nRubio\tDiana\t335-21-0316\tField seismologist\t43\nMata\tHéctor\t778-83-6990\tJournalist, newspaper\t44\nAdame\tAgustín\t709-30-7520\tSurveyor, minerals\t41\nSotelo\tDaniel\t185-14-5946\tArt therapist\t7\nGuerra\tMaría Elena\t872-81-7952\tGaffer\t37\nChavarría\tJoaquín\t106-65-7789\tScientist, forensic\t24\nBenítez\tRodolfo\t152-52-9564\tSurveyor, building\t23\nAlonzo\tAntonio\t187-80-6438\tSports administrator\t19\nGarrido\tMartín\t162-22-5397\tPrintmaker\t39\nVázquez\tCarolina\t392-21-3434\tSales promotion account executive\t26\nCuellar\tKarla\t673-97-0600\tHydrogeologist\t13\nHolguín\tRenato\t557-55-8181\tMuseum/gallery conservator\t26\nDávila\tTrinidad\t860-50-3529\tHealth and safety adviser\t14\nAranda\tGilberto\t414-11-8636\tNurse, adult\t20\nBerríos\tMaría Luisa\t669-73-3681\tDentist\t34\nFonseca\tAlicia\t329-76-1136\tGeoscientist\t28\nZarate\tSonia\t609-29-9837\tMedical secretary\t48\nSalinas\tNoelia\t148-26-9585\tForensic psychologist\t38\nAlonso\tVictoria\t809-76-6449\tRetail merchandiser\t48\nCorrea\tFelipe\t874-90-4661\tColour technologist\t11\nPiña\tOlga\t130-95-0009\tPsychotherapist, dance movement\t27\nEcheverría\tÁngel\t596-92-6491\tTransport planner\t19\nBalderas\tMinerva\t402-94-1583\tProduction assistant, radio\t43\nMunguía\tJuan\t731-90-8039\tAnimal nutritionist\t13\nTéllez\tMauricio\t209-19-7912\tTechnical author\t2\nSalinas\tSandra\t791-11-6455\tData scientist\t34\nGaitán\tMiguel Ángel\t444-51-9200\tTraining and development officer\t9\nNava\tAdela\t221-09-3381\tSports coach\t15\nSalcedo\tAmador\t590-44-1196\tArts administrator\t43\nMarín\tGuadalupe\t711-91-7872\tSurveyor, building\t34\nVela\tEugenio\t787-10-7814\tSystems analyst\t20\nMejía\tJosé María\t111-59-7498\tEngineer, automotive\t21\nCeballos\tGonzalo\t113-05-5572\tOutdoor activities/education manager\t17\nBarela\tArturo\t604-52-6034\tPublic relations officer\t24\nEsquivel\tAlonso\t140-55-6621\tEducation officer, museum\t29\nAlba\tMaría Eugenia\t260-99-5156\tPrivate music teacher\t45\nNieto\tModesto\t100-59-4085\tPhotographer\t43\nNarváez\tTrinidad\t591-37-2245\tBiochemist, clinical\t31\nZedillo\tAlfonso\t550-66-3692\tDesigner, jewellery\t42\nTapia\tDarío\t797-14-4553\tElectrical engineer\t45\nAnaya\tJosé Emilio\t014-54-6521\tChild psychotherapist\t29\nRojo\tCésar\t562-62-7841\tFinancial planner\t20\nBarrera\tBerta\t080-40-9116\tFisheries officer\t31\nMora\tGenaro\t645-93-8380\tChartered legal executive (England and Wales)\t7\nNieves\tMarcela\t132-53-0607\tHousing manager/officer\t2\nGastélum\tAlejandra\t139-32-4822\tNurse, learning disability\t27\nToledo\tAlejandro\t020-89-8926\tTelevision production assistant\t3\nVillegas\tBarbara\t076-96-7847\tIT trainer\t8\nAguirre\tMarcos\t278-94-1258\tDesigner, exhibition/display\t40\nCedillo\tFlavio\t636-37-8897\tScientist, physiological\t24\nHernandes\tCarlota\t585-91-5333\tChartered loss adjuster\t25\nMendoza\tRosa\t875-42-8465\tAnimal technologist\t42\nBarragán\tMónica\t415-06-5508\tLand/geomatics surveyor\t29\nPuente\tEsther\t798-89-8024\tGarment/textile technologist\t24\n<!--TABLE_COMMENT-->\n<font color=red>Results are limited by 1000.</font>\n"}]},"apps":[],"jobName":"paragraph_1533562513637_696555194","id":"20180709-153428_657857411","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:08:51-0500","dateFinished":"2018-08-08T10:08:51-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:108"},{"text":"%md\n### Contar el número de elementos usando *count*\n\nLa operación `count()`, es una acción que nos permitirá contar el número de elementos en nuestro DataFrame.\n\nContemos el número de elementos que hay en nuestro DataFrame original `dataDF` y nuestro DataFrame `subDF` generado aplicando la transformación `select()`.\n\nAl aplicar `select()`, aplicamos una misma operación a todos los elementos del conjunto de datos, por lo que debemos tener el mismo número de elementos antes y después de la transformación.","user":"hduser","dateUpdated":"2018-08-06T08:36:05-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Contar el número de elementos usando <em>count</em></h3>\n<p>La operación <code>count()</code>, es una acción que nos permitirá contar el número de elementos en nuestro DataFrame.</p>\n<p>Contemos el número de elementos que hay en nuestro DataFrame original <code>dataDF</code> y nuestro DataFrame <code>subDF</code> generado aplicando la transformación <code>select()</code>.</p>\n<p>Al aplicar <code>select()</code>, aplicamos una misma operación a todos los elementos del conjunto de datos, por lo que debemos tener el mismo número de elementos antes y después de la transformación.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513639_697324692","id":"20180709-153550_199021670","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:05-0500","dateFinished":"2018-08-06T08:36:05-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109"},{"text":"%pyspark\nprint \"Elementos en dataDF:\"\nprint dataDF.count()\nprint \"Elementos en subDF:\"\nprint subDF.count()\n","user":"hduser","dateUpdated":"2018-08-08T10:08:57-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Elementos en dataDF:\n10000\nElementos en subDF:\n10000\n"}]},"apps":[],"jobName":"paragraph_1533562513639_697324692","id":"20180709-154106_1666522860","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:08:58-0500","dateFinished":"2018-08-08T10:08:59-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:110"},{"text":"%md\n### Filtrando elementos usando *filter*\n\nLa operación `filter()`, es una transformación que nos permite obtener elementos de un DataFrame que cumplen una expresión de filtrado.\n\nUsemos `filter()`, para obtener un DataFrame que contiene registros de personas menores de 18 años de edad. ","user":"hduser","dateUpdated":"2018-08-06T08:36:05-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Filtrando elementos usando <em>filter</em></h3>\n<p>La operación <code>filter()</code>, es una transformación que nos permite obtener elementos de un DataFrame que cumplen una expresión de filtrado.</p>\n<p>Usemos <code>filter()</code>, para obtener un DataFrame que contiene registros de personas menores de 18 años de edad.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513640_695400947","id":"20180709-154237_1317526112","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:05-0500","dateFinished":"2018-08-06T08:36:05-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:111"},{"text":"%pyspark\nfilteredDF = subDF.filter(subDF.edad < 18)\nfilteredDF.show(truncate=False)\nprint filteredDF.count()","user":"hduser","dateUpdated":"2018-08-08T10:09:02-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+-------------+-----------+-------------------------------------------------+----+\n|apellido |nombre       |nss        |ocupacion                                        |edad|\n+---------+-------------+-----------+-------------------------------------------------+----+\n|Frías    |Mayte        |659-40-4529|Exhibitions officer, museum/gallery              |17  |\n|Jaime    |Antonia      |810-97-0959|Barista                                          |0   |\n|Sauceda  |Nadia        |787-80-4216|Secretary/administrator                          |10  |\n|Bustos   |Martín       |846-70-9284|Astronomer                                       |2   |\n|Trujillo |Natividad    |403-06-8972|Garment/textile technologist                     |6   |\n|Rivera   |Asunción     |551-46-6107|Planning and development surveyor                |11  |\n|Lozano   |Mauricio     |721-19-1341|Journalist, newspaper                            |8   |\n|Olivera  |Salma        |324-54-3965|Geneticist, molecular                            |0   |\n|Dávila   |María Eugenia|848-18-6745|Database administrator                           |6   |\n|Vanegas  |Gilberto     |516-10-2457|Contractor                                       |11  |\n|Narváez  |Abelardo     |343-80-6261|Ceramics designer                                |13  |\n|Segura   |Ana Luisa    |363-83-5358|Horticultural consultant                         |8   |\n|Gaona    |Ignacio      |421-99-1614|Community arts worker                            |9   |\n|Osorio   |Esteban      |054-40-5322|Barista                                          |1   |\n|Verduzco |Raúl         |367-70-9003|Radio broadcast assistant                        |16  |\n|Almaraz  |Aida         |494-58-8536|Higher education lecturer                        |4   |\n|Vanegas  |Enrique      |884-57-1945|Historic buildings inspector/conservation officer|10  |\n|Valencia |Cristobal    |655-24-4124|Public house manager                             |16  |\n|Hernandes|Javier       |658-23-5755|Probation officer                                |16  |\n|Rubio    |César        |240-67-4794|Designer, graphic                                |3   |\n+---------+-------------+-----------+-------------------------------------------------+----+\nonly showing top 20 rows\n\n3581\n"}]},"apps":[],"jobName":"paragraph_1533562513641_695016198","id":"20180709-154154_1827731544","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:03-0500","dateFinished":"2018-08-08T10:09:03-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:112"},{"text":"%md\nPodemos observar que estos jovenes no han desperdiciado su tiempo y ya tienen empleos importantes.","user":"hduser","dateUpdated":"2018-08-06T08:36:06-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Podemos observar que estos jovenes no han desperdiciado su tiempo y ya tienen empleos importantes.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513642_696170445","id":"20180709-154712_123807579","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:06-0500","dateFinished":"2018-08-06T08:36:06-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:113"},{"text":"%md\n## Funciones lambda en Python y UDF (Funciones Definidas por el Usuario)\n\nPython soporta el uso de funciones anónimas, éstas son funciones cortas y no tienen nombre. Normalmente son utilizadas una sola vez en el código, por lo tanto son desechables.\n\nLas funciones lambda, no son necesarias, pero pueden ayudar a obtener código mucho más legible.\n\nUsemos una función lambda para generar un UDF. Un UDF es un envoltura que permite utilizar una función en una expresión de un DataFrame.","user":"hduser","dateUpdated":"2018-08-06T08:36:06-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Funciones lambda en Python y UDF (Funciones Definidas por el Usuario)</h2>\n<p>Python soporta el uso de funciones anónimas, éstas son funciones cortas y no tienen nombre. Normalmente son utilizadas una sola vez en el código, por lo tanto son desechables.</p>\n<p>Las funciones lambda, no son necesarias, pero pueden ayudar a obtener código mucho más legible.</p>\n<p>Usemos una función lambda para generar un UDF. Un UDF es un envoltura que permite utilizar una función en una expresión de un DataFrame.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513642_696170445","id":"20180709-155203_1801962476","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:06-0500","dateFinished":"2018-08-06T08:36:06-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:114"},{"text":"%pyspark\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import BooleanType\n\nminors = udf(lambda s: s < 18, BooleanType())\nlambdaDF = subDF.filter(minors(subDF.edad))\nlambdaDF.show()\nlambdaDF.count()","user":"hduser","dateUpdated":"2018-08-08T10:09:08-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+-------------+-----------+--------------------+----+\n| apellido|       nombre|        nss|           ocupacion|edad|\n+---------+-------------+-----------+--------------------+----+\n|    Frías|        Mayte|659-40-4529|Exhibitions offic...|  17|\n|    Jaime|      Antonia|810-97-0959|             Barista|   0|\n|  Sauceda|        Nadia|787-80-4216|Secretary/adminis...|  10|\n|   Bustos|       Martín|846-70-9284|          Astronomer|   2|\n| Trujillo|    Natividad|403-06-8972|Garment/textile t...|   6|\n|   Rivera|     Asunción|551-46-6107|Planning and deve...|  11|\n|   Lozano|     Mauricio|721-19-1341|Journalist, newsp...|   8|\n|  Olivera|        Salma|324-54-3965|Geneticist, molec...|   0|\n|   Dávila|María Eugenia|848-18-6745|Database administ...|   6|\n|  Vanegas|     Gilberto|516-10-2457|          Contractor|  11|\n|  Narváez|     Abelardo|343-80-6261|   Ceramics designer|  13|\n|   Segura|    Ana Luisa|363-83-5358|Horticultural con...|   8|\n|    Gaona|      Ignacio|421-99-1614|Community arts wo...|   9|\n|   Osorio|      Esteban|054-40-5322|             Barista|   1|\n| Verduzco|         Raúl|367-70-9003|Radio broadcast a...|  16|\n|  Almaraz|         Aida|494-58-8536|Higher education ...|   4|\n|  Vanegas|      Enrique|884-57-1945|Historic building...|  10|\n| Valencia|    Cristobal|655-24-4124|Public house manager|  16|\n|Hernandes|       Javier|658-23-5755|   Probation officer|  16|\n|    Rubio|        César|240-67-4794|   Designer, graphic|   3|\n+---------+-------------+-----------+--------------------+----+\nonly showing top 20 rows\n\n3581\n"}]},"apps":[],"jobName":"paragraph_1533562513643_695785696","id":"20180709-154626_858882552","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:08-0500","dateFinished":"2018-08-08T10:09:09-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:115"},{"text":"%md\n## Otras acciones de DataFrames\n\nVeamos algunas acciones adicionales para DataFrames:\n\n* [first()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.first)\n* [take()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.take)\n\nCuando tenemos un nuevo conjunto de datos, normalmente visualizamos algunas de las primeras entradas para tener una idea de la información disponible. En Spark, podemos hacer esto usando acciones como `first()`, `take()` y `show()`. Los elementos retornados por estas acciones dependerán de como se ha particionado el DataFrame.\n\n\nLa operación `take(n)` puede ser utilizada para obtener los primeros _n_ elementos de un DataFrame.\nLa operación `first()` retornará el primer elemento del DataFrame.\n","user":"hduser","dateUpdated":"2018-08-08T10:09:12-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Otras acciones de DataFrames</h2>\n<p>Veamos algunas acciones adicionales para DataFrames:</p>\n<ul>\n<li><a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.first\">first()</a></li>\n<li><a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.take\">take()</a></li>\n</ul>\n<p>Cuando tenemos un nuevo conjunto de datos, normalmente visualizamos algunas de las primeras entradas para tener una idea de la información disponible. En Spark, podemos hacer esto usando acciones como <code>first()</code>, <code>take()</code> y <code>show()</code>. Los elementos retornados por estas acciones dependerán de como se ha particionado el DataFrame.</p>\n<p>La operación <code>take(n)</code> puede ser utilizada para obtener los primeros <em>n</em> elementos de un DataFrame.\n<br  />La operación <code>first()</code> retornará el primer elemento del DataFrame.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513644_693861952","id":"20180709-160307_788916741","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:12-0500","dateFinished":"2018-08-08T10:09:12-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:116"},{"text":"%pyspark\nprint \"El primer elemento del DataFrame:\"\nprint filteredDF.first()\nprint \"Los primeros 5 elementos en el DataFrame:\"\nprint filteredDF.take(4)","user":"hduser","dateUpdated":"2018-08-08T10:09:16-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"El primer elemento del DataFrame:\nRow(apellido=u'Fr\\xedas', nombre=u'Mayte', nss=u'659-40-4529', ocupacion=u'Exhibitions officer, museum/gallery', edad=17)\nLos primeros 5 elementos en el DataFrame:\n[Row(apellido=u'Fr\\xedas', nombre=u'Mayte', nss=u'659-40-4529', ocupacion=u'Exhibitions officer, museum/gallery', edad=17), Row(apellido=u'Jaime', nombre=u'Antonia', nss=u'810-97-0959', ocupacion=u'Barista', edad=0), Row(apellido=u'Sauceda', nombre=u'Nadia', nss=u'787-80-4216', ocupacion=u'Secretary/administrator', edad=10), Row(apellido=u'Bustos', nombre=u'Mart\\xedn', nss=u'846-70-9284', ocupacion=u'Astronomer', edad=2)]\n"}]},"apps":[],"jobName":"paragraph_1533562513645_693477203","id":"20180709-161414_1255925910","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:16-0500","dateFinished":"2018-08-08T10:09:16-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:117"},{"text":"%md\n## Otras transformaciones de DataFrames\n\n","user":"hduser","dateUpdated":"2018-08-06T08:36:06-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Otras transformaciones de DataFrames</h2>\n"}]},"apps":[],"jobName":"paragraph_1533562513645_693477203","id":"20180709-161344_1185664047","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:06-0500","dateFinished":"2018-08-06T08:36:06-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:118"},{"text":"%md\n### Ordenamiento\n\nLa operación [`orderBy()`](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.distinct), es una transformación que permite ordenar los elementos de un DataFrame por una o más columnas especificadas.\n\nEjemplo:\n\n```\ndataDF.orderBy(dataDF['edad'])  # ordenar por edad de manera ascendente; retorna un nuevo DataFrame\ndataDF.orderBy(dataDF.apellido.desc()) # ordena de manera descendente por apellido\n```","user":"hduser","dateUpdated":"2018-08-09T10:44:34-0500","config":{"enabled":true,"tableHide":true,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Ordenamiento</h3>\n<p>La operación <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.distinct\"><code>orderBy()</code></a>, es una transformación que permite ordenar los elementos de un DataFrame por una o más columnas especificadas.</p>\n<p>Ejemplo:</p>\n<pre><code>dataDF.orderBy(dataDF['edad'])  # ordenar por edad de manera ascendente; retorna un nuevo DataFrame\ndataDF.orderBy(dataDF.apellido.desc()) # ordena de manera descendente por apellido\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1533562513646_694631449","id":"20180709-161826_1829912667","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:07-0500","dateFinished":"2018-08-06T08:36:07-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:119"},{"text":"%pyspark\n#Ordena por edad para obtener las primeras 5 personas con mayor edad\ndataDF.orderBy(dataDF.edad.desc()).show(5, truncate=False)","user":"hduser","dateUpdated":"2018-08-08T10:09:22-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+------------+-----------+-----------------------------+----+\n|apellido |nombre      |nss        |ocupacion                    |edad|\n+---------+------------+-----------+-----------------------------+----+\n|Sauceda  |Norma       |442-17-3601|Telecommunications researcher|49  |\n|Limón    |César       |308-78-4616|Politician's assistant       |49  |\n|Villareal|Citlali     |670-76-0079|Diagnostic radiographer      |49  |\n|Barragán |María Teresa|567-21-1067|Engineering geologist        |49  |\n|Cadena   |Bernabé     |331-73-2325|Engineer, materials          |49  |\n+---------+------------+-----------+-----------------------------+----+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1533562513647_694246700","id":"20180709-162112_802075929","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:22-0500","dateFinished":"2018-08-08T10:09:23-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:120"},{"text":"%md\nOrdenemos de manera ascendente para obtener los primeros 5 registros con menor edad","user":"hduser","dateUpdated":"2018-08-06T08:36:07-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Ordenemos de manera ascendente para obtener los primeros 5 registros con menor edad</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513648_704634921","id":"20180709-162337_1629047846","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:07-0500","dateFinished":"2018-08-06T08:36:07-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:121"},{"text":"%pyspark\n#Podemos especificar el nombre de la columna en la funcion orderBy\ndataDF.orderBy('edad').show(5, truncate=False)","user":"hduser","dateUpdated":"2018-08-08T10:09:26-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------------+-----------+----------------------------------+----+\n|apellido|nombre       |nss        |ocupacion                         |edad|\n+--------+-------------+-----------+----------------------------------+----+\n|Cisneros|Nancy        |180-63-4502|Rural practice surveyor           |1   |\n|Barreto |Juana        |178-60-7132|Lecturer, higher education        |1   |\n|Martínez|Emilia       |719-64-7356|Teacher, special educational needs|1   |\n|Franco  |Esparta      |032-41-0814|Sales promotion account executive |1   |\n|Ramón   |Marco Antonio|752-32-4164|Forensic psychologist             |1   |\n+--------+-------------+-----------+----------------------------------+----+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1533562513648_704634921","id":"20180709-162228_1992415725","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:26-0500","dateFinished":"2018-08-08T10:09:26-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:122"},{"text":"%md\n### *distinct* y *dropDuplicates*\nLa operación [`distinct()`](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.distinct), filtra del DataFrame registros duplicados, considerando todas las columnas. Nuestros datos, al ser generados de manera aleatoria, dificilmente tendrán registros duplicados:\n","user":"hduser","dateUpdated":"2018-08-06T08:36:07-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><em>distinct</em> y <em>dropDuplicates</em></h3>\n<p>La operación <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.distinct\"><code>distinct()</code></a>, filtra del DataFrame registros duplicados, considerando todas las columnas. Nuestros datos, al ser generados de manera aleatoria, dificilmente tendrán registros duplicados:</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513649_704250172","id":"20180709-162456_1803274802","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:07-0500","dateFinished":"2018-08-06T08:36:07-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:123"},{"text":"%pyspark\nprint dataDF.count()\nprint dataDF.distinct().count()","user":"hduser","dateUpdated":"2018-08-08T10:09:29-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"10000\n10000\n"}]},"apps":[],"jobName":"paragraph_1533562513650_705404419","id":"20180709-162433_284800715","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:29-0500","dateFinished":"2018-08-08T10:09:30-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:124"},{"text":"%md\nDemostremos `distinct()` generando un DataFrame temporal:\n","user":"hduser","dateUpdated":"2018-08-06T08:36:07-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Demostremos <code>distinct()</code> generando un DataFrame temporal:</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513651_705019670","id":"20180709-162702_207446596","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:07-0500","dateFinished":"2018-08-06T08:36:07-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:125"},{"text":"%pyspark\ntempDF = sqlContext.createDataFrame([(\"Juan\", 1), (\"Juan\", 1), (\"Ana\", 15), (\"Ana\", 12), (\"Reyna\", 5)], ('nombre', 'puntuacion'))\ntempDF.show()\ntempDF.distinct().show()","user":"hduser","dateUpdated":"2018-08-08T10:09:35-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+----------+\n|nombre|puntuacion|\n+------+----------+\n|  Juan|         1|\n|  Juan|         1|\n|   Ana|        15|\n|   Ana|        12|\n| Reyna|         5|\n+------+----------+\n\n+------+----------+\n|nombre|puntuacion|\n+------+----------+\n|   Ana|        15|\n|  Juan|         1|\n| Reyna|         5|\n|   Ana|        12|\n+------+----------+\n\n"}]},"apps":[],"jobName":"paragraph_1533562513651_705019670","id":"20180709-162645_920133764","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:35-0500","dateFinished":"2018-08-08T10:09:35-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:126"},{"text":"%md\nLa operación [`dropDuplicates()`](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.dropDuplicates), a diferencia de `distinct()`, permite especificar las columnas a comparar.\n\nProbemos `dropDuplicates()`, para eliminar entradas donde se tiene el mismo nombre y apellido (ignorando la ocupación y edad).","user":"hduser","dateUpdated":"2018-08-06T08:36:08-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>La operación <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.dropDuplicates\"><code>dropDuplicates()</code></a>, a diferencia de <code>distinct()</code>, permite especificar las columnas a comparar.</p>\n<p>Probemos <code>dropDuplicates()</code>, para eliminar entradas donde se tiene el mismo nombre y apellido (ignorando la ocupación y edad).</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513652_703095925","id":"20180709-162814_1672659146","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:08-0500","dateFinished":"2018-08-06T08:36:08-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:127"},{"text":"%pyspark\ntempDF.show()\ntempDF.dropDuplicates(['nombre']).show()","user":"hduser","dateUpdated":"2018-08-08T10:09:38-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+----------+\n|nombre|puntuacion|\n+------+----------+\n|  Juan|         1|\n|  Juan|         1|\n|   Ana|        15|\n|   Ana|        12|\n| Reyna|         5|\n+------+----------+\n\n+------+----------+\n|nombre|puntuacion|\n+------+----------+\n| Reyna|         5|\n|   Ana|        15|\n|  Juan|         1|\n+------+----------+\n\n"}]},"apps":[],"jobName":"paragraph_1533562513652_703095925","id":"20180709-162746_1254734850","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:39-0500","dateFinished":"2018-08-08T10:09:40-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:128"},{"text":"%md\n### *drop*\n\nLa operación [`drop()`](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.drop), permite eliminar columnas de un DataFrame.","user":"hduser","dateUpdated":"2018-08-06T08:36:08-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><em>drop</em></h3>\n<p>La operación <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.drop\"><code>drop()</code></a>, permite eliminar columnas de un DataFrame.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513653_702711176","id":"20180709-163109_2126032624","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:08-0500","dateFinished":"2018-08-06T08:36:08-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:129"},{"text":"%pyspark\ndataDF.drop('ocupacion').drop('edad').show()","user":"hduser","dateUpdated":"2018-08-08T10:09:43-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----------------+-----------+\n|apellido|          nombre|        nss|\n+--------+----------------+-----------+\n|  Correa|         Gerardo|058-18-3654|\n| Carreón|       Alejandro|262-60-4012|\n|  Valdés|HermelindaHernán|103-16-2343|\n|   Muñiz|           Pilar|505-44-2197|\n| Collado|           Pablo|382-11-7793|\n|   Frías|           Mayte|659-40-4529|\n|   Jaime|         Antonia|810-97-0959|\n|Olivárez|    Alta  Gracia|182-27-5288|\n|  Franco|        Angélica|172-92-5397|\n| Sauceda|           Nadia|787-80-4216|\n|  Molina|          Camila|731-90-2815|\n| Botello|           Itzel|752-30-6554|\n|  Fierro|         Esteban|194-03-8285|\n| Olivera|         Armando|041-23-3263|\n| Guevara|         Abigail|203-80-6159|\n| Barajas|          Anabel|264-73-2981|\n|  Bustos|          Martín|846-70-9284|\n| Sauceda|          Sandra|610-96-7803|\n|Tijerina|          Blanca|644-32-7297|\n|  Orozco|         Eduardo|009-56-7562|\n+--------+----------------+-----------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1533562513653_702711176","id":"20180709-163031_1816656106","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:43-0500","dateFinished":"2018-08-08T10:09:43-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:130"},{"text":"%md\n### *groupBy*\n\nLa operación [`groupBy()`](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.groupBy), es una de las transformaciones más útiles. Ésta permite realizar operaciones de agregación en el DataFrame.\n\n`groupBy()`, no retorna un DataFrame, sino un objeto [GroupedData](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.GroupedData), que contiene varias funciones de agregación.\n\nAlgunas funciones de agregación son:\n\n* [count()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.GroupedData.count)\n* [sum()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.GroupedData.sum) \n* [max()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.GroupedData.max)\n* [avg()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.GroupedData.avg)\n\n\nLas funciones de agregación retornarán un DataFrame con una nueva columna.\n","user":"hduser","dateUpdated":"2018-08-06T08:36:08-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><em>groupBy</em></h3>\n<p>La operación <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.groupBy\"><code>groupBy()</code></a>, es una de las transformaciones más útiles. Ésta permite realizar operaciones de agregación en el DataFrame.</p>\n<p><code>groupBy()</code>, no retorna un DataFrame, sino un objeto <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.GroupedData\">GroupedData</a>, que contiene varias funciones de agregación.</p>\n<p>Algunas funciones de agregación son:</p>\n<ul>\n<li><a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.GroupedData.count\">count()</a></li>\n<li><a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.GroupedData.sum\">sum()</a></li>\n<li><a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.GroupedData.max\">max()</a></li>\n<li><a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.GroupedData.avg\">avg()</a></li>\n</ul>\n<p>Las funciones de agregación retornarán un DataFrame con una nueva columna.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513654_703865423","id":"20180709-163247_112666260","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:08-0500","dateFinished":"2018-08-06T08:36:08-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:131"},{"text":"%pyspark\n#agrupar por ocupacion y contar\ndataDF.groupBy('ocupacion').count().show(truncate=False)","user":"hduser","dateUpdated":"2018-08-08T10:09:47-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------------------------------+-----+\n|ocupacion                              |count|\n+---------------------------------------+-----+\n|Retail merchandiser                    |20   |\n|Engineer, aeronautical                 |18   |\n|Designer, ceramics/pottery             |17   |\n|Catering manager                       |15   |\n|Librarian, academic                    |18   |\n|Diplomatic Services operational officer|13   |\n|Patent examiner                        |11   |\n|English as a second language teacher   |18   |\n|Primary school teacher                 |11   |\n|Early years teacher                    |16   |\n|Occupational hygienist                 |13   |\n|Clinical molecular geneticist          |16   |\n|Control and instrumentation engineer   |23   |\n|Estate agent                           |11   |\n|Art therapist                          |20   |\n|Transport planner                      |14   |\n|Applications developer                 |17   |\n|Adult nurse                            |18   |\n|Stage manager                          |20   |\n|Conservator, furniture                 |6    |\n+---------------------------------------+-----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1533562513654_703865423","id":"20180709-163215_961372841","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:47-0500","dateFinished":"2018-08-08T10:09:47-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:132"},{"text":"%pyspark\n#agregación para calcular la edad promedio\ndataDF.groupBy().avg('edad').show(truncate=False)","user":"hduser","dateUpdated":"2018-08-08T10:09:52-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+\n|avg(edad)|\n+---------+\n|25.4069  |\n+---------+\n\n"}]},"apps":[],"jobName":"paragraph_1533562513655_703480674","id":"20180709-163651_1971599593","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:09:52-0500","dateFinished":"2018-08-08T10:09:52-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:133"},{"text":"%pyspark\n#Funciones de agregacion para calcular la edad maxima y minima\nprint \"Edad maxima en el conjunto de datos: {0}\".format(dataDF.groupBy().max('edad').first()[0])\nprint \"Edad minima en el conjunto de datos: {0}\".format(dataDF.groupBy().min('edad').first()[0])","user":"hduser","dateUpdated":"2018-08-06T08:36:08-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-5518939441749542066.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-5518939441749542066.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'dataDF' is not defined\n\n"}]},"apps":[],"jobName":"paragraph_1533562513655_703480674","id":"20180709-163810_622170465","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:09-0500","dateFinished":"2018-08-06T08:36:09-0500","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:134"},{"text":"%md\n### *sample*\n\nPodemos utilizar [`sample()`](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.sample), para obtener un DataFrame que contiene una muestra aleatoria de los elementos del conjunto de datos.\n\nLa operación `sample()`, puede recibir el parámetro `withReplacement`, para especificar si la muestra puede repetir elementos (muestreo con/sin reemplazo). El parámetro `fraction`, se utiliza para definir la fracción de elementos en el conjunto de datos que se debe regresar (Por ejemplo, `fraction=0.20`, retornará el 20% de elementos en el DataFrame). También puedes definir el parámetro `seed` para reproducir la muestra en diferentes ejecuciones.\n","user":"hduser","dateUpdated":"2018-08-06T08:36:09-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3><em>sample</em></h3>\n<p>Podemos utilizar <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.sample\"><code>sample()</code></a>, para obtener un DataFrame que contiene una muestra aleatoria de los elementos del conjunto de datos.</p>\n<p>La operación <code>sample()</code>, puede recibir el parámetro <code>withReplacement</code>, para especificar si la muestra puede repetir elementos (muestreo con/sin reemplazo). El parámetro <code>fraction</code>, se utiliza para definir la fracción de elementos en el conjunto de datos que se debe regresar (Por ejemplo, <code>fraction=0.20</code>, retornará el 20% de elementos en el DataFrame). También puedes definir el parámetro <code>seed</code> para reproducir la muestra en diferentes ejecuciones.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513656_701556930","id":"20180709-163949_1485382391","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:09-0500","dateFinished":"2018-08-06T08:36:09-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:135"},{"text":"%pyspark\nsampledDF = dataDF.sample(withReplacement=False, fraction=0.10)\nprint sampledDF.count()\nsampledDF.show()","user":"hduser","dateUpdated":"2018-08-08T10:10:00-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1009\n+---------+---------+-----------+--------------------+----+\n| apellido|   nombre|        nss|           ocupacion|edad|\n+---------+---------+-----------+--------------------+----+\n|  Botello|    Itzel|752-30-6554|          Orthoptist|  47|\n|  Narváez| Abelardo|343-80-6261|   Ceramics designer|  14|\n|   Segura|Ana Luisa|363-83-5358|Horticultural con...|   9|\n| Verduzco|     Raúl|367-70-9003|Radio broadcast a...|  17|\n| Gallegos|     Eloy|205-43-9487|Exhibitions offic...|  35|\n|  Pantoja|   Noelia|508-92-5295|   Food technologist|  13|\n|    Cabán|  Cynthia|612-26-5209|       Meteorologist|  45|\n|   Malave|    Linda|714-87-5335|   Medical physicist|  12|\n|  Camacho|Francisca|873-85-4598|Scientist, audiol...|  43|\n|    Lerma| Zeferino|374-87-4372|  Editor, film/video|  19|\n| Alcántar|   Gabino|743-51-7362|Engineer, automotive|  38|\n|  Padilla|   Amelia|280-15-8468|Race relations of...|  10|\n|  Almonte|     Raúl|351-77-5855| Call centre manager|  10|\n| Quiñónez|   Blanca|518-37-1087|     Patent examiner|  47|\n|    Adame|    Adela|179-52-6686|    Heritage manager|  44|\n|     Luna|   Elvira|690-11-8458|       IT consultant|  17|\n|Villareal|    Mayte|404-17-0084|       Herpetologist|   7|\n|    Otero| Cristina|133-42-1593|       Hotel manager|  21|\n|   Medina| Gregorio|266-53-3622|Contracting civil...|  47|\n|     Puga|  Enrique|449-82-1104|Interior and spat...|  13|\n+---------+---------+-----------+--------------------+----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1533562513656_701556930","id":"20180709-163947_1099532174","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:10:00-0500","dateFinished":"2018-08-08T10:10:00-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:136"},{"text":"%pyspark\nprint dataDF.sample(withReplacement=False, fraction=0.05).count()","user":"hduser","dateUpdated":"2018-08-08T10:10:04-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"510\n"}]},"apps":[],"jobName":"paragraph_1533562513657_701172181","id":"20180709-163933_709085795","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:10:04-0500","dateFinished":"2018-08-08T10:10:05-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:137"},{"text":"%md\n## Poniendo información en memoria\n\nSpark permite mantener el contenido de DataFrames en memoria. Mantener DataFrames en memoria permite a Spark acceder de manera más rápida a los datos. La memoria, al ser limitada, es un recurso que debe utilizarse de manera eficiente. Si Spark tiene demasiadas particiones en memoria, éste eliminará particiones automáticamente para poder almacenar nuevas particiones. Las particiones eliminadas deberán ser recreadas si son referenciadas más adelante (afectando la eficiencia).\n\nSi planeas utilizar un DataFrame múltiples ocaciones, deberías ponerlo en memoria. Puedes usar la operación `cache()`, para mantener a un DataFrame en memoria. Una acción será necesaria para que los elementos se pongan en memoria (`cache()` es una operación que se evalua de manera pasiva).\n\nUna vez que el DataFrame se encuentra en memoria, Spark accederá a los datos en memoria, en vez de computarlos desde el DataFrame original.","user":"hduser","dateUpdated":"2018-08-06T08:36:09-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Poniendo información en memoria</h2>\n<p>Spark permite mantener el contenido de DataFrames en memoria. Mantener DataFrames en memoria permite a Spark acceder de manera más rápida a los datos. La memoria, al ser limitada, es un recurso que debe utilizarse de manera eficiente. Si Spark tiene demasiadas particiones en memoria, éste eliminará particiones automáticamente para poder almacenar nuevas particiones. Las particiones eliminadas deberán ser recreadas si son referenciadas más adelante (afectando la eficiencia).</p>\n<p>Si planeas utilizar un DataFrame múltiples ocaciones, deberías ponerlo en memoria. Puedes usar la operación <code>cache()</code>, para mantener a un DataFrame en memoria. Una acción será necesaria para que los elementos se pongan en memoria (<code>cache()</code> es una operación que se evalua de manera pasiva).</p>\n<p>Una vez que el DataFrame se encuentra en memoria, Spark accederá a los datos en memoria, en vez de computarlos desde el DataFrame original.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513658_702326427","id":"20180709-164441_265972254","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:09-0500","dateFinished":"2018-08-06T08:36:09-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:138"},{"text":"%pyspark\n# Poner el DataFrame en memoria (pasivo)\nfilteredDF.cache()\n# Realizar una accion\nprint filteredDF.count()\n# Comprobar si el DataFrame esta en memoria\nprint filteredDF.is_cached\n","user":"hduser","dateUpdated":"2018-08-08T10:10:10-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"3581\nTrue\n"}]},"apps":[],"jobName":"paragraph_1533562513658_702326427","id":"20180709-165336_217888820","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:10:10-0500","dateFinished":"2018-08-08T10:10:11-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:139"},{"text":"%md\n### Eliminar datos de memoria y opciones de almacenamiento\n\nSpark realiza de manera automática el manejo de particiones en memoria. Si las particiones utilizan más memoria que la disponible, Spark, por defecto, eliminará las particiones con mayor antiguedad para tener espacio para nuevas particiones. De manera opcional, puedes usar la operación `unpersist()` para eliminar de la memoria las particiones de un DataFrame. Esto es útil cuando sabes que no utilizarás nuevamente al DataFrame.\n\nPor otro lado, Spark provee otras opciones avanzadas para el almacenamiento en memoria. Por ejemplo, Spark puede almacenar particiones adicionales en disco cuando no existe memoria suficiente. Puedes usar la operación [persist()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.persist) en conjunto con objetos [StorageLevel](http://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.StorageLevel) para especificar el método de almacenamiento de tu preferencia.\n","user":"hduser","dateUpdated":"2018-08-06T08:36:09-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Eliminar datos de memoria y opciones de almacenamiento</h3>\n<p>Spark realiza de manera automática el manejo de particiones en memoria. Si las particiones utilizan más memoria que la disponible, Spark, por defecto, eliminará las particiones con mayor antiguedad para tener espacio para nuevas particiones. De manera opcional, puedes usar la operación <code>unpersist()</code> para eliminar de la memoria las particiones de un DataFrame. Esto es útil cuando sabes que no utilizarás nuevamente al DataFrame.</p>\n<p>Por otro lado, Spark provee otras opciones avanzadas para el almacenamiento en memoria. Por ejemplo, Spark puede almacenar particiones adicionales en disco cuando no existe memoria suficiente. Puedes usar la operación <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.persist\">persist()</a> en conjunto con objetos <a href=\"http://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.StorageLevel\">StorageLevel</a> para especificar el método de almacenamiento de tu preferencia.</p>\n"}]},"apps":[],"jobName":"paragraph_1533562513659_701941678","id":"20180709-165349_1021123599","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:09-0500","dateFinished":"2018-08-06T08:36:09-0500","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:140"},{"text":"%pyspark\n# Podemos eliminar el DataFrame de memoria si ya no lo utilizaremos\nfilteredDF.unpersist()\n# Comprobar\nprint filteredDF.is_cached","user":"hduser","dateUpdated":"2018-08-08T10:10:15-0500","config":{"enabled":true,"editorMode":"ace/mode/python","results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorHide":false,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"False\n"}]},"apps":[],"jobName":"paragraph_1533562513659_701941678","id":"20180709-170109_659433494","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-08T10:10:15-0500","dateFinished":"2018-08-08T10:10:15-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:141"},{"text":"%md\n# Felicidades!, finalizaste esta notebook.","user":"hduser","dateUpdated":"2018-08-06T08:36:10-0500","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"fontSize":9,"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Felicidades!, finalizaste esta notebook.</h1>\n"}]},"apps":[],"jobName":"paragraph_1533562513660_700017934","id":"20180709-170229_455207078","dateCreated":"2018-08-06T08:35:13-0500","dateStarted":"2018-08-06T08:36:10-0500","dateFinished":"2018-08-06T08:36:10-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:142"},{"text":"%md\n","user":"hduser","dateUpdated":"2018-08-06T08:36:10-0500","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1533562570019_-2107217310","id":"20180806-083610_1004678083","dateCreated":"2018-08-06T08:36:10-0500","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:143"}],"name":"JSGP/Practicas/1-Introduccion_Spark","id":"2DNDVHS93","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}