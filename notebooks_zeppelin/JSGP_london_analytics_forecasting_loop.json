{"paragraphs":[{"text":"%md\n## Time Series Forecasting (FireTS)","user":"hduser","dateUpdated":"2019-02-03T23:19:21-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Time Series Forecasting (FireTS)</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1549257561475_722344621","id":"20190130-104551_1955889085","dateCreated":"2019-02-03T23:19:21-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:55"},{"text":"%pyspark\nsc.addFile(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/utils/fireTS/core.py\")\nsc.addFile(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/utils/fireTS/utils.py\")\nsc.addFile(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/utils/fireTS/models.py\")\n\nimport utils\nimport core\nimport models\nfrom models import NARX, DirectAutoRegressor\nimport pandas as pd\nimport os\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport re\nimport matplotlib.dates as mdates\nfrom pyspark.ml.evaluation import RegressionEvaluator","user":"hduser","dateUpdated":"2019-02-03T23:19:21-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1549257561477_-698077163","id":"20190130-104538_1867821199","dateCreated":"2019-02-03T23:19:21-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:56"},{"text":"%pyspark\n\n#Select category to forecast\ncats=[1,2,3]\n\n# Number of experiments to run\nn_exp=10\n\n# Percentaje of data used to train\nperc=0.80","user":"hduser","dateUpdated":"2019-02-03T23:47:01-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549257561479_1062357570","id":"20190203-231322_1739126889","dateCreated":"2019-02-03T23:19:21-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:57"},{"text":"%pyspark\nfor category in cats:\n    \n    print(\"\\n\"+category)\n    #From dataframe generated at analytics_data notebook\n\tdata0=cat_weather_1h.filter(col(\"CAT\")==category)\n    data1=data0.toPandas()\n    data = data1.set_index('TIMESTAMP')\n    data.index = pd.to_datetime(data.index)\n    data=data.sort_values(by=['CAT', \"TIMESTAMP\"])\n    porc_train=int(perc*len(data))\n    #can be e_sum or e_avg\n    ytrain = data['e_sum'].iloc[:porc_train]\n    Xtrain = data.loc[:, ['TEMPERATURE', \"HD\"]].iloc[:porc_train, :]\n\n    ytest = data['ENERGY'].iloc[porc_train:-1]\n    Xtest = data.loc[:, ['TEMPERATURE', \"HD\"]].iloc[porc_train:-1, :]\n\t\t\n\t# NARX with Random Forest and grid seach for hyperparameter tuning\n\tr2_win_narx=0\n\tmodel_win_narx=NARX(RandomForestRegressor(n_estimators=15), auto_order=24, exog_order=[1,1], exog_delay=[1,1])\n\n\tfor i in range(n_exp):\n\t\t\n\t\tnarx_mdl = NARX(RandomForestRegressor(n_estimators=15), auto_order=24, exog_order=[1,1], exog_delay=[1,1])\n\t\tpara_grid = {'n_estimators': [1, 5, 10, 20]}\n\t\tnarx_mdl.grid_search(Xtrain, ytrain, para_grid, verbose=1)\n\t\tnarx_mdl.fit(Xtrain, ytrain)\n\t\typred = narx_mdl.predict(Xtest, ytest, step=1)\n\t\typred = pd.Series(ypred, index=ytest.index)\n\n\t\tresults=pd.DataFrame({'TIMESTAMP':ypred.index, 'prediction':ypred.values, 'label':ytest.values})\n\t\tresults_df=spark.createDataFrame(results)  \n\t\tresults_df=results_df.filter(~(isnan(results_df[\"prediction\"])))\n\t\tevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"r2\")\n\t\tr2 = evaluator.evaluate(results_df)\n\t\t#print(\"Run %d - R2 = %f\" % (i, r2))\n\t\t\n\t\tif r2>r2_win_narx:\n\t\t\tr2_win_narx=r2\n\t\t\tmodel_win_narx=narx_mdl\n\t\t\ty_pred_win=ypred\n\t\t\twinner_exp=i\n\t\t\tresults_win_narx=results\n\t\t\tresults_win_narx_df=results_df\n\n\tprint(\"\\nBest model for NARX found at experiment %d\" %winner_exp)\n\tevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"rmse\")\n\trmse = evaluator.evaluate(results_win_narx_df)\n\tprint(\"Root Mean Squared Error (RMSE) on test data = %g\" % rmse)\n\n\tevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"mse\")\n\tmse = evaluator.evaluate(results_win_narx_df)\n\tprint(\"Mean Squared Error (MSE) on test data = %g\" % mse)\n\n\tevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"mae\")\n\tmae = evaluator.evaluate(results_win_narx_df)\n\tprint(\"Mean Absolute Error (MAE) on test data = %g\" % mae)\n\n\tevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"r2\")\n\tr2 = evaluator.evaluate(results_win_narx_df)\n\tprint(\"R2 coefficient (R2) on test data = %g\" % r2)\n\n\tresults_narx=results_win_narx_df.withColumn(\"R2\",r2_win_narx)\n\tresults_narx=results_narx.select(row_number().over(Window().orderBy(\"TIMESTAMP\")).alias(\"ID\"), col(\"*\"))\n\tresults_narx.write.format(\"com.databricks.spark.csv\").option(\"header\", \"true\").save(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/analytics/results_narx_cat\"+category+\".csv\")\n\n\n\n\t# Direct Auto Regressor with Random Forest and grid search for hyperparameter tuning\n\tr2_win_dar=0\n\tmodel_win_dar=DirectAutoRegressor(RandomForestRegressor(n_estimators=15), auto_order=24, exog_order=[1,1], exog_delay=[1,1], pred_step=1)\n\n\tfor i in range(n_exp):\n\t\t\n\t\t\n\t\tdar_mdl = DirectAutoRegressor(RandomForestRegressor(n_estimators=15), auto_order=24, exog_order=[1,1], exog_delay=[1,1], pred_step=1)\n\t\tpara_grid = {'n_estimators': [1, 5, 10, 20]}\n\t\tdar_mdl.grid_search(Xtrain, ytrain, para_grid, verbose=0)\n\t\tdar_mdl.fit(Xtrain, ytrain)\n\t\typred = dar_mdl.predict(Xtest, ytest)\n\t\typred = pd.Series(ypred, index=ytest.index)\n\n\t\t\n\t\tresults=pd.DataFrame({'TIMESTAMP':ypred.index, 'prediction':ypred.values, 'label':ytest.values})\n\t\tresults_df=spark.createDataFrame(results)  \n\t\tresults_df=results_df.filter(~(isnan(results_df[\"prediction\"])))\n\t\tevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"r2\")\n\t\tr2 = evaluator.evaluate(results_df)\n\t\t#print(\"Run %d - R2 = %f\" % (i, r2))\n\t\t\n\t\tif r2>r2_win_dar:\n\t\t\tr2_win_dar=r2\n\t\t\tmodel_win_dar=dar_mdl\n\t\t\ty_pred_win=ypred\n\t\t\twinner_exp=i\n\t\t\tresults_win_dar=results\n\t\t\tresults_win_dar_df=results_df\n\n\tprint(\"\\nBest model for DAR found at experiment %d\" %winner_exp)\n\tevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"rmse\")\n\trmse = evaluator.evaluate(results_win_dar_df)\n\tprint(\"Root Mean Squared Error (RMSE) on test data = %g\" % rmse)\n\n\tevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"mse\")\n\tmse = evaluator.evaluate(results_win_dar_df)\n\tprint(\"Mean Squared Error (MSE) on test data = %g\" % mse)\n\n\tevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"mae\")\n\tmae = evaluator.evaluate(results_win_dar_df)\n\tprint(\"Mean Absolute Error (MAE) on test data = %g\" % mae)\n\n\tevaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"r2\")\n\tr2 = evaluator.evaluate(results_win_dar_df)\n\tprint(\"R2 coefficient (R2) on test data = %g\" % r2)\n\n\tresults_dar=results_win_dar_df.withColumn(\"R2\",r2_win_dar)\n\tresults_dar=results_dar.select(row_number().over(Window().orderBy(\"TIMESTAMP\")).alias(\"ID\"), col(\"*\"))\n\tresults_dar.write.format(\"com.databricks.spark.csv\").option(\"header\", \"true\").save(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/analytics/results_dar_cat\"+category+\".csv\")\n","user":"hduser","dateUpdated":"2019-02-03T23:48:09-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549259193556_-1638101473","id":"20190203-234633_77322638","dateCreated":"2019-02-03T23:46:33-0600","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:58"},{"text":"%pyspark\n","user":"hduser","dateUpdated":"2019-02-03T23:19:21-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549257561502_324251017","id":"20190130-124000_1598013172","dateCreated":"2019-02-03T23:19:21-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:59"}],"name":"JSGP/london/analytics/forecasting_loop","id":"2E255DNW4","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}