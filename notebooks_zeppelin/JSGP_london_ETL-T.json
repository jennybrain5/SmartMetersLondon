{"paragraphs":[{"text":"%md\n# **ETL - TRANSFORMATION**\n\nThis notebook takes data from *ETL - EXTRACTION* notebook and performs all transformation needed. Please run [ETL - EXTRACTION](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ) notebook first. Final processed dataframes are: \n\n1. uk_hd\n2. acorn_cats\n3. acorn_groups\n2. information_households\n3. weather_daily_darksky\n4. weather_hourly_darksky\n5. hh_ts\n6. hour_ts\n7. day_ts\n8. month_ts\n9. hh_df\n10. hour_df\n11. day_df\n9. tariff_val\n10. meters_db","user":"hduser","dateUpdated":"2019-01-30T14:15:01-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1><strong>ETL - TRANSFORMATION</strong></h1>\n<p>This notebook takes data from <em>ETL - EXTRACTION</em> notebook and performs all transformation needed. Please run <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">ETL - EXTRACTION</a> notebook first. Final processed dataframes are: </p>\n<ol>\n  <li>uk_hd</li>\n  <li>acorn_cats</li>\n  <li>acorn_groups</li>\n  <li>information_households</li>\n  <li>weather_daily_darksky</li>\n  <li>weather_hourly_darksky</li>\n  <li>hh_ts</li>\n  <li>hour_ts</li>\n  <li>day_ts</li>\n  <li>month_ts</li>\n  <li>hh_df</li>\n  <li>hour_df</li>\n  <li>day_df</li>\n  <li>tariff_val</li>\n  <li>meters_db</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1541621231798_-1815289426","id":"20181107-135809_84367222","dateCreated":"2018-11-07T14:07:11-0600","dateStarted":"2019-01-30T14:15:01-0600","dateFinished":"2019-01-30T14:15:01-0600","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:53"},{"text":"%md\n### Imports and Basic Functions\n\nImport all needed libraries. Some pre-defined variables and functions are:\n\n1. test: How many of 112 blocks you need to dismiss for tests. Test=0 means you consider all 112 blocks in data processing\n2. count_null(col_name): Count null values for a column\n3. null_to_zero(dataframe, display): Replace null values from \"dataframe\" to zero (integer). If Display is true, shows column counts for null values before and after this function\n4. get_df_name(name): Return a dataframe with name= _name_ string","user":"hduser","dateUpdated":"2019-01-30T14:15:01-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Imports and Basic Functions</h3>\n<p>Import all needed libraries. Some pre-defined variables and functions are:</p>\n<ol>\n  <li>test: How many of 112 blocks you need to dismiss for tests. Test=0 means you consider all 112 blocks in data processing</li>\n  <li>count_null(col_name): Count null values for a column</li>\n  <li>null_to_zero(dataframe, display): Replace null values from &ldquo;dataframe&rdquo; to zero (integer). If Display is true, shows column counts for null values before and after this function</li>\n  <li>get_df_name(name): Return a dataframe with name= <em>name</em> string</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1543427714631_486269030","id":"20181128-115514_2019636023","dateCreated":"2018-11-28T11:55:14-0600","dateStarted":"2019-01-30T14:15:01-0600","dateFinished":"2019-01-30T14:15:01-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:54"},{"text":"%pyspark\nfrom pyspark.sql.types import StructType\nfrom pyspark.sql.types import StructField\nfrom pyspark.sql import functions as sqlFunctions\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.functions import unix_timestamp,from_unixtime, date_format\nfrom pyspark.sql.functions import when, col\nfrom pyspark.sql.functions import monotonically_increasing_id\nfrom pyspark.sql.types import DateType\nfrom datetime import datetime\nimport subprocess\n\ngbl = globals()\n#How many of 112 blocks you need to dismiss for tests. Test=0 means you consider all 112 blocks in data processing\ntest=0\n\n# Count null values for a column\ndef count_null(col_name):\n    return sum(col(col_name).isNull().cast('integer')).alias(col_name)\n\n# Replace null values from \"dataframe\" to zero (integer)\n# display = true for showing column counts for null values before and after this function\ndef null_to_zero(dataframe, display):\n    bad_rows=dataframe.select([count(when(col(c).isNull(), c)).alias(c) for c in dataframe.columns])\n    \n    exprs = []\n    for col_name in bad_rows.columns:\n        if(bad_rows.groupBy().agg(sum(col_name)).collect()[0][0])>0:\n            exprs.append(col_name)\n    if (display==True):\n        print(\"\\nColumns with null values\")\n        print(exprs)\n    if (len(exprs)>0):\n        #print(\"\\nNull values count per column\")\n        #bad_rows.show()\n        for col_name in exprs:\n            dataframe = dataframe.na.fill({col_name: 0})\n        exprs = []\n        for col_name in dataframe.columns:\n            exprs.append(count_null(col_name))\n        #print(\"\\nNull values count per column after function\")\n        #dataframe.agg(*exprs).show()\n    if (display==True):\n        print(\"Dataframe count: \"+str(dataframe.count())+' records')\n    return dataframe\n    \ndef get_df_name(name):\n    for (k, v) in globals().items():\n        #if isinstance(v, DataFrame) for DataType filter instead name\n        if (k==name):\n            return v\n    ","user":"hduser","dateUpdated":"2019-01-30T14:15:01-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1541621231800_649322187","id":"20181025-135053_1999611944","dateCreated":"2018-11-07T14:07:11-0600","dateStarted":"2019-01-30T14:15:01-0600","dateFinished":"2019-01-30T14:15:01-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:55"},{"text":"%md\n### uk_hd dataframe\n\nConvert String to Date in uk_hd and remove null records\n\n- ID\n- HD_DATE: Holiday Date\n- HD_NAME: Holiday Name","user":"hduser","dateUpdated":"2019-01-30T14:15:01-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>uk_hd dataframe</h3>\n<p>Convert String to Date in uk_hd and remove null records</p>\n<ul>\n  <li>ID</li>\n  <li>HD_DATE: Holiday Date</li>\n  <li>HD_NAME: Holiday Name</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543428003405_-1846253063","id":"20181128-120003_478121274","dateCreated":"2018-11-28T12:00:03-0600","dateStarted":"2019-01-30T14:15:01-0600","dateFinished":"2019-01-30T14:15:01-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:56"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\n# Convert String to Date in uk_hd\nuk_hd = (uk_hd\n        .withColumn(\"HD_DATE\", to_date(uk_hd.HD_DATE, \"dd/MM/yyyy\")))\n        \nuk_hd=null_to_zero(uk_hd, False)\nuk_hd = uk_hd.select(row_number().over(Window().orderBy(\"HD_DATE\")).alias(\"ID\"), col(\"*\"))\nuk_hd.collect()\n#uk_hd=uk_hd.orderBy(\"HD_DATE\")\n#uk_hd = uk_hd.withColumn(\"ID\", monotonically_increasing_id())\n\nmes_et(startTimeQuery)\n\nprint(\"Holidays data count: \"+str(uk_hd.count())+' records')\nuk_hd.show(uk_hd.count())\nuk_hd.printSchema()\n","user":"hduser","dateUpdated":"2019-01-30T14:15:01-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 1.57350301743 seconds\nHolidays data count: 25 records\n+---+----------+--------------------+\n| ID|   HD_DATE|             HD_NAME|\n+---+----------+--------------------+\n|  1|2012-01-02|New Year�s Day (s...|\n|  2|2012-04-06|         Good Friday|\n|  3|2012-04-09|       Easter Monday|\n|  4|2012-05-07|Early May bank ho...|\n|  5|2012-06-04|Spring bank holid...|\n|  6|2012-06-05|Queen�s Diamond J...|\n|  7|2012-08-27| Summer bank holiday|\n|  8|2012-12-25|       Christmas Day|\n|  9|2012-12-26|          Boxing Day|\n| 10|2013-01-01|      New Year�s Day|\n| 11|2013-03-29|         Good Friday|\n| 12|2013-04-01|       Easter Monday|\n| 13|2013-05-06|Early May bank ho...|\n| 14|2013-05-27| Spring bank holiday|\n| 15|2013-08-26| Summer bank holiday|\n| 16|2013-12-25|       Christmas Day|\n| 17|2013-12-26|          Boxing Day|\n| 18|2014-01-01|      New Year�s Day|\n| 19|2014-04-18|         Good Friday|\n| 20|2014-04-21|       Easter Monday|\n| 21|2014-05-05|Early May bank ho...|\n| 22|2014-05-26| Spring bank holiday|\n| 23|2014-08-25| Summer bank holiday|\n| 24|2014-12-25|       Christmas Day|\n| 25|2014-12-26|          Boxing Day|\n+---+----------+--------------------+\n\nroot\n |-- ID: integer (nullable = true)\n |-- HD_DATE: date (nullable = true)\n |-- HD_NAME: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1541621231801_623322816","id":"20181107-133346_1458365935","dateCreated":"2018-11-07T14:07:11-0600","dateStarted":"2019-01-30T14:15:01-0600","dateFinished":"2019-01-30T14:15:27-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:57"},{"text":"%md\n### acorn_cats dataframe\nA list with Households' ACORN categories and the % of population for each one.\n\n- ACORN_CAT: ID Category number (0-5)\n- ACORN_CAT_NAME: Category name\n- CAT_POPULATION: % of households classified under each category\n\nMore information about households ACORN categories in [ACORN household User Guide](http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf)","user":"hduser","dateUpdated":"2019-01-30T14:15:27-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>acorn_cats dataframe</h3>\n<p>A list with Households&rsquo; ACORN categories and the % of population for each one.</p>\n<ul>\n  <li>ACORN_CAT: ID Category number (0-5)</li>\n  <li>ACORN_CAT_NAME: Category name</li>\n  <li>CAT_POPULATION: % of households classified under each category</li>\n</ul>\n<p>More information about households ACORN categories in <a href=\"http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf\">ACORN household User Guide</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543612511653_-1223532829","id":"20181130-151511_1094072595","dateCreated":"2018-11-30T15:15:11-0600","dateStarted":"2019-01-30T14:15:27-0600","dateFinished":"2019-01-30T14:15:27-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:58"},{"text":"%pyspark\nacorn_cats.show()","user":"hduser","dateUpdated":"2019-01-30T14:15:27-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+--------------------+--------------+\n|ACORN_CAT|      ACORN_CAT_NAME|CAT_POPULATION|\n+---------+--------------------+--------------+\n|        1|  Affluent Achievers|   0.216169398|\n|        2|   Rising Prosperity|   0.097081371|\n|        3|Comfortable Comun...|   0.267579841|\n|        4|Financially Stret...|   0.231608437|\n|        5|     Urban Adversity|   0.185077406|\n|        0|               Other|   0.002483547|\n+---------+--------------------+--------------+\n\n"}]},"apps":[],"jobName":"paragraph_1543612520201_-46860237","id":"20181130-151520_455660545","dateCreated":"2018-11-30T15:15:20-0600","dateStarted":"2019-01-30T14:15:27-0600","dateFinished":"2019-01-30T14:15:30-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:59"},{"text":"%md\n### acorn_groups dataframe\nA list with Households' ACORN groups and the category for each one.\n\n- ID\n- ACORN_CAT: Category number (0-5)\n- ACORN_GROUP: ACORN Group (A to Q)\n- ACORN_CAT_NAME: Category name\n\nMore information about households ACORN categories in [ACORN household User Guide](http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf)","user":"hduser","dateUpdated":"2019-01-30T14:15:30-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>acorn_groups dataframe</h3>\n<p>A list with Households&rsquo; ACORN groups and the category for each one.</p>\n<ul>\n  <li>ID</li>\n  <li>ACORN_CAT: Category number (0-5)</li>\n  <li>ACORN_GROUP: ACORN Group (A to Q)</li>\n  <li>ACORN_CAT_NAME: Category name</li>\n</ul>\n<p>More information about households ACORN categories in <a href=\"http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf\">ACORN household User Guide</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543612549636_1912355844","id":"20181130-151549_184717255","dateCreated":"2018-11-30T15:15:49-0600","dateStarted":"2019-01-30T14:15:30-0600","dateFinished":"2019-01-30T14:15:30-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:60"},{"text":"%pyspark\nstartTimeQuery = time.time()\nacorn_groups=null_to_zero(acorn_groups, False)\nacorn_groups = acorn_groups.select(row_number().over(Window().orderBy(\"ACORN_CAT\",\"ACORN_GROUP\")).alias(\"ID\"), col(\"*\"))\n#acorn_groups=acorn_groups.orderBy(\"ACORN_CAT\",\"ACORN_GROUP\")\n#acorn_groups = acorn_groups.withColumn(\"ID\", monotonically_increasing_id())\nacorn_groups.collect()\nmes_et(startTimeQuery)\nacorn_groups.show()\nacorn_groups.printSchema()","user":"hduser","dateUpdated":"2019-01-30T14:15:30-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 1.04811382294 seconds\n+---+---------+-----------+--------------------+\n| ID|ACORN_CAT|ACORN_GROUP|      ACORN_CAT_NAME|\n+---+---------+-----------+--------------------+\n|  1|        0|     ACORN-|               Other|\n|  2|        1|    ACORN-A|  Affluent Achievers|\n|  3|        1|    ACORN-B|  Affluent Achievers|\n|  4|        1|    ACORN-C|  Affluent Achievers|\n|  5|        2|    ACORN-D|   Rising Prosperity|\n|  6|        2|    ACORN-E|   Rising Prosperity|\n|  7|        3|    ACORN-F|Comfortable Comun...|\n|  8|        3|    ACORN-G|Comfortable Comun...|\n|  9|        3|    ACORN-H|Comfortable Comun...|\n| 10|        3|    ACORN-I|Comfortable Comun...|\n| 11|        3|    ACORN-J|Comfortable Comun...|\n| 12|        4|    ACORN-K|Financially Stret...|\n| 13|        4|    ACORN-L|Financially Stret...|\n| 14|        4|    ACORN-M|Financially Stret...|\n| 15|        4|    ACORN-N|Financially Stret...|\n| 16|        5|    ACORN-O|     Urban Adversity|\n| 17|        5|    ACORN-P|     Urban Adversity|\n| 18|        5|    ACORN-Q|     Urban Adversity|\n+---+---------+-----------+--------------------+\n\nroot\n |-- ID: integer (nullable = true)\n |-- ACORN_CAT: integer (nullable = true)\n |-- ACORN_GROUP: string (nullable = true)\n |-- ACORN_CAT_NAME: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1543612560429_-120566140","id":"20181130-151600_371384821","dateCreated":"2018-11-30T15:16:00-0600","dateStarted":"2019-01-30T14:15:30-0600","dateFinished":"2019-01-30T14:15:32-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61"},{"text":"%md\n### information_households dataframe\n\nGive an ACORN Category (0 to 5)  to each ACORN group (A to Q) and remove null records from dataframe.\n\n- ID\n- METER_ID: Meter ID for each client\n- STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff\n- ACORN_CAT: Household ACORN category (0 to 5)\n- ACORN_CAT_NAME: HouseholdACORN category name\n- ACORN_GROUP: Household group (A to Q)\n\nMore information about households ACORN categories in [ACORN household User Guide](http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf)","user":"hduser","dateUpdated":"2019-01-30T14:15:32-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>information_households dataframe</h3>\n<p>Give an ACORN Category (0 to 5) to each ACORN group (A to Q) and remove null records from dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff</li>\n  <li>ACORN_CAT: Household ACORN category (0 to 5)</li>\n  <li>ACORN_CAT_NAME: HouseholdACORN category name</li>\n  <li>ACORN_GROUP: Household group (A to Q)</li>\n</ul>\n<p>More information about households ACORN categories in <a href=\"http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf\">ACORN household User Guide</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543428564673_-924423776","id":"20181128-120924_1668978468","dateCreated":"2018-11-28T12:09:24-0600","dateStarted":"2019-01-30T14:15:32-0600","dateFinished":"2019-01-30T14:15:32-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\ninformation_households=information_households.drop(\"ACORN_GROUP_NAME\") \ninformation_households=information_households.drop(\"FILE\") \ninformation_households=null_to_zero(information_households, False)\n    \na = information_households.alias('a')\nb = acorn_groups.alias('b')\ninformation_households = a.join(b, a.ACORN_GROUP == b.ACORN_GROUP)\n\ninformation_households=(information_households\n                        .select(\"METER_ID\",\"STD_TOU\",'ACORN_CAT','ACORN_CAT_NAME',a.ACORN_GROUP))\ninformation_households=information_households.filter(information_households.ACORN_CAT<>0)\ninformation_households=information_households.withColumn('CAT', when(col(\"ACORN_CAT\") == 1, 1).when(col(\"ACORN_CAT\") == 5, 3).when(col(\"ACORN_CAT\") == 0, 0).otherwise(2))\ninformation_households=information_households.withColumn('CAT_NAME', when(col(\"ACORN_CAT\") == 1, \"Affluent\").when(col(\"ACORN_CAT\") == 5, \"Stretched\").when(col(\"ACORN_CAT\") == 0, \"Other\").otherwise(\"Comfortable\"))\n                        \n#information_households=information_households.orderBy(\"ACORN_CAT\", \"METER_ID\")\n#information_households = information_households.withColumn(\"ID\", monotonically_increasing_id())\ninformation_households = information_households.select(row_number().over(Window().orderBy(\"ACORN_CAT\", \"METER_ID\")).alias(\"ID\"), col(\"*\"))\n\n\nmes_et(startTimeQuery)\n\nprint(\"Information Households data count: \"+str(information_households.count())+' records')\ninformation_households.show(5)\ninformation_households.printSchema()","user":"hduser","dateUpdated":"2019-01-30T14:15:32-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 12.7629678249 seconds\nInformation Households data count: 5515 records\n+---+---------+-------+---------+------------------+-----------+---+--------+\n| ID| METER_ID|STD_TOU|ACORN_CAT|    ACORN_CAT_NAME|ACORN_GROUP|CAT|CAT_NAME|\n+---+---------+-------+---------+------------------+-----------+---+--------+\n|  1|MAC000002|    Std|        1|Affluent Achievers|    ACORN-A|  1|Affluent|\n|  2|MAC000005|    ToU|        1|Affluent Achievers|    ACORN-C|  1|Affluent|\n|  3|MAC000017|    ToU|        1|Affluent Achievers|    ACORN-C|  1|Affluent|\n|  4|MAC000030|    Std|        1|Affluent Achievers|    ACORN-A|  1|Affluent|\n|  5|MAC000040|    Std|        1|Affluent Achievers|    ACORN-A|  1|Affluent|\n+---+---------+-------+---------+------------------+-----------+---+--------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- STD_TOU: string (nullable = true)\n |-- ACORN_CAT: integer (nullable = true)\n |-- ACORN_CAT_NAME: string (nullable = true)\n |-- ACORN_GROUP: string (nullable = true)\n |-- CAT: integer (nullable = false)\n |-- CAT_NAME: string (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1541621231803_-518866901","id":"20181107-133427_257021912","dateCreated":"2018-11-07T14:07:11-0600","dateStarted":"2019-01-30T14:15:32-0600","dateFinished":"2019-01-30T14:15:46-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:63"},{"text":"%md\n### weather_daily_darksky dataframe\n\nRemove null records from dataframe and cast time and date fields to right formats. Details for each column available at [Dark Sky API](https://darksky.net/dev/docs#response-format)\n","user":"hduser","dateUpdated":"2019-01-30T14:15:46-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>weather_daily_darksky dataframe</h3>\n<p>Remove null records from dataframe and cast time and date fields to right formats. Details for each column available at <a href=\"https://darksky.net/dev/docs#response-format\">Dark Sky API</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543433378970_-1855890476","id":"20181128-132938_1595055429","dateCreated":"2018-11-28T13:29:38-0600","dateStarted":"2019-01-30T14:15:46-0600","dateFinished":"2019-01-30T14:15:46-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64"},{"text":"%pyspark\nstartTimeQuery = time.time()\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_MAX_TIME\", (weather_daily_darksky.TEMP_MAX_TIME.cast(TimestampType())))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_MIN_TIME\", weather_daily_darksky.TEMP_MIN_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_MIN_TIME\", weather_daily_darksky.APAR_TEMP_MIN_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_HI_TIME\", weather_daily_darksky.APAR_TEMP_HI_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TIME\", weather_daily_darksky.TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"SUNSET_TIME\", weather_daily_darksky.SUNSET_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"SUNRISE_TIME\", weather_daily_darksky.SUNRISE_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_HI_TIME\", weather_daily_darksky.TEMP_HI_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"UV_INDEX_TIME\", weather_daily_darksky.UV_INDEX_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_LO_TIME\", weather_daily_darksky.TEMP_LO_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_MAX_TIME\", weather_daily_darksky.APAR_TEMP_MAX_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_LO_TIME\", weather_daily_darksky.APAR_TEMP_LO_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"DATE\", to_date('TIME', \"yyyy-MM-dd\"))\n\nweather_daily_darksky=weather_daily_darksky.select(\"DATE\",\"TEMP_MAX\",\"TEMP_MAX_TIME\",\"TEMP_MIN\",\"TEMP_MIN_TIME\",\"PRESSURE\",\"HUMIDITY\",\"UV_INDEX\",\"SUNRISE_TIME\",\"SUNSET_TIME\")\n\ntimeFmt = \"yyyy-MM-dd HH:mm:ss\"\ntimeDiff = (sqlFunctions.unix_timestamp(weather_daily_darksky[\"SUNSET_TIME\"], format=timeFmt)\n            - sqlFunctions.unix_timestamp(weather_daily_darksky[\"SUNRISE_TIME\"], format=timeFmt))/60/60\n\nweather_daily_darksky = weather_daily_darksky.withColumn(\"LIGHT_HOURS\", round(timeDiff,2))\n\nweather_daily_darksky=null_to_zero(weather_daily_darksky, False)\n\nweather_daily_darksky=(weather_daily_darksky\n                    .withColumn(\"UV_INDEX\", weather_daily_darksky.UV_INDEX.cast(IntegerType())))\n                    \nweather_daily_darksky = weather_daily_darksky.select(row_number().over(Window().orderBy(\"DATE\")).alias(\"ID\"), col(\"*\"))\n#weather_daily_darksky=weather_daily_darksky.orderBy(\"DATE\")\n#weather_daily_darksky = weather_daily_darksky.withColumn(\"ID\", monotonically_increasing_id())\n\nweather_daily_darksky.collect()\nmes_et(startTimeQuery)\nprint(\"Weather daily data count: \"+str(weather_daily_darksky.count())+' records')\nweather_daily_darksky.show(5) \nweather_daily_darksky.printSchema()","user":"hduser","dateUpdated":"2019-01-30T14:15:46-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 3.25113105774 seconds\nWeather daily data count: 882 records\n+---+----------+--------+-------------------+--------+-------------------+--------+--------+--------+-------------------+-------------------+-----------+\n| ID|      DATE|TEMP_MAX|      TEMP_MAX_TIME|TEMP_MIN|      TEMP_MIN_TIME|PRESSURE|HUMIDITY|UV_INDEX|       SUNRISE_TIME|        SUNSET_TIME|LIGHT_HOURS|\n+---+----------+--------+-------------------+--------+-------------------+--------+--------+--------+-------------------+-------------------+-----------+\n|  1|2011-11-01|   15.57|2011-11-01 15:00:00|    9.68|2011-11-01 22:00:00| 1009.46|    0.84|       1|2011-11-01 06:54:29|2011-11-01 16:36:03|       9.69|\n|  2|2011-11-02|   15.19|2011-11-02 23:00:00|    8.88|2011-11-02 03:00:00| 1004.79|    0.87|       1|2011-11-02 06:56:16|2011-11-02 16:34:15|       9.63|\n|  3|2011-11-03|   17.41|2011-11-03 14:00:00|   12.79|2011-11-03 21:00:00|   993.4|    0.89|       1|2011-11-03 06:58:03|2011-11-03 16:32:29|       9.57|\n|  4|2011-11-04|   15.54|2011-11-04 11:00:00|   11.53|2011-11-04 23:00:00|  995.54|    0.91|       1|2011-11-04 06:59:49|2011-11-04 16:30:44|       9.52|\n|  5|2011-11-05|   13.94|2011-11-05 15:00:00|   10.17|2011-11-05 02:00:00| 1007.39|    0.92|       1|2011-11-05 07:01:36|2011-11-05 16:29:01|       9.46|\n+---+----------+--------+-------------------+--------+-------------------+--------+--------+--------+-------------------+-------------------+-----------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- DATE: date (nullable = true)\n |-- TEMP_MAX: double (nullable = true)\n |-- TEMP_MAX_TIME: timestamp (nullable = true)\n |-- TEMP_MIN: double (nullable = true)\n |-- TEMP_MIN_TIME: timestamp (nullable = true)\n |-- PRESSURE: double (nullable = true)\n |-- HUMIDITY: double (nullable = true)\n |-- UV_INDEX: integer (nullable = true)\n |-- SUNRISE_TIME: timestamp (nullable = true)\n |-- SUNSET_TIME: timestamp (nullable = true)\n |-- LIGHT_HOURS: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1541621231804_-507905298","id":"20181105-162311_1635293860","dateCreated":"2018-11-07T14:07:11-0600","dateStarted":"2019-01-30T14:15:46-0600","dateFinished":"2019-01-30T14:15:50-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"text":"%md\n### weather_hourly_darksky dataframe\n\nRemove null records from dataframe and cast time and date fields to right formats. Details for each column available at [Dark Sky API](https://darksky.net/dev/docs#response-format)","user":"hduser","dateUpdated":"2019-01-30T14:15:51-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>weather_hourly_darksky dataframe</h3>\n<p>Remove null records from dataframe and cast time and date fields to right formats. Details for each column available at <a href=\"https://darksky.net/dev/docs#response-format\">Dark Sky API</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543433709107_1430742320","id":"20181128-133509_1486972675","dateCreated":"2018-11-28T13:35:09-0600","dateStarted":"2019-01-30T14:15:51-0600","dateFinished":"2019-01-30T14:15:51-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:66"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\nweather_hourly_darksky=(weather_hourly_darksky\n                        .withColumn(\"DATETIME\", weather_hourly_darksky.TIME.cast(TimestampType())))\nweather_hourly_darksky=weather_hourly_darksky.withColumn(\"DATE\", to_date(\"DATETIME\", \"yyyy-MM-dd HH:mm:ss\"))    \nweather_hourly_darksky=weather_hourly_darksky.select(\"DATETIME\", \"DATE\",\"TEMPERATURE\",\"PRESSURE\",\"HUMIDITY\")\nweather_hourly_darksky=null_to_zero(weather_hourly_darksky, True)\n\n#weather_hourly_darksky=weather_hourly_darksky.orderBy(\"DATETIME\")\n#weather_hourly_darksky = weather_hourly_darksky.withColumn(\"ID\", monotonically_increasing_id())\nweather_hourly_darksky = weather_hourly_darksky.select(row_number().over(Window().orderBy(\"DATETIME\")).alias(\"ID\"), col(\"*\"))\n\nweather_hourly_darksky.collect()\nmes_et(startTimeQuery)\n\nprint(\"Weather hourly data count: \"+str(weather_hourly_darksky.count())+' records')\nweather_hourly_darksky.show(5)\nweather_hourly_darksky.printSchema()\n","user":"hduser","dateUpdated":"2019-01-30T14:15:51-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nColumns with null values\n['PRESSURE']\nDataframe count: 21165 records\nELAPSED TIME: 2.29827809334 seconds\nWeather hourly data count: 21165 records\n+---+-------------------+----------+-----------+--------+--------+\n| ID|           DATETIME|      DATE|TEMPERATURE|PRESSURE|HUMIDITY|\n+---+-------------------+----------+-----------+--------+--------+\n|  1|2011-11-01 00:00:00|2011-11-01|      13.49| 1008.14|    0.88|\n|  2|2011-11-01 01:00:00|2011-11-01|      12.73| 1007.88|    0.93|\n|  3|2011-11-01 02:00:00|2011-11-01|      13.65| 1007.09|    0.91|\n|  4|2011-11-01 03:00:00|2011-11-01|      14.13|  1006.5|    0.88|\n|  5|2011-11-01 04:00:00|2011-11-01|      14.17| 1006.14|     0.9|\n+---+-------------------+----------+-----------+--------+--------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- DATETIME: timestamp (nullable = true)\n |-- DATE: date (nullable = true)\n |-- TEMPERATURE: double (nullable = true)\n |-- PRESSURE: double (nullable = false)\n |-- HUMIDITY: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1541621231806_-1785236974","id":"20181107-083814_273178083","dateCreated":"2018-11-07T14:07:11-0600","dateStarted":"2019-01-30T14:15:51-0600","dateFinished":"2019-01-30T14:15:54-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"text":"%md\n### half_ts dataframes\n\nInformation about energy consumption for each client, each half hour in **TIME SERIES**. Union of all **half_block** [generated in Extraction Notebook](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ)\n\n- ID\n- METER_ID:  Meter ID for each client\n- TIMESTAMP: Measurement date and time\n- DATE: Measurement date\n- ENERGY: Total energy consumption for each half hour\n\n#### _half_ts_ dataframe is later broke into several dataframes, one for each year: half_11, half_12, etc","user":"hduser","dateUpdated":"2019-01-30T14:15:54-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>half_ts dataframes</h3>\n<p>Information about energy consumption for each client, each half hour in <strong>TIME SERIES</strong>. Union of all <strong>half_block</strong> <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">generated in Extraction Notebook</a></p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>TIMESTAMP: Measurement date and time</li>\n  <li>DATE: Measurement date</li>\n  <li>ENERGY: Total energy consumption for each half hour</li>\n</ul>\n<h4><em>half_ts</em> dataframe is later broke into several dataframes, one for each year: half_11, half_12, etc</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1544560624124_-2055206470","id":"20181211-143704_478090300","dateCreated":"2018-12-11T14:37:04-0600","dateStarted":"2019-01-30T14:15:54-0600","dateFinished":"2019-01-30T14:15:54-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:68"},{"text":"%pyspark\n#halfhourly_dataset/block_0-111\nstartTimeQuery = time.time()\nsubdir=\"halfhourly_dataset/\"\nargs = \"hdfs dfs -ls \"+dir_in+subdir+\" | awk '{print $8}'\"\nproc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\ns_output, s_err = proc.communicate()\nblock_list = s_output.split()\n\n#iterate through all files in directory to generate a dataframe for each file \nfor i in range(len(block_list)-test):\n    block=\"block_\"+`i`\n    block_name_str=\"half_\"+block\n    half=get_df_name(block_name_str)\n    #half=null_to_zero(half, True)\n    \n    if (i>0):\n        half_ts=half_ts.unionAll(half)\n    else:\n        half_ts=half\n\nhalf_ts=null_to_zero(half_ts, True)\n\n\nhalf_ts=half_ts.withColumn(\"TIMESTAMP\", half_ts.TIMESTAMP.cast(TimestampType()))\nhalf_ts=half_ts.withColumn(\"DATE\", to_date(\"TIMESTAMP\",\"yyyy-MM-dd HH:mm:ss\"))\n\nhalf_ts=(half_ts.filter(col(\"METER_ID\").isNotNull())\n                .filter(col(\"ENERGY\")>0))\nhalf_ts=half_ts.select(\"METER_ID\",\"DATE\",\"TIMESTAMP\",\"ENERGY\")\nhalf_ts = half_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))   \n\nmes_et(startTimeQuery)\nprint(\"Half block time series data count: \"+str(half_ts.count())+' records')\nhalf_ts.show(5)\nhalf_ts.printSchema()\n","user":"hduser","dateUpdated":"2019-01-30T14:15:54-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nColumns with null values\n['ENERGY']\nDataframe count: 167817021 records\nELAPSED TIME: 51.6024861336 seconds\nHalf block time series data count: 165809909 records\n+---+---------+----------+-------------------+------+\n| ID| METER_ID|      DATE|          TIMESTAMP|ENERGY|\n+---+---------+----------+-------------------+------+\n|  1|MAC000002|2012-10-12|2012-10-12 11:30:00| 0.143|\n|  2|MAC000002|2012-10-12|2012-10-12 12:00:00| 0.663|\n|  3|MAC000002|2012-10-12|2012-10-12 12:30:00| 0.256|\n|  4|MAC000002|2012-10-12|2012-10-12 13:00:00| 0.155|\n|  5|MAC000002|2012-10-12|2012-10-12 13:30:00| 0.199|\n+---+---------+----------+-------------------+------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- TIMESTAMP: timestamp (nullable = true)\n |-- ENERGY: double (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1544560654876_-214477657","id":"20181211-143734_713986091","dateCreated":"2018-12-11T14:37:34-0600","dateStarted":"2019-01-30T14:15:54-0600","dateFinished":"2019-01-30T14:20:27-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nhalf_11=half_ts.filter(date_format('DATE','yyyy')==2011)\nhalf_12=half_ts.filter(date_format('DATE','yyyy')==2012)\nhalf_13=half_ts.filter(date_format('DATE','yyyy')==2013)\nhalf_14=half_ts.filter(date_format('DATE','yyyy')==2014)\n\nmes_et(startTimeQuery)\n\nprint(\"Half block data count for 2011: \"+str(half_11.count())+' records')\nprint(\"Half block data count for 2012: \"+str(half_12.count())+' records')\nprint(\"Half block data count for 2013: \"+str(half_13.count())+' records')\nprint(\"Half block data count for 2014: \"+str(half_14.count())+' records')\n","user":"hduser","dateUpdated":"2019-01-30T14:20:27-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.0567278862 seconds\nHalf block data count for 2011: 394306 records\nHalf block data count for 2012: 59706396 records\nHalf block data count for 2013: 91861554 records\nHalf block data count for 2014: 13847653 records\n"}]},"apps":[],"jobName":"paragraph_1544711249229_-1656995168","id":"20181213-082729_1454443086","dateCreated":"2018-12-13T08:27:29-0600","dateStarted":"2019-01-30T14:20:27-0600","dateFinished":"2019-01-30T14:22:38-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nacorn=half_ts.join(information_households.select([\"METER_ID\",\"ACORN_CAT\"]), half_ts.METER_ID==information_households.METER_ID).drop(information_households.METER_ID)\n#acorn=acorn.drop(information_households.METER_ID).drop(information_households.ACORN_GROUP).drop(information_households.ID).drop(half_ts.ID).drop(\"STD_TOU\").drop(\"ACORN_CAT\").drop(\"ACORN_CAT_NAME\")\n\nacorn1=acorn.filter(col(\"ACORN_CAT\")==1).drop(\"ACORN_CAT\")\nacorn1 = acorn1.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))  \n\nacorn2=acorn.filter(col(\"ACORN_CAT\")==2).drop(\"ACORN_CAT\")\nacorn2 = acorn2.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))  \n\nacorn3=acorn.filter(col(\"ACORN_CAT\")==3).drop(\"ACORN_CAT\")\nacorn3 = acorn3.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))  \n\nacorn4=acorn.filter(col(\"ACORN_CAT\")==4).drop(\"ACORN_CAT\")\nacorn4 = acorn4.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))  \n\nacorn5=acorn.filter(col(\"ACORN_CAT\")==5).drop(\"ACORN_CAT\")\nacorn5 = acorn5.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))  \n\nmes_et(startTimeQuery)\n\nprint(\"Half block data count for ACORN 1: \"+str(acorn1.count())+' records')\nprint(\"Half block data count for ACORN 2: \"+str(acorn2.count())+' records')\nprint(\"Half block data count for ACORN 3: \"+str(acorn3.count())+' records')\nprint(\"Half block data count for ACORN 4: \"+str(acorn4.count())+' records')\nprint(\"Half block data count for ACORN 5: \"+str(acorn5.count())+' records')\nacorn5.show(5)","user":"hduser","dateUpdated":"2019-01-30T14:22:38-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.272228002548 seconds\nHalf block data count for ACORN 1: 9355241 records\nHalf block data count for ACORN 2: 57071019 records\nHalf block data count for ACORN 3: 44390456 records\nHalf block data count for ACORN 4: 22255121 records\nHalf block data count for ACORN 5: 31376430 records\n+---+-----+---------+----------+-------------------+------+\n| ID|   ID| METER_ID|      DATE|          TIMESTAMP|ENERGY|\n+---+-----+---------+----------+-------------------+------+\n|  1|24120|MAC000003|2012-02-20|2012-02-20 13:00:00| 0.976|\n|  2|24121|MAC000003|2012-02-20|2012-02-20 13:30:00| 0.834|\n|  3|24122|MAC000003|2012-02-20|2012-02-20 14:00:00| 0.577|\n|  4|24123|MAC000003|2012-02-20|2012-02-20 14:30:00|  0.63|\n|  5|24124|MAC000003|2012-02-20|2012-02-20 15:00:00| 0.679|\n+---+-----+---------+----------+-------------------+------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1544722634794_215360689","id":"20181213-113714_1707154132","dateCreated":"2018-12-13T11:37:14-0600","dateStarted":"2019-01-30T14:22:38-0600","dateFinished":"2019-01-30T14:30:23-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"text":"%md\n### hour_ts dataframe\n\nInformation about energy consumption for each client, each hour in TIME SERIES. Retrieved from half_ts dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- TIMESTAMP: Measurenent timestamp\n- DATE: Measurement date\n- ENERGY: Total energy consumption for each hour\n\n#### _hour_ts_ dataframe is later broke into several dataframes, one for each year: hour_11, hour_12, etc","user":"hduser","dateUpdated":"2019-01-30T14:30:24-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>hour_ts dataframe</h3>\n<p>Information about energy consumption for each client, each hour in TIME SERIES. Retrieved from half_ts dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>TIMESTAMP: Measurenent timestamp</li>\n  <li>DATE: Measurement date</li>\n  <li>ENERGY: Total energy consumption for each hour</li>\n</ul>\n<h4><em>hour_ts</em> dataframe is later broke into several dataframes, one for each year: hour_11, hour_12, etc</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1544560682708_-1877031384","id":"20181211-143802_216346205","dateCreated":"2018-12-11T14:38:02-0600","dateStarted":"2019-01-30T14:30:24-0600","dateFinished":"2019-01-30T14:30:24-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nhour_ts=(half_ts.groupBy('METER_ID',\"DATE\",hour(\"TIMESTAMP\").alias(\"HOUR\"))\n                .agg(sqlFunctions.sum(\"ENERGY\").alias(\"ENERGY\"))\n                .orderBy(\"METER_ID\",\"DATE\",\"HOUR\"))\n\nhour_ts=hour_ts.withColumn(\"ENERGY\",round(\"ENERGY\",3))\n\nhour_ts = hour_ts.join(uk_hd, hour_ts.DATE == uk_hd.HD_DATE, how = 'left_outer')\nhour_ts=hour_ts.drop(uk_hd.ID)\nhour_ts=hour_ts.withColumn(\"HD\", when(col(\"DATE\")==col(\"HD_DATE\"),True).otherwise(False))\nhour_ts=hour_ts.drop(\"HD_DATE\",\"HD_NAME\")\n\nhour_ts=hour_ts.select(\"METER_ID\",(concat(date_format(\"DATE\", \"yyyy-MM-dd\"),lit(\" \"),hour_ts.HOUR,lit(\":00:00\"))).cast(TimestampType()).alias(\"TIMESTAMP\"),\"DATE\",\"HD\",\"ENERGY\")\n\nhour_ts = hour_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"TIMESTAMP\")).alias(\"ID\"), col(\"*\")) \nprint(\"Hour block time series data count: \"+str(hour_ts.count())+' records')\nmes_et(startTimeQuery)\nhour_ts.show(5)\nhour_ts.printSchema()\n","user":"hduser","dateUpdated":"2019-01-30T14:30:24-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Hour block time series data count: 83204183 records\nELAPSED TIME: 89.8176679611 seconds\n+---+---------+-------------------+----------+-----+------+\n| ID| METER_ID|          TIMESTAMP|      DATE|   HD|ENERGY|\n+---+---------+-------------------+----------+-----+------+\n|  1|MAC000002|2012-10-12 11:00:00|2012-10-12|false| 0.143|\n|  2|MAC000002|2012-10-12 12:00:00|2012-10-12|false| 0.919|\n|  3|MAC000002|2012-10-12 13:00:00|2012-10-12|false| 0.354|\n|  4|MAC000002|2012-10-12 14:00:00|2012-10-12|false|  0.29|\n|  5|MAC000002|2012-10-12 15:00:00|2012-10-12|false| 0.288|\n+---+---------+-------------------+----------+-----+------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- TIMESTAMP: timestamp (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HD: boolean (nullable = false)\n |-- ENERGY: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1544560697236_-909668135","id":"20181211-143817_2130045967","dateCreated":"2018-12-11T14:38:17-0600","dateStarted":"2019-01-30T14:30:24-0600","dateFinished":"2019-01-30T14:35:38-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nhour_11=hour_ts.filter(date_format('DATE','yyyy')==2011)\nhour_12=hour_ts.filter(date_format('DATE','yyyy')==2012)\nhour_13=hour_ts.filter(date_format('DATE','yyyy')==2013)\nhour_14=hour_ts.filter(date_format('DATE','yyyy')==2014)\n\nmes_et(startTimeQuery)\n\nprint(\"Half block data count for 2011: \"+str(hour_11.count())+' records')\nprint(\"Half block data count for 2012: \"+str(hour_12.count())+' records')\nprint(\"Half block data count for 2013: \"+str(hour_13.count())+' records')\nprint(\"Half block data count for 2014: \"+str(hour_14.count())+' records')","user":"hduser","dateUpdated":"2019-01-30T14:35:38-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.0571420192719 seconds\nHalf block data count for 2011: 198004 records\nHalf block data count for 2012: 29963510 records\nHalf block data count for 2013: 46089420 records\nHalf block data count for 2014: 6953249 records\n"}]},"apps":[],"jobName":"paragraph_1544711667596_1398312087","id":"20181213-083427_587835007","dateCreated":"2018-12-13T08:34:27-0600","dateStarted":"2019-01-30T14:35:38-0600","dateFinished":"2019-01-30T14:39:46-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"text":"%md\n\n### day_ts dataframe\n\nInformation about energy consumption for each client, each day in **TIME SERIES**. Retrieved from **hour_ts** dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- ENERGY: Total energy consumptiion for each day \n- E_MAX: maximum consumption (per half hour registered each day)","user":"hduser","dateUpdated":"2019-01-30T14:39:46-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>day_ts dataframe</h3>\n<p>Information about energy consumption for each client, each day in <strong>TIME SERIES</strong>. Retrieved from <strong>hour_ts</strong> dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>ENERGY: Total energy consumptiion for each day</li>\n  <li>E_MAX: maximum consumption (per half hour registered each day)</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1544560761699_396758695","id":"20181211-143921_436688174","dateCreated":"2018-12-11T14:39:21-0600","dateStarted":"2019-01-30T14:39:46-0600","dateFinished":"2019-01-30T14:39:46-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nday_ts=(hour_ts.groupBy(\"METER_ID\",\"DATE\")\n                .agg(sqlFunctions.sum(\"ENERGY\").alias(\"ENERGY\"),sqlFunctions.max(\"ENERGY\").alias(\"E_MAX\"))\n                .orderBy(\"METER_ID\",\"DATE\"))\n                \n#cond=[day_ts.MAX_E==hour_ts.ENERGY, day_ts.DATE==hour_ts.DATE, day_ts.METER_ID==hour_ts.METER_ID]\n#day_ts=day_ts.join(hour_ts, cond, how = 'inner').show(5)\nday_ts=day_ts.withColumn(\"ENERGY\", round (\"ENERGY\",3))       \nday_ts = day_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\nprint(\"Day time series data count: \"+str(day_ts.count())+' records')\nday_ts.show(5)                \nday_ts.printSchema()\n","user":"hduser","dateUpdated":"2019-01-30T14:39:46-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.129162073135 seconds\nDay time series data count: 3495265 records\n+---+---------+----------+------+-----+\n| ID| METER_ID|      DATE|ENERGY|E_MAX|\n+---+---------+----------+------+-----+\n|  1|MAC000002|2012-10-12| 7.098|1.413|\n|  2|MAC000002|2012-10-13|11.087|1.848|\n|  3|MAC000002|2012-10-14|13.223|2.031|\n|  4|MAC000002|2012-10-15|10.257|1.413|\n|  5|MAC000002|2012-10-16| 9.769|1.181|\n+---+---------+----------+------+-----+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- ENERGY: double (nullable = true)\n |-- E_MAX: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1544560779420_-1331280846","id":"20181211-143939_454141032","dateCreated":"2018-12-11T14:39:39-0600","dateStarted":"2019-01-30T14:39:46-0600","dateFinished":"2019-01-30T14:43:51-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"text":"%md\n### month_ts dataframe\n\nInformation about energy consumption for each client, each month in **TIME SERIES**. Retrieved from day_df dataframe\n\n- ID\n- METER_ID: Meter ID for each client\n- YEAR: Measurement Year\n- MONTH: Measurement Month\n- MONTH_E: Energy measurement for each month","user":"hduser","dateUpdated":"2019-01-30T14:43:51-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>month_ts dataframe</h3>\n<p>Information about energy consumption for each client, each month in <strong>TIME SERIES</strong>. Retrieved from day_df dataframe</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>YEAR: Measurement Year</li>\n  <li>MONTH: Measurement Month</li>\n  <li>MONTH_E: Energy measurement for each month</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1544560793407_-1314227985","id":"20181211-143953_1929367721","dateCreated":"2018-12-11T14:39:53-0600","dateStarted":"2019-01-30T14:43:52-0600","dateFinished":"2019-01-30T14:43:52-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nmonth_ts=day_ts\nmonth_ts=month_ts.select('ID','METER_ID',date_format('DATE','yyyy').alias(\"YEAR\"),date_format('DATE','MM').alias(\"MONTH\"),date_format('DATE','d').alias(\"DAY\"),'ENERGY')\n\n\nmonth_ts=month_ts.groupBy('METER_ID',\"YEAR\", \"MONTH\").agg(sqlFunctions.sum(day_ts['ENERGY']).alias('MONTH_E'),sqlFunctions.count(day_ts['ENERGY']).alias('COUNT_MONTH'),sqlFunctions.avg(day_ts['ENERGY']).alias('AVG_DAY'),sqlFunctions.max(day_ts['ENERGY']).alias('MAX_DAY_E')).orderBy('METER_ID',\"YEAR\", \"MONTH\")\n\nmonth_ts=month_ts.filter(month_ts.COUNT_MONTH>27)\nmonth_ts=month_ts.withColumn(\"MONTH_E\", round(col(\"MONTH_E\"),3)).withColumn(\"AVG_DAY\", round(col(\"AVG_DAY\"),3))\n\nmonth_ts = month_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"YEAR\",\"MONTH\",)).alias(\"ID\"), col(\"*\"))\n\nmes_et(startTimeQuery)\n\nprint(\"Month data count: \"+str(month_ts.count())+' records')\nmonth_ts.show(5)","user":"hduser","dateUpdated":"2019-01-30T14:43:52-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.319298028946 seconds\nMonth data count: 112056 records\n+---+---------+----+-----+-------+-----------+-------+---------+\n| ID| METER_ID|YEAR|MONTH|MONTH_E|COUNT_MONTH|AVG_DAY|MAX_DAY_E|\n+---+---------+----+-----+-------+-----------+-------+---------+\n|  1|MAC000002|2012|   11|344.762|         30| 11.492|   16.722|\n|  2|MAC000002|2012|   12|355.524|         31| 11.469|   17.932|\n|  3|MAC000002|2013|   01|359.872|         31| 11.609|   16.922|\n|  4|MAC000002|2013|   02|381.622|         28| 13.629|   32.628|\n|  5|MAC000002|2013|   03|479.684|         31| 15.474|   39.284|\n+---+---------+----+-----+-------+-----------+-------+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1544560809628_-755867405","id":"20181211-144009_194378805","dateCreated":"2018-12-11T14:40:09-0600","dateStarted":"2019-01-30T14:43:52-0600","dateFinished":"2019-01-30T14:48:27-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:78"},{"text":"%md\n### hh_df dataframe\n\nInformation about energy consumption for each client, each half hour. Union of all **hh_blocks** [generated in Extraction Notebook](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ)\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- HHX: Energy measurement for each 30 minutes. From HH0 = 00:00 to HH47=23:30","user":"hduser","dateUpdated":"2019-01-30T14:48:27-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>hh_df dataframe</h3>\n<p>Information about energy consumption for each client, each half hour. Union of all <strong>hh_blocks</strong> <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">generated in Extraction Notebook</a></p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>HHX: Energy measurement for each 30 minutes. From HH0 = 00:00 to HH47=23:30</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543505839096_-986563755","id":"20181129-093719_266618668","dateCreated":"2018-11-29T09:37:19-0600","dateStarted":"2019-01-30T14:48:27-0600","dateFinished":"2019-01-30T14:48:27-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:79"},{"text":"%pyspark\n#hhblock_dataset/block_0-111\nstartTimeQuery = time.time()\nsubdir=\"hhblock_dataset/\"\nargs = \"hdfs dfs -ls \"+dir_in+subdir+\" | awk '{print $8}'\"\nproc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\ns_output, s_err = proc.communicate()\nblock_list = s_output.split()\n\n#iterate through all files in directory \nfor i in range(len(block_list)-test):\n    block=\"block_\"+`i`\n    block_name_hh_str=\"hh_\"+block\n    hh=get_df_name(block_name_hh_str)\n    \n    #This is to save each block in a separate dataframe\n    #gbl[block_name_hh_str]= hh \n    \n    ##BLOCK UNION TO GET ONE DATAFRAME FOR ALL\n    if (i>0):\n        hh_df=hh_df.unionAll(hh)\n    else:\n        hh_df=hh\n    \nfor j in range (48):\n    hstr='HH'+str(j)\n    hh_df = hh_df.withColumn(hstr, round(hstr,3))\n\nhh_df = hh_df.withColumn(\"DATE\", to_date(hh_df.DATE, \"yyyy-MM-dd\"))\nhh_df=null_to_zero(hh_df, False)\n    \n    \n    \n#hh_df=hh_df.orderBy(\"METER_ID\",\"DATE\")\n#hh_df = hh_df.withColumn(\"ID\", monotonically_increasing_id())\nhh_df = hh_df.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))\n\n\nmes_et(startTimeQuery)\nprint(\"Half hour data count: \"+str(hh_df.count())+' records')\nhh_df.show(5)\nhh_df.printSchema()\n","user":"hduser","dateUpdated":"2019-01-30T14:48:27-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 228.524675846 seconds\nHalf hour data count: 3469352 records\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n| ID| METER_ID|      DATE|  HH0|  HH1|  HH2|  HH3|  HH4|  HH5|  HH6|  HH7|  HH8|  HH9| HH10| HH11| HH12| HH13| HH14| HH15| HH16| HH17| HH18| HH19| HH20| HH21| HH22| HH23| HH24| HH25| HH26| HH27| HH28| HH29| HH30| HH31| HH32| HH33| HH34| HH35| HH36| HH37| HH38| HH39| HH40| HH41| HH42| HH43| HH44| HH45| HH46| HH47|\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n|  1|MAC000002|2012-10-13|0.263|0.269|0.275|0.256|0.211|0.136|0.161|0.119|0.167|0.109|0.168|0.107|0.166|0.117|0.157|0.126|0.146|0.106|0.135|0.191|0.915|0.933|0.122|0.138|0.076|0.133|0.076|0.133|0.085|0.263|0.134|0.235|0.124|0.184| 0.23|0.176|0.388| 0.26|0.918|0.278|0.267|0.239| 0.23|0.233|0.235|0.188|0.259| 0.25|\n|  2|MAC000002|2012-10-14|0.262|0.166|0.226|0.088|0.126|0.082|0.123|0.083| 0.12|0.079|0.121|0.075|0.124|0.073|0.125| 0.07| 0.13|0.108|0.196|0.346|0.524|0.076|0.129|0.667| 0.23| 0.22|0.163|0.091| 0.17| 0.11| 0.11|0.121|0.099|0.157|0.093|0.371|0.386|1.085|1.075|0.956|0.821|0.745|0.712|0.511|0.231| 0.21|0.278|0.159|\n|  3|MAC000002|2012-10-15|0.192|0.097|0.141|0.083|0.132| 0.07| 0.13|0.074|0.124|0.078|0.118|0.082|0.112|0.087|0.106| 0.14| 0.12|1.075|0.146|0.123|0.082|0.127|0.077|0.551|0.149|0.129|0.075| 0.13|0.075|0.129|0.075|0.128|0.166|0.194|0.695| 0.26|0.227|0.255|1.164|0.249|0.225|0.258| 0.26|0.334|0.299|0.236|0.241|0.237|\n|  4|MAC000002|2012-10-16|0.237|0.237|0.193|0.118|0.098|0.107|0.094|0.109|0.091|0.105|0.091|0.104|0.092|0.103|0.093|0.101|0.144|  0.1|0.408|0.102|  0.1|0.116|0.354|0.146| 0.19|0.991| 0.31|0.121|0.113|0.094|0.119|0.087| 0.13|0.238|0.204|0.284|0.447|0.266|0.966|0.172|0.192|0.228|0.203|0.211|0.188|0.213|0.157|0.202|\n|  5|MAC000002|2012-10-17|0.157|0.211|0.155|0.169|0.101|0.117|0.084|0.118| 0.08|0.119|0.075|0.123|0.071|0.126|0.067|0.124|0.118|0.132|0.358|0.628|0.784|0.681|0.749|0.593|0.502|0.115|0.113|0.092|0.124|0.084|0.125|0.078|0.136|0.227|0.207|0.141|0.258|0.217|0.223|0.075| 0.23|0.208|0.265|0.377|0.327|0.277|0.288|0.256|\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HH0: double (nullable = true)\n |-- HH1: double (nullable = true)\n |-- HH2: double (nullable = true)\n |-- HH3: double (nullable = true)\n |-- HH4: double (nullable = true)\n |-- HH5: double (nullable = true)\n |-- HH6: double (nullable = true)\n |-- HH7: double (nullable = true)\n |-- HH8: double (nullable = true)\n |-- HH9: double (nullable = true)\n |-- HH10: double (nullable = true)\n |-- HH11: double (nullable = true)\n |-- HH12: double (nullable = true)\n |-- HH13: double (nullable = true)\n |-- HH14: double (nullable = true)\n |-- HH15: double (nullable = true)\n |-- HH16: double (nullable = true)\n |-- HH17: double (nullable = true)\n |-- HH18: double (nullable = true)\n |-- HH19: double (nullable = false)\n |-- HH20: double (nullable = true)\n |-- HH21: double (nullable = true)\n |-- HH22: double (nullable = true)\n |-- HH23: double (nullable = true)\n |-- HH24: double (nullable = true)\n |-- HH25: double (nullable = false)\n |-- HH26: double (nullable = false)\n |-- HH27: double (nullable = true)\n |-- HH28: double (nullable = true)\n |-- HH29: double (nullable = true)\n |-- HH30: double (nullable = false)\n |-- HH31: double (nullable = true)\n |-- HH32: double (nullable = true)\n |-- HH33: double (nullable = true)\n |-- HH34: double (nullable = true)\n |-- HH35: double (nullable = true)\n |-- HH36: double (nullable = false)\n |-- HH37: double (nullable = true)\n |-- HH38: double (nullable = true)\n |-- HH39: double (nullable = true)\n |-- HH40: double (nullable = true)\n |-- HH41: double (nullable = true)\n |-- HH42: double (nullable = true)\n |-- HH43: double (nullable = true)\n |-- HH44: double (nullable = true)\n |-- HH45: double (nullable = true)\n |-- HH46: double (nullable = true)\n |-- HH47: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1541621231809_-1602960404","id":"20181107-130448_655374845","dateCreated":"2018-11-07T14:07:11-0600","dateStarted":"2019-01-30T14:48:27-0600","dateFinished":"2019-01-30T14:53:24-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:80"},{"text":"%md\n### hour_df dataframe\n\nInformation about energy consumption for each client, each hour. Retrieved from hh_df dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- HHX: Energy measurement for each hour of the day\n- HD: boolean indicating True for Holidays\n- MAX_E: max energy consumption \n- MAX_TIME: hour in day with max energy consumption\n\n### day_df dataframe\n\nInformation about energy consumption for each client, each day. Retrieved from hour_df dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- HD: boolean indicating True for Holidays\n- MAX_E: max energy consumption \n- MAX_TIME: hour in day with max energy consumption\n- DAY_E: Energy measurement for each day\n","user":"hduser","dateUpdated":"2019-01-30T14:53:24-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>hour_df dataframe</h3>\n<p>Information about energy consumption for each client, each hour. Retrieved from hh_df dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>HHX: Energy measurement for each hour of the day</li>\n  <li>HD: boolean indicating True for Holidays</li>\n  <li>MAX_E: max energy consumption</li>\n  <li>MAX_TIME: hour in day with max energy consumption</li>\n</ul>\n<h3>day_df dataframe</h3>\n<p>Information about energy consumption for each client, each day. Retrieved from hour_df dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>HD: boolean indicating True for Holidays</li>\n  <li>MAX_E: max energy consumption</li>\n  <li>MAX_TIME: hour in day with max energy consumption</li>\n  <li>DAY_E: Energy measurement for each day</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543516236219_1548539385","id":"20181129-123036_535779135","dateCreated":"2018-11-29T12:30:36-0600","dateStarted":"2019-01-30T14:53:24-0600","dateFinished":"2019-01-30T14:53:24-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:81"},{"text":"%pyspark\n\nhour_df=hh_df\nfor j in range (24):\n    hstr='H'+str(j)\n    hhstr0='HH'+str(2*j)\n    hhstr1='HH'+str(2*j+1)\n    hour_df = hour_df.withColumn(hstr, round(hour_df[hhstr0]+hour_df[hhstr1],3))\n    hour_df=hour_df.drop(hhstr0)\n    hour_df=hour_df.drop(hhstr1)\n        \nhour_df = hour_df.join(uk_hd, hour_df.DATE == uk_hd.HD_DATE, how = 'left_outer')\nhour_df=hour_df.drop(uk_hd.ID)\nhour_df=hour_df.withColumn(\"HD\", when(col(\"DATE\")==col(\"HD_DATE\"),True).otherwise(False))\nhour_df=hour_df.drop(\"HD_DATE\",\"HD_NAME\")\n\nslice_hours=hour_df.columns[3:27]\nhour_df=hour_df.withColumn(\"MAX_E\", greatest(*slice_hours))\n\ncond = (\"sqlFunctions.when\" + \".when\"\n        .join([\"(sqlFunctions.col('\" + c + \"') == sqlFunctions.col('MAX_E'), sqlFunctions.lit('\" + c + \"'))\" for c in slice_hours]))\n        \nhour_df=hour_df.withColumn(\"MAX_TIME\", eval(cond))\n\nhour_df=(hour_df\n        .withColumn(\"MAX_TIME\", regexp_extract('MAX_TIME', r'^H(\\d+)$', 1).alias('Title').cast(IntegerType())))\n\nday_df=hour_df.withColumn('DAY_E',hour_df['H0']*0)\n\nfor j in range (24):\n    hstr='H'+str(j)\n    day_df = day_df.withColumn('DAY_E', round((day_df['DAY_E']+day_df[hstr]),3))\n    day_df=day_df.drop(hstr)\n\nmes_et(startTimeQuery)\nprint(\"Hour data count: \"+str(hour_df.count())+' records')\nprint(\"Day data count: \"+str(day_df.count())+' records')\nhour_df.show(5)\nday_df.show(5)\nhour_df.printSchema()\nday_df.printSchema()","user":"hduser","dateUpdated":"2019-01-30T14:53:24-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 303.487262964 seconds\nHour data count: 3469352 records\nDay data count: 3469352 records\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+--------+\n| ID| METER_ID|      DATE|   H0|   H1|   H2|   H3|   H4|   H5|   H6|   H7|   H8|   H9|  H10|  H11|  H12|  H13|  H14|  H15|  H16|  H17|  H18|  H19|  H20|  H21|  H22|  H23|   HD|MAX_E|MAX_TIME|\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+--------+\n|  1|MAC000002|2012-10-13|0.532|0.531|0.347| 0.28|0.276|0.275|0.283|0.283|0.252|0.326|1.848| 0.26|0.209|0.209|0.348|0.369|0.308|0.406|0.648|1.196|0.506|0.463|0.423|0.509|false|1.848|      10|\n|  2|MAC000002|2012-10-14|0.428|0.314|0.208|0.206|0.199|0.196|0.197|0.195|0.238|0.542|  0.6|0.796| 0.45|0.254| 0.28|0.231|0.256|0.464|1.471|2.031|1.566|1.223|0.441|0.437|false|2.031|      19|\n|  3|MAC000002|2012-10-15|0.289|0.224|0.202|0.204|0.202|  0.2|0.199|0.246|1.195|0.269|0.209|0.628|0.278|0.205|0.204|0.203| 0.36|0.955|0.482|1.413|0.483|0.594|0.535|0.478|false|1.413|      19|\n|  4|MAC000002|2012-10-16|0.474|0.311|0.205|0.203|0.196|0.195|0.195|0.194|0.244| 0.51|0.216|  0.5|1.181|0.431|0.207|0.206|0.368|0.488|0.713|1.138| 0.42|0.414|0.401|0.359|false|1.181|      12|\n|  5|MAC000002|2012-10-17|0.368|0.324|0.218|0.202|0.199|0.198|0.197|0.191| 0.25|0.986|1.465|1.342|0.617|0.205|0.208|0.203|0.363|0.348|0.475|0.298|0.438|0.642|0.604|0.544|false|1.465|      10|\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+--------+\nonly showing top 5 rows\n\n+---+---------+----------+-----+-----+--------+------+\n| ID| METER_ID|      DATE|   HD|MAX_E|MAX_TIME| DAY_E|\n+---+---------+----------+-----+-----+--------+------+\n|  1|MAC000002|2012-10-13|false|1.848|      10|11.087|\n|  2|MAC000002|2012-10-14|false|2.031|      19|13.223|\n|  3|MAC000002|2012-10-15|false|1.413|      19|10.257|\n|  4|MAC000002|2012-10-16|false|1.181|      12| 9.769|\n|  5|MAC000002|2012-10-17|false|1.465|      10|10.885|\n+---+---------+----------+-----+-----+--------+------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- H0: double (nullable = true)\n |-- H1: double (nullable = true)\n |-- H2: double (nullable = true)\n |-- H3: double (nullable = true)\n |-- H4: double (nullable = true)\n |-- H5: double (nullable = true)\n |-- H6: double (nullable = true)\n |-- H7: double (nullable = true)\n |-- H8: double (nullable = true)\n |-- H9: double (nullable = true)\n |-- H10: double (nullable = true)\n |-- H11: double (nullable = true)\n |-- H12: double (nullable = true)\n |-- H13: double (nullable = true)\n |-- H14: double (nullable = true)\n |-- H15: double (nullable = true)\n |-- H16: double (nullable = true)\n |-- H17: double (nullable = true)\n |-- H18: double (nullable = true)\n |-- H19: double (nullable = true)\n |-- H20: double (nullable = true)\n |-- H21: double (nullable = true)\n |-- H22: double (nullable = true)\n |-- H23: double (nullable = true)\n |-- HD: boolean (nullable = false)\n |-- MAX_E: double (nullable = true)\n |-- MAX_TIME: integer (nullable = true)\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HD: boolean (nullable = false)\n |-- MAX_E: double (nullable = true)\n |-- MAX_TIME: integer (nullable = true)\n |-- DAY_E: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1543516313448_883740523","id":"20181129-123153_1365351373","dateCreated":"2018-11-29T12:31:53-0600","dateStarted":"2019-01-30T14:53:24-0600","dateFinished":"2019-01-30T14:56:03-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:82"},{"text":"%md\n### tariff_val dataframe\nInformation about tariff for ToU users (with price information). Retrieved from **tariff dataframe** generated in [Extraction Notebook](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ).\n\n- Normal tariff, 11.76 p/kWh\n- High tariff, 67.20 p/kWh\n- Low tariff, 3.99 p/kWh\n\nColumns are:\n\n- ID\n- DATE: Tariff date\n- HHX: tariff price for each half hour\n- HD: if date is holiday or not","user":"hduser","dateUpdated":"2019-01-30T14:56:03-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>tariff_val dataframe</h3>\n<p>Information about tariff for ToU users (with price information). Retrieved from <strong>tariff dataframe</strong> generated in <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">Extraction Notebook</a>.</p>\n<ul>\n  <li>Normal tariff, 11.76 p/kWh</li>\n  <li>High tariff, 67.20 p/kWh</li>\n  <li>Low tariff, 3.99 p/kWh</li>\n</ul>\n<p>Columns are:</p>\n<ul>\n  <li>ID</li>\n  <li>DATE: Tariff date</li>\n  <li>HHX: tariff price for each half hour</li>\n  <li>HD: if date is holiday or not</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543507749528_2049811845","id":"20181129-100909_1707779033","dateCreated":"2018-11-29T10:09:09-0600","dateStarted":"2019-01-30T14:56:03-0600","dateFinished":"2019-01-30T14:56:03-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:83"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\ntariff = tariff.withColumn(\"DATE\", to_date(tariff['Date'], \"dd/MM/yyyy\"))\ntariff_val=tariff\n\nfor col_name in tariff_val.columns[1::]:\n    tariff_val = (tariff_val\n                .withColumn(col_name, when(col(col_name) == 0, 11.76).when(col(col_name) == 1, 67.20).otherwise(3.99)))\n\n\ntariff_val = tariff_val.join(uk_hd, tariff_val.DATE == uk_hd.HD_DATE, how = 'left_outer')\ntariff_val=tariff_val.drop(uk_hd.ID)\ntariff_val=tariff_val.withColumn(\"HD\", when(col(\"DATE\")==col(\"HD_DATE\"),True).otherwise(False))\ntariff_val=tariff_val.drop(\"HD_DATE\")\ntariff_val=tariff_val.drop(\"HD_NAME\")\n#tariff_val=tariff_val.orderBy(\"DATE\")\n#tariff_val = tariff_val.withColumn(\"ID\", monotonically_increasing_id())\ntariff_val = tariff_val.select(row_number().over(Window().orderBy(\"DATE\")).alias(\"ID\"), col(\"*\"))\n\nmes_et(startTimeQuery)\n\nprint('Tariff data count: '+str(tariff_val.count())+' records')\ntariff_val.show(5)\ntariff_val.printSchema()\n\n","user":"hduser","dateUpdated":"2019-01-30T14:56:04-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 1.38686800003 seconds\nTariff data count: 365 records\n+---+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n| ID|      DATE|  HH0|  HH1|  HH2|  HH3|  HH4|  HH5|  HH6|  HH7|  HH8|  HH9| HH10| HH11| HH12| HH13| HH14| HH15| HH16| HH17| HH18| HH19| HH20| HH21| HH22| HH23| HH24| HH25| HH26| HH27| HH28| HH29| HH30| HH31| HH32| HH33| HH34| HH35| HH36| HH37| HH38| HH39| HH40| HH41| HH42| HH43| HH44| HH45| HH46| HH47|   HD|\n+---+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n|  1|2013-01-01|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76| true|\n|  2|2013-01-02|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|false|\n|  3|2013-01-03|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|false|\n|  4|2013-01-04|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76| 3.99| 3.99| 3.99| 3.99| 3.99| 3.99|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|false|\n|  5|2013-01-05|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|11.76|false|\n+---+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HH0: double (nullable = false)\n |-- HH1: double (nullable = false)\n |-- HH2: double (nullable = false)\n |-- HH3: double (nullable = false)\n |-- HH4: double (nullable = false)\n |-- HH5: double (nullable = false)\n |-- HH6: double (nullable = false)\n |-- HH7: double (nullable = false)\n |-- HH8: double (nullable = false)\n |-- HH9: double (nullable = false)\n |-- HH10: double (nullable = false)\n |-- HH11: double (nullable = false)\n |-- HH12: double (nullable = false)\n |-- HH13: double (nullable = false)\n |-- HH14: double (nullable = false)\n |-- HH15: double (nullable = false)\n |-- HH16: double (nullable = false)\n |-- HH17: double (nullable = false)\n |-- HH18: double (nullable = false)\n |-- HH19: double (nullable = false)\n |-- HH20: double (nullable = false)\n |-- HH21: double (nullable = false)\n |-- HH22: double (nullable = false)\n |-- HH23: double (nullable = false)\n |-- HH24: double (nullable = false)\n |-- HH25: double (nullable = false)\n |-- HH26: double (nullable = false)\n |-- HH27: double (nullable = false)\n |-- HH28: double (nullable = false)\n |-- HH29: double (nullable = false)\n |-- HH30: double (nullable = false)\n |-- HH31: double (nullable = false)\n |-- HH32: double (nullable = false)\n |-- HH33: double (nullable = false)\n |-- HH34: double (nullable = false)\n |-- HH35: double (nullable = false)\n |-- HH36: double (nullable = false)\n |-- HH37: double (nullable = false)\n |-- HH38: double (nullable = false)\n |-- HH39: double (nullable = false)\n |-- HH40: double (nullable = false)\n |-- HH41: double (nullable = false)\n |-- HH42: double (nullable = false)\n |-- HH43: double (nullable = false)\n |-- HH44: double (nullable = false)\n |-- HH45: double (nullable = false)\n |-- HH46: double (nullable = false)\n |-- HH47: double (nullable = false)\n |-- HD: boolean (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1543270115626_-249866646","id":"20181126-160835_79221582","dateCreated":"2018-11-26T16:08:35-0600","dateStarted":"2019-01-30T14:56:04-0600","dateFinished":"2019-01-30T14:56:06-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:84"},{"text":"%md\n## USERS DATABASE - Consumption patterns\n\nFinal database with main consumption characteristics by client (meter)\n\n- ID\n- METER_ID: Meter ID for each client\n- STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff\n- ACORN_CAT: Household ACORN category (0 to 5)\n- ACORN_CAT_NAME: HouseholdACORN category name\n- ACORN_GROUP: Household group (A to Q)\n- MEAN_MONTH: AVG montly consumption\n- MEAN_HD: AVG consumption on holidays\n- MEAN_WD: AVG consumption on labor days (tuesday, wednesday)\n- MEAN_SD: AVG consumption on sundays (weekend)\n- MEAN_MAX: AVG of Max consumption (per day)\n- MEAN_MAX_H: AVG of Max consumption (per hour) \n- MEAN_MAX_H_TIME: Hour in labor days (not HD, saturday or sunday) where a max consumption is measured","user":"hduser","dateUpdated":"2019-01-30T14:56:06-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>USERS DATABASE - Consumption patterns</h2>\n<p>Final database with main consumption characteristics by client (meter)</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff</li>\n  <li>ACORN_CAT: Household ACORN category (0 to 5)</li>\n  <li>ACORN_CAT_NAME: HouseholdACORN category name</li>\n  <li>ACORN_GROUP: Household group (A to Q)</li>\n  <li>MEAN_MONTH: AVG montly consumption</li>\n  <li>MEAN_HD: AVG consumption on holidays</li>\n  <li>MEAN_WD: AVG consumption on labor days (tuesday, wednesday)</li>\n  <li>MEAN_SD: AVG consumption on sundays (weekend)</li>\n  <li>MEAN_MAX: AVG of Max consumption (per day)</li>\n  <li>MEAN_MAX_H: AVG of Max consumption (per hour)</li>\n  <li>MEAN_MAX_H_TIME: Hour in labor days (not HD, saturday or sunday) where a max consumption is measured</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543540230396_933361013","id":"20181129-191030_2133670526","dateCreated":"2018-11-29T19:10:30-0600","dateStarted":"2019-01-30T14:56:06-0600","dateFinished":"2019-01-30T14:56:06-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:85"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\nmonth_avg=(month_ts\n        .groupBy('METER_ID')\n        .agg(sqlFunctions.avg(month_ts[\"MONTH_E\"]).alias(\"MEAN_MONTH\")))\n\nhd_avg=(day_df\n        .filter(day_df.HD)\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.DAY_E).alias(\"MEAN_HD\")))\n        \nwd_avg=(day_df\n        .filter(((date_format(day_df['DATE'], 'u')==2 )|(date_format(day_df['DATE'], 'u')==3)) & (day_df.HD==False))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.DAY_E).alias(\"MEAN_WD\")))              \n\nsd_avg=(day_df\n        .filter((date_format(day_df['DATE'], 'u')==7 ))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.DAY_E).alias(\"MEAN_SD\")))   \n        \nmax_day=(month_ts\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(month_ts.MAX_DAY_E).alias(\"MEAN_MAX\")))\n\nmax_avg_hour=(day_df\n        .filter((~day_df.HD) & (~(date_format(day_df['DATE'], 'u')==6 )|(date_format(day_df['DATE'], 'u')==7)))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.MAX_E).alias(\"MEAN_MAX_H\")))\n        \nmax_avg_hour_time=(day_df\n        .filter((~day_df.HD) & (~(date_format(day_df['DATE'], 'u')==6)|(date_format(day_df['DATE'], 'u')==7 )))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.MAX_TIME).alias(\"MEAN_MAX_H_TIME\")))\n        \nmax_avg_hour_time=(max_avg_hour_time\n        .withColumn('MEAN_MAX_H_TIME',(col('MEAN_MAX_H_TIME')).cast(IntegerType())))\n\n\nmeters_db=information_households.select([\"METER_ID\"]).join(month_avg, information_households.METER_ID==month_avg.METER_ID)\nmeters_db=meters_db.drop(month_avg.METER_ID)\n\nmeters_db=meters_db.join(hd_avg, meters_db.METER_ID==hd_avg.METER_ID)\nmeters_db=meters_db.drop(hd_avg.METER_ID)\n\nmeters_db=meters_db.join(wd_avg, meters_db.METER_ID==wd_avg.METER_ID)\nmeters_db=meters_db.drop(wd_avg.METER_ID)\n\nmeters_db=meters_db.join(sd_avg, meters_db.METER_ID==sd_avg.METER_ID)\nmeters_db=meters_db.drop(sd_avg.METER_ID)\n\nmeters_db=meters_db.join(max_day, meters_db.METER_ID==max_day.METER_ID)\nmeters_db=meters_db.drop(max_day.METER_ID)\n\nmeters_db=meters_db.join(max_avg_hour, meters_db.METER_ID==max_avg_hour.METER_ID)\nmeters_db=meters_db.drop(max_avg_hour.METER_ID)\n\nmeters_db=meters_db.join(max_avg_hour_time, meters_db.METER_ID==max_avg_hour_time.METER_ID)\nmeters_db=meters_db.drop(max_avg_hour_time.METER_ID)\n\nmeters_db=(meters_db\n        .withColumn(\"MEAN_MONTH\",round(\"MEAN_MONTH\",3))\n        .withColumn(\"MEAN_HD\",round(\"MEAN_HD\",3))\n        .withColumn(\"MEAN_WD\",round(\"MEAN_WD\",3))\n        .withColumn(\"MEAN_SD\",round(\"MEAN_SD\",3))\n        .withColumn(\"MEAN_MAX\",round(\"MEAN_MAX\",3))\n        .withColumn(\"MEAN_MAX_H\",round(\"MEAN_MAX_H\",3)))\n\n\n#meters_db=meters_db.orderBy(\"METER_ID\"\")\n#meters_db = meters_db.withColumn(\"ID\", monotonically_increasing_id())\nmeters_db = meters_db.select(row_number().over(Window().orderBy(\"METER_ID\")).alias(\"ID\"), col(\"*\"))\n\nmes_et(startTimeQuery)\nprint('Meters database count: '+str(meters_db.count())+' records')\nmeters_db.show(5)\nmeters_db.printSchema()","user":"hduser","dateUpdated":"2019-01-30T14:56:06-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 8.58099889755 seconds\nMeters database count: 5498 records\n+---+---------+----------+-------+-------+-------+--------+----------+---------------+\n| ID| METER_ID|MEAN_MONTH|MEAN_HD|MEAN_WD|MEAN_SD|MEAN_MAX|MEAN_MAX_H|MEAN_MAX_H_TIME|\n+---+---------+----------+-------+-------+-------+--------+----------+---------------+\n|  1|MAC000002|   363.633|   7.68| 11.906| 13.268|  21.351|     1.575|             17|\n|  2|MAC000003|    579.25| 22.257| 18.811| 18.741|  29.069|     3.318|              1|\n|  3|MAC000004|    51.643|   1.68|  1.667|    1.8|   2.691|     0.248|             11|\n|  4|MAC000005|   138.619|  5.544|  4.424|  4.679|    8.17|      0.82|             16|\n|  5|MAC000006|    86.455|  2.468|  2.855|  2.631|   4.235|     0.347|             11|\n+---+---------+----------+-------+-------+-------+--------+----------+---------------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- MEAN_MONTH: double (nullable = true)\n |-- MEAN_HD: double (nullable = true)\n |-- MEAN_WD: double (nullable = true)\n |-- MEAN_SD: double (nullable = true)\n |-- MEAN_MAX: double (nullable = true)\n |-- MEAN_MAX_H: double (nullable = true)\n |-- MEAN_MAX_H_TIME: integer (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1543442789324_894348649","id":"20181128-160629_840876992","dateCreated":"2018-11-28T16:06:29-0600","dateStarted":"2019-01-30T14:56:06-0600","dateFinished":"2019-01-30T15:04:01-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:86"},{"text":"%md\n### tariff_val time series dataframe\nInformation about tariff for ToU users (with price information). Retrieved from **tariff dataframe** generated in [Extraction Notebook](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ).\n\n- Normal tariff, 11.76 p/kWh\n- High tariff, 67.20 p/kWh\n- Low tariff, 3.99 p/kWh\n\nColumns are:\n\n- ID\n- TIMESTAMP: Tariff date\n- TARIFF: Tariff code name\n- VALUE:  Tariff value","user":"hduser","dateUpdated":"2019-01-30T15:04:01-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>tariff_val time series dataframe</h3>\n<p>Information about tariff for ToU users (with price information). Retrieved from <strong>tariff dataframe</strong> generated in <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">Extraction Notebook</a>.</p>\n<ul>\n  <li>Normal tariff, 11.76 p/kWh</li>\n  <li>High tariff, 67.20 p/kWh</li>\n  <li>Low tariff, 3.99 p/kWh</li>\n</ul>\n<p>Columns are:</p>\n<ul>\n  <li>ID</li>\n  <li>TIMESTAMP: Tariff date</li>\n  <li>TARIFF: Tariff code name</li>\n  <li>VALUE: Tariff value</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1544567096868_-1276497573","id":"20181211-162456_1449214931","dateCreated":"2018-12-11T16:24:56-0600","dateStarted":"2019-01-30T15:04:01-0600","dateFinished":"2019-01-30T15:04:01-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\ntariff_ts=tariff_ts.withColumn(\"Value\", when(col(\"Tariff\")==\"Normal\",11.76).otherwise(when(col(\"Tariff\")==\"High\",67.20).otherwise(3.99))).alias(\"VALUE\")\ntariff_ts=tariff_ts.withColumn(\"TariffDateTime\", to_timestamp(\"TariffDateTime\", \"dd/MM/yyyy HH:mm\"))\ntariff_ts=tariff_ts.filter(col(\"TariffDateTime\").isNotNull())\ntariff_ts = (tariff_ts.withColumnRenamed(\"TariffDateTime\", \"TIMESTAMP\")\n            .withColumnRenamed(\"Tariff\",\"TARIFF\")\n            .withColumnRenamed(\"Value\",\"VALUE\"))\ntariff_ts = tariff_ts.select(row_number().over(Window().orderBy(\"TIMESTAMP\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\nprint('Meters database count: '+str(tariff_ts.count())+' records')\ntariff_ts.show(5)\ntariff_ts.printSchema()","user":"hduser","dateUpdated":"2019-01-30T15:04:01-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.0712659358978 seconds\nMeters database count: 17518 records\n+---+-------------------+------+-----+\n| ID|          TIMESTAMP|TARIFF|VALUE|\n+---+-------------------+------+-----+\n|  1|2013-01-01 00:00:00|Normal|11.76|\n|  2|2013-01-01 00:30:00|Normal|11.76|\n|  3|2013-01-01 01:00:00|Normal|11.76|\n|  4|2013-01-01 01:30:00|Normal|11.76|\n|  5|2013-01-01 02:00:00|Normal|11.76|\n+---+-------------------+------+-----+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- TIMESTAMP: timestamp (nullable = true)\n |-- TARIFF: string (nullable = true)\n |-- VALUE: double (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1543528797460_-397740726","id":"20181129-155957_264682935","dateCreated":"2018-11-29T15:59:57-0600","dateStarted":"2019-01-30T15:04:01-0600","dateFinished":"2019-01-30T15:04:02-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:88"},{"text":"%pyspark\n","user":"hduser","dateUpdated":"2019-01-30T15:04:02-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544719210815_-1860769768","id":"20181213-104010_1202349357","dateCreated":"2018-12-13T10:40:10-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:89"}],"name":"JSGP/london/ETL-T","id":"2DWV7Z8C8","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"personalizedMode":"false","looknfeel":"default"},"info":{}}