{"paragraphs":[{"text":"%md\n## Time Series Forecasting (FireTS)","user":"hduser","dateUpdated":"2019-02-09T17:30:52-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Time Series Forecasting (FireTS)</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1549259319993_152536006","id":"20190130-104551_1955889085","dateCreated":"2019-02-03T23:48:39-0600","dateStarted":"2019-02-09T17:30:52-0600","dateFinished":"2019-02-09T17:30:52-0600","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:53"},{"text":"%pyspark\nsc.addFile(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/utils/fireTS/core.py\")\nsc.addFile(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/utils/fireTS/utils.py\")\nsc.addFile(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/utils/fireTS/models.py\")\n\nimport utils\nimport core\nimport models\nfrom models import NARX, DirectAutoRegressor\nimport pandas as pd\nimport os\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport re\nimport matplotlib.dates as mdates\nfrom pyspark.ml.evaluation import RegressionEvaluator","user":"hduser","dateUpdated":"2019-02-09T17:30:52-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1549259319994_-1472563243","id":"20190130-104538_1867821199","dateCreated":"2019-02-03T23:48:39-0600","dateStarted":"2019-02-09T17:30:52-0600","dateFinished":"2019-02-09T17:30:52-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:54"},{"text":"%pyspark\n\n#Select category to forecast\ncats=[1,2,3]\n\n# Number of experiments to run\nn_exp=5\n\n# Percentaje of data used to train\nperc=0.80","user":"hduser","dateUpdated":"2019-02-09T17:30:52-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1549259319995_-1064345955","id":"20190203-231322_1739126889","dateCreated":"2019-02-03T23:48:39-0600","dateStarted":"2019-02-09T17:30:52-0600","dateFinished":"2019-02-09T17:30:52-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:55"},{"text":"%pyspark\nct=0\ncolumns = ['CATEGORY','R2_NARX','RMSE_NARX', 'MSE_NARX', 'MAE_NARX','R2_DAR','RMSE_DAR', 'MSE_DAR', 'MAE_DAR']\nmetrics_cats = pd.DataFrame(columns=columns)\n\nfor category in cats:\n    \n    print(\"\\nCATEGORY \"+str(category))\n    #From dataframe generated at analytics_data notebook\n    data0=cat_weather_1h.filter(col(\"CAT\")==category)\n    data1=data0.toPandas()\n    data = data1.set_index('TIMESTAMP')\n    data.index = pd.to_datetime(data.index)\n    data=data.sort_values(by=['CAT', \"TIMESTAMP\"])\n    porc_train=int(perc*len(data))\n    #can be e_sum or e_avg\n    ytrain = data['e_avg'].iloc[:porc_train]\n    Xtrain = data.loc[:, ['TEMPERATURE']].iloc[:porc_train, :]\n\n    ytest = data['e_avg'].iloc[porc_train:-1]\n    Xtest = data.loc[:, ['TEMPERATURE']].iloc[porc_train:-1, :]\n\t\t\n\t# NARX with Random Forest and grid seach for hyperparameter tuning\n    r2_win_narx=0\n    model_win_narx=NARX(RandomForestRegressor(n_estimators=15), auto_order=24, exog_order=[24], exog_delay=[1])\n\n    for i in range(n_exp):\n\t\t\n        narx_mdl = NARX(RandomForestRegressor(n_estimators=15), auto_order=24, exog_order=[24], exog_delay=[1])\n        para_grid = {'n_estimators': [1, 5, 10, 20]}\n        narx_mdl.grid_search(Xtrain, ytrain, para_grid, verbose=0)\n        narx_mdl.fit(Xtrain, ytrain)\n        ypred = narx_mdl.predict(Xtest, ytest, step=1)\n        ypred = pd.Series(ypred, index=ytest.index)\n\n        results=pd.DataFrame({'TIMESTAMP':ypred.index, 'prediction':ypred.values, 'label':ytest.values})\n        results_df=spark.createDataFrame(results)  \n        results_df=results_df.filter(~(isnan(results_df[\"prediction\"])))\n        evaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"r2\")\n        r2 = evaluator.evaluate(results_df)\n\t\t#print(\"Run %d - R2 = %f\" % (i, r2))\n\t\t\n        if r2>r2_win_narx:\n            r2_win_narx=r2\n            evaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"rmse\")\n            rmse_win_narx = evaluator.evaluate(results_df)\n            evaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"mse\")\n            mse_win_narx = evaluator.evaluate(results_df)\n            evaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"mae\")\n            mae_win_narx = evaluator.evaluate(results_df)\n            model_win_narx=narx_mdl\n            y_pred_win=ypred\n            winner_exp=i\n            results_win_narx=results\n            results_win_narx_df=results_df\n\n    print(\"\\nBest model for NARX found at experiment %d\" %winner_exp)\n    print(\"Root Mean Squared Error (RMSE) on test data = %g\" % rmse_win_narx)\n    print(\"Mean Squared Error (MSE) on test data = %g\" % mse_win_narx)\n    print(\"Mean Absolute Error (MAE) on test data = %g\" % mae_win_narx)\n    print(\"R2 coefficient (R2) on test data = %g\" % r2_win_narx)\n\n    results_narx=results_win_narx_df.withColumn(\"R2\",lit(r2_win_narx)).withColumn(\"RMSE\",lit(rmse_win_narx))\n    results_narx=results_narx.select(row_number().over(Window().orderBy(\"TIMESTAMP\")).alias(\"ID\"), col(\"*\"))\n    results_narx.write.format(\"com.databricks.spark.csv\").option(\"header\", \"true\").save(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/analytics/forecasting/cats/narx_cat\"+str(category)+\".csv\")\n    \n    # Direct Auto Regressor with Random Forest and grid search for hyperparameter tuning\n    r2_win_dar=0\n    model_win_dar=DirectAutoRegressor(RandomForestRegressor(n_estimators=15), auto_order=24, exog_order=[24], exog_delay=[1], pred_step=1)\n    \n    \n    for i in range(n_exp):\n\t\t\n\t\t\n        dar_mdl = DirectAutoRegressor(RandomForestRegressor(n_estimators=15), auto_order=24, exog_order=[24], exog_delay=[1], pred_step=1)\n        para_grid = {'n_estimators': [1, 5, 10, 20]}\n        dar_mdl.grid_search(Xtrain, ytrain, para_grid, verbose=0)\n        dar_mdl.fit(Xtrain, ytrain)\n        ypred = dar_mdl.predict(Xtest, ytest)\n        ypred = pd.Series(ypred, index=ytest.index)\n\n\t\t\n        results=pd.DataFrame({'TIMESTAMP':ypred.index, 'prediction':ypred.values, 'label':ytest.values})\n        results_df=spark.createDataFrame(results)  \n        results_df=results_df.filter(~(isnan(results_df[\"prediction\"])))\n        evaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"r2\")\n        r2 = evaluator.evaluate(results_df)\n\t\t#print(\"Run %d - R2 = %f\" % (i, r2))\n\t\t\n        if r2>r2_win_dar:\n            r2_win_dar=r2\n            evaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"rmse\")\n            rmse_win_dar = evaluator.evaluate(results_df)\n            evaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"mse\")\n            mse_win_dar = evaluator.evaluate(results_df)\n            evaluator = RegressionEvaluator(labelCol=\"label\", predictionCol=\"prediction\", metricName=\"mae\")\n            mae_win_dar = evaluator.evaluate(results_df)\n            \n            model_win_dar=dar_mdl\n            y_pred_win=ypred\n            winner_exp=i\n            results_win_dar=results\n            results_win_dar_df=results_df\n    \n    \n    print(\"\\nBest model for DAR found at experiment %d\" %winner_exp)\n    print(\"Root Mean Squared Error (RMSE) on test data = %g\" % rmse_win_dar)\n    print(\"Mean Squared Error (MSE) on test data = %g\" % mse_win_dar)\n    print(\"Mean Absolute Error (MAE) on test data = %g\" % mae_win_dar)\n    print(\"R2 coefficient (R2) on test data = %g\" % r2_win_dar)\n    \n    \n    results_dar=results_win_dar_df.withColumn(\"R2\",lit(r2)).withColumn(\"RMSE\",lit(rmse))\n    results_dar=results_dar.select(row_number().over(Window().orderBy(\"TIMESTAMP\")).alias(\"ID\"), col(\"*\"))\n    results_dar.write.format(\"com.databricks.spark.csv\").option(\"header\", \"true\").save(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/analytics/forecasting/cats/dar_cat\"+str(category)+\".csv\")\n    \n    metrics_cats.loc[ct]=[category,r2_win_narx,rmse_win_narx,mse_win_narx,mae_win_narx,r2_win_dar,rmse_win_dar,mse_win_dar,mae_win_dar]\n    ct=ct+1\n","user":"hduser","dateUpdated":"2019-02-09T17:30:52-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nCATEGORY 1\n\nBest model for NARX found at experiment 3\nRoot Mean Squared Error (RMSE) on test data = 0.0434956\nMean Squared Error (MSE) on test data = 0.00189186\nMean Absolute Error (MAE) on test data = 0.0301427\nR2 coefficient (R2) on test data = 0.974064\n\nBest model for DAR found at experiment 1\nRoot Mean Squared Error (RMSE) on test data = 0.0436\nMean Squared Error (MSE) on test data = 0.00190096\nMean Absolute Error (MAE) on test data = 0.030092\nR2 coefficient (R2) on test data = 0.97394\n\nCATEGORY 2\n\nBest model for NARX found at experiment 3\nRoot Mean Squared Error (RMSE) on test data = 0.0210939\nMean Squared Error (MSE) on test data = 0.000444953\nMean Absolute Error (MAE) on test data = 0.0145488\nR2 coefficient (R2) on test data = 0.983516\n\nBest model for DAR found at experiment 4\nRoot Mean Squared Error (RMSE) on test data = 0.0211683\nMean Squared Error (MSE) on test data = 0.000448098\nMean Absolute Error (MAE) on test data = 0.0145293\nR2 coefficient (R2) on test data = 0.9834\n\nCATEGORY 3\n\nBest model for NARX found at experiment 0\nRoot Mean Squared Error (RMSE) on test data = 0.0160398\nMean Squared Error (MSE) on test data = 0.000257274\nMean Absolute Error (MAE) on test data = 0.0117909\nR2 coefficient (R2) on test data = 0.973202\n\nBest model for DAR found at experiment 0\nRoot Mean Squared Error (RMSE) on test data = 0.0161468\nMean Squared Error (MSE) on test data = 0.000260719\nMean Absolute Error (MAE) on test data = 0.0118746\nR2 coefficient (R2) on test data = 0.972843\n"}]},"apps":[],"jobName":"paragraph_1549259319995_-444531047","id":"20190203-234633_77322638","dateCreated":"2019-02-03T23:48:39-0600","dateStarted":"2019-02-09T17:30:52-0600","dateFinished":"2019-02-09T17:40:24-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:56"},{"text":"%pyspark\nresults_cats = spark.createDataFrame(metrics_cats)\nresults_cats=results_cats.select(row_number().over(Window().orderBy(\"CATEGORY\")).alias(\"ID\"), col(\"*\"))\nresults_cats.write.format(\"com.databricks.spark.csv\").option(\"header\", \"true\").save(\"hdfs://big0.iie.org.mx:9000/JSGP/datasets/london/analytics/forecasting/cats/results_cats.csv\")\n    ","user":"hduser","dateUpdated":"2019-02-09T17:40:24-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1549259319996_176764734","id":"20190130-124000_1598013172","dateCreated":"2019-02-03T23:48:39-0600","dateStarted":"2019-02-09T17:40:24-0600","dateFinished":"2019-02-09T17:40:24-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:57"},{"text":"%pyspark\n","user":"hduser","dateUpdated":"2019-02-09T17:40:24-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1549755624071_-565869367","id":"20190209-174024_1473473377","dateCreated":"2019-02-09T17:40:24-0600","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:58"}],"name":"JSGP/london/analytics/forecasting_cats","id":"2E3W19JDW","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}