{"paragraphs":[{"text":"%md\n# **ETL - TRANSFORMATION**\n\nThis notebook takes data from *ETL - EXTRACTION* notebook and performs all transformation needed. Please run [ETL - EXTRACTION](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ) notebook first. Final processed dataframes are: \n\n1. uk_hd\n2. acorn_cats\n3. acorn_groups\n4. acorn_populaton: DO NOT CONSIDER\n5. acorn_households: DO NOT CONSIDER\n2. information_households\n3. weather_daily_darksky\n4. weather_hourly_darksky\n5. daily_block (0-111): DO NOT CONSIDER\n6. half_block (0-111): DO NOT CONSIDER \n7. hh_block (0-111): DO NOT CONSIDER\n5. hh_df\n6. hour_df\n7. day_df\n8. month_df\n9. tariff_val\n10. meters_db","user":"hduser","dateUpdated":"2018-11-30T15:29:18-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1><strong>ETL - TRANSFORMATION</strong></h1>\n<p>This notebook takes data from <em>ETL - EXTRACTION</em> notebook and performs all transformation needed. Please run <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">ETL - EXTRACTION</a> notebook first. Final processed dataframes are: </p>\n<ol>\n  <li>uk_hd</li>\n  <li>acorn_cats</li>\n  <li>acorn_groups</li>\n  <li>acorn_populaton: DO NOT CONSIDER</li>\n  <li>acorn_households: DO NOT CONSIDER</li>\n  <li>information_households</li>\n  <li>weather_daily_darksky</li>\n  <li>weather_hourly_darksky</li>\n  <li>daily_block (0-111): DO NOT CONSIDER</li>\n  <li>half_block (0-111): DO NOT CONSIDER</li>\n  <li>hh_block (0-111): DO NOT CONSIDER</li>\n  <li>hh_df</li>\n  <li>hour_df</li>\n  <li>day_df</li>\n  <li>month_df</li>\n  <li>tariff_val</li>\n  <li>meters_db</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947125_658063287","id":"20181107-135809_84367222","dateCreated":"2018-11-30T14:32:27-0600","dateStarted":"2018-11-30T15:29:18-0600","dateFinished":"2018-11-30T15:29:18-0600","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:55"},{"text":"%md\n### Imports and Basic Functions\n\nImport all needed libraries. Some pre-defined variables and functions are:\n\n1. test: How many of 112 blocks you need to dismiss for tests. Test=0 means you consider all 112 blocks in data processing\n2. count_null(col_name): Count null values for a column\n3. null_to_zero(dataframe, display): Replace null values from \"dataframe\" to zero (integer). If Display is true, shows column counts for null values before and after this function\n4. get_df_name(name): Return a dataframe with name= _name_ string","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Imports and Basic Functions</h3>\n<p>Import all needed libraries. Some pre-defined variables and functions are:</p>\n<ol>\n  <li>test: How many of 112 blocks you need to dismiss for tests. Test=0 means you consider all 112 blocks in data processing</li>\n  <li>count_null(col_name): Count null values for a column</li>\n  <li>null_to_zero(dataframe, display): Replace null values from &ldquo;dataframe&rdquo; to zero (integer). If Display is true, shows column counts for null values before and after this function</li>\n  <li>get_df_name(name): Return a dataframe with name= <em>name</em> string</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947126_-1909386091","id":"20181128-115514_2019636023","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:56"},{"text":"%pyspark\nfrom pyspark.sql.types import StructType\nfrom pyspark.sql.types import StructField\nfrom pyspark.sql import functions as sqlFunctions\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.functions import unix_timestamp,from_unixtime, date_format\nfrom pyspark.sql.functions import when, col\nfrom pyspark.sql.functions import monotonically_increasing_id\nfrom pyspark.sql.types import DateType\nfrom datetime import datetime\nimport subprocess\n\ngbl = globals()\n#How many of 112 blocks you need to dismiss for tests. Test=0 means you consider all 112 blocks in data processing\ntest=0\n\n# Count null values for a column\ndef count_null(col_name):\n    return sum(col(col_name).isNull().cast('integer')).alias(col_name)\n\n# Replace null values from \"dataframe\" to zero (integer)\n# display = true for showing column counts for null values before and after this function\ndef null_to_zero(dataframe, display):\n    bad_rows=dataframe.select([count(when(col(c).isNull(), c)).alias(c) for c in dataframe.columns])\n    \n    exprs = []\n    for col_name in bad_rows.columns:\n        if(bad_rows.groupBy().agg(sum(col_name)).collect()[0][0])>0:\n            exprs.append(col_name)\n    if (display==True):\n        print(\"\\nColumns with null values\")\n        print(exprs)\n    if (len(exprs)>0):\n        #print(\"\\nNull values count per column\")\n        #bad_rows.show()\n        for col_name in exprs:\n            dataframe = dataframe.na.fill({col_name: 0})\n        exprs = []\n        for col_name in dataframe.columns:\n            exprs.append(count_null(col_name))\n        #print(\"\\nNull values count per column after function\")\n        #dataframe.agg(*exprs).show()\n    if (display==True):\n        print(\"Dataframe count: \"+str(dataframe.count())+' records')\n    return dataframe\n    \ndef get_df_name(name):\n    for (k, v) in globals().items():\n        #if isinstance(v, DataFrame) for DataType filter instead name\n        if (k==name):\n            return v\n    ","user":"hduser","dateUpdated":"2018-12-07T13:51:41-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1543609947126_369143291","id":"20181025-135053_1999611944","dateCreated":"2018-11-30T14:32:27-0600","dateStarted":"2018-12-07T13:51:41-0600","dateFinished":"2018-12-07T13:51:41-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:57"},{"text":"%md\n### uk_hd dataframe\n\nConvert String to Date in uk_hd and remove null records\n\n- ID\n- HD_DATE: Holiday Date\n- HD_NAME: Holiday Name","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>uk_hd dataframe</h3>\n<p>Convert String to Date in uk_hd and remove null records</p>\n<ul>\n  <li>ID</li>\n  <li>HD_DATE: Holiday Date</li>\n  <li>HD_NAME: Holiday Name</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947127_1772708859","id":"20181128-120003_478121274","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:58"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\n# Convert String to Date in uk_hd\nuk_hd = (uk_hd\n        .withColumn(\"HD_DATE\", to_date(uk_hd.HD_DATE, \"dd/MM/yyyy\")))\n        \nuk_hd=null_to_zero(uk_hd, False)\nuk_hd = uk_hd.select(row_number().over(Window().orderBy(\"HD_DATE\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\n\nprint(\"Holidays data count: \"+str(uk_hd.count())+' records')\nuk_hd.show(uk_hd.count())\nuk_hd.printSchema()\n","user":"hduser","dateUpdated":"2018-12-11T14:51:08-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Fail to execute line 3: uk_hd = (uk_hd\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-7490780164270390471.py\", line 375, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 3, in <module>\nAttributeError: 'list' object has no attribute 'withColumn'\n"}]},"apps":[],"jobName":"paragraph_1543609947127_1605167046","id":"20181107-133346_1458365935","dateCreated":"2018-11-30T14:32:27-0600","dateStarted":"2018-12-11T14:51:08-0600","dateFinished":"2018-12-11T14:51:08-0600","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:59"},{"text":"%md\n### acorn_cats dataframe\nA list with Households' ACORN categories and the % of population for each one.\n\n- ACORN_CAT: ID Category number (0-5)\n- ACORN_CAT_NAME: Category name\n- CAT_POPULATION: % of households classified under each category\n\nMore information about households ACORN categories in [ACORN household User Guide](http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf)","user":"hduser","dateUpdated":"2018-11-30T15:27:14-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>acorn_cats dataframe</h3>\n<p>A list with Households&rsquo; ACORN categories and the % of population for each one.</p>\n<ul>\n  <li>ACORN_CAT: ID Category number (0-5)</li>\n  <li>ACORN_CAT_NAME: Category name</li>\n  <li>CAT_POPULATION: % of households classified under each category</li>\n</ul>\n<p>More information about households ACORN categories in <a href=\"http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf\">ACORN household User Guide</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543612350348_-1273166127","id":"20181130-151230_63451043","dateCreated":"2018-11-30T15:12:30-0600","dateStarted":"2018-11-30T15:27:14-0600","dateFinished":"2018-11-30T15:27:14-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:60"},{"text":"%pyspark\nacorn_cats.show()","user":"hduser","dateUpdated":"2018-11-30T15:15:38-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+--------------------+--------------+\n|ACORN_CAT|      ACORN_CAT_NAME|CAT_POPULATION|\n+---------+--------------------+--------------+\n|        1|  Affluent Achievers|   0.216169398|\n|        2|   Rising Prosperity|   0.097081371|\n|        3|Comfortable Comun...|   0.267579841|\n|        4|Financially Stret...|   0.231608437|\n|        5|     Urban Adversity|   0.185077406|\n|        0|               Other|   0.002483547|\n+---------+--------------------+--------------+\n\n"}]},"apps":[],"jobName":"paragraph_1543612435528_-1548941535","id":"20181130-151355_1376244567","dateCreated":"2018-11-30T15:13:55-0600","dateStarted":"2018-11-30T15:15:38-0600","dateFinished":"2018-11-30T15:15:38-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61"},{"text":"%md\n### acorn_groups dataframe\nA list with Households' ACORN groups and the category for each one.\n\n- ID\n- ACORN_CAT: Category number (0-5)\n- ACORN_GROUP: ACORN Group (A to Q)\n- ACORN_CAT_NAME: Category name\n\nMore information about households ACORN categories in [ACORN household User Guide](http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf)","user":"hduser","dateUpdated":"2018-11-30T15:15:57-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>acorn_groups dataframe</h3>\n<p>A list with Households&rsquo; ACORN groups and the category for each one.</p>\n<ul>\n  <li>ID</li>\n  <li>ACORN_CAT: Category number (0-5)</li>\n  <li>ACORN_GROUP: ACORN Group (A to Q)</li>\n  <li>ACORN_CAT_NAME: Category name</li>\n</ul>\n<p>More information about households ACORN categories in <a href=\"http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf\">ACORN household User Guide</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543611940939_2143595767","id":"20181130-150540_355569937","dateCreated":"2018-11-30T15:05:40-0600","dateStarted":"2018-11-30T15:15:57-0600","dateFinished":"2018-11-30T15:15:57-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62"},{"text":"%pyspark\nstartTimeQuery = time.time()\nacorn_groups=null_to_zero(acorn_groups, False)\nacorn_groups = acorn_groups.select(row_number().over(Window().orderBy(\"ACORN_CAT\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\nacorn_groups.show()\nacorn_groups.printSchema()","user":"hduser","dateUpdated":"2018-11-30T15:06:27-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 10.1580469608 seconds\n+---+---+---------+-----------+--------------------+\n| ID| ID|ACORN_CAT|ACORN_GROUP|      ACORN_CAT_NAME|\n+---+---+---------+-----------+--------------------+\n|  1|  1|        0|     ACORN-|               Other|\n|  2|  2|        1|    ACORN-A|  Affluent Achievers|\n|  3|  3|        1|    ACORN-B|  Affluent Achievers|\n|  4|  4|        1|    ACORN-C|  Affluent Achievers|\n|  5|  5|        2|    ACORN-D|   Rising Prosperity|\n|  6|  6|        2|    ACORN-E|   Rising Prosperity|\n|  7|  7|        3|    ACORN-F|Comfortable Comun...|\n|  8|  8|        3|    ACORN-G|Comfortable Comun...|\n|  9|  9|        3|    ACORN-H|Comfortable Comun...|\n| 10| 10|        3|    ACORN-I|Comfortable Comun...|\n| 11| 11|        3|    ACORN-J|Comfortable Comun...|\n| 12| 12|        4|    ACORN-K|Financially Stret...|\n| 13| 13|        4|    ACORN-L|Financially Stret...|\n| 14| 14|        4|    ACORN-M|Financially Stret...|\n| 15| 15|        4|    ACORN-N|Financially Stret...|\n| 16| 16|        5|    ACORN-O|     Urban Adversity|\n| 17| 17|        5|    ACORN-P|     Urban Adversity|\n| 18| 18|        5|    ACORN-Q|     Urban Adversity|\n+---+---+---------+-----------+--------------------+\n\nroot\n |-- ID: integer (nullable = true)\n |-- ID: integer (nullable = true)\n |-- ACORN_CAT: integer (nullable = true)\n |-- ACORN_GROUP: string (nullable = true)\n |-- ACORN_CAT_NAME: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1543611747414_-1594173072","id":"20181130-150227_1521347295","dateCreated":"2018-11-30T15:02:27-0600","dateStarted":"2018-11-30T15:06:27-0600","dateFinished":"2018-11-30T15:06:41-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:63"},{"text":"%md\n### acorn_population dataframe\nRemove null records from dataframe.\n\n- THEME: Main theme for description\n- SUBJECT: Theme subcategory\n- VARIABLE: Subject subcategory\n- ARCORN_X: Index of population for each variable classified with the indicated ACORN group. An index of 100 shows that the proportion of the variable is the same as the base. More information about index available at [ACORN knowledge sheet](https://www.caci.co.uk/sites/default/files/resources/Acorn_knowledge_sheet.xlsm)\n\n\nNext paragraph is only intended for details about **POPULATION**. For **HOUSEHOLDS** information, use _**acorn_households**_ dataframe. More information available at [ACORN Site](https://www.caci.co.uk/products/product/acorn)","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>acorn_population dataframe</h3>\n<p>Remove null records from dataframe.</p>\n<ul>\n  <li>THEME: Main theme for description</li>\n  <li>SUBJECT: Theme subcategory</li>\n  <li>VARIABLE: Subject subcategory</li>\n  <li>ARCORN_X: Index of population for each variable classified with the indicated ACORN group. An index of 100 shows that the proportion of the variable is the same as the base. More information about index available at <a href=\"https://www.caci.co.uk/sites/default/files/resources/Acorn_knowledge_sheet.xlsm\">ACORN knowledge sheet</a></li>\n</ul>\n<p>Next paragraph is only intended for details about <strong>POPULATION</strong>. For <strong>HOUSEHOLDS</strong> information, use <em><strong>acorn_households</strong></em> dataframe. More information available at <a href=\"https://www.caci.co.uk/products/product/acorn\">ACORN Site</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947128_489240140","id":"20181112-085912_8103637","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:64"},{"text":"%pyspark\nstartTimeQuery = time.time()  \nacorn_population=null_to_zero(acorn_population, False)\nmes_et(startTimeQuery)\n#acorn_population.show(5)\n#acorn_population.printSchema()\n","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 18.7201931477 seconds\n"}]},"apps":[],"jobName":"paragraph_1543609947128_-1068904074","id":"20181107-133416_1503284639","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"text":"%md\n### acorn_households dataframe\n\nRemove null records from dataframe\n\n- THEME: Main theme for description\n- SUBJECT: Theme subcategory\n- VARIABLE: Subject subcategory\n- UK_BASE: % of households for each variable\n- CX_INDEX: Index of households for each variable classified with the indicated ACORN category\n- CX_PERC: % of households for each variable classified with the indicated ACORN category\n\nMore information about index available at [ACORN household knowledge sheet](http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_Knowledge.xls)","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>acorn_households dataframe</h3>\n<p>Remove null records from dataframe</p>\n<ul>\n  <li>THEME: Main theme for description</li>\n  <li>SUBJECT: Theme subcategory</li>\n  <li>VARIABLE: Subject subcategory</li>\n  <li>UK_BASE: % of households for each variable</li>\n  <li>CX_INDEX: Index of households for each variable classified with the indicated ACORN category</li>\n  <li>CX_PERC: % of households for each variable classified with the indicated ACORN category</li>\n</ul>\n<p>More information about index available at <a href=\"http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_Knowledge.xls\">ACORN household knowledge sheet</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947129_462925147","id":"20181128-120653_466580973","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:66"},{"text":"%pyspark\nstartTimeQuery = time.time()\nacorn_households=null_to_zero(acorn_households, False)\nmes_et(startTimeQuery)\n#acorn_households.show(5)\n#acorn_households.printSchema()\n","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 2.06945586205 seconds\n"}]},"apps":[],"jobName":"paragraph_1543609947129_-1674953809","id":"20181112-085906_65677571","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"text":"%md\n### information_households dataframe\n\nGive an ACORN Category (0 to 5)  to each ACORN group (A to Q) and remove null records from dataframe.\n\n- ID\n- METER_ID: Meter ID for each client\n- STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff\n- ACORN_CAT: Household ACORN category (0 to 5)\n- ACORN_CAT_NAME: HouseholdACORN category name\n- ACORN_GROUP: Household group (A to Q)\n\nMore information about households ACORN categories in [ACORN household User Guide](http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf)","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>information_households dataframe</h3>\n<p>Give an ACORN Category (0 to 5) to each ACORN group (A to Q) and remove null records from dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff</li>\n  <li>ACORN_CAT: Household ACORN category (0 to 5)</li>\n  <li>ACORN_CAT_NAME: HouseholdACORN category name</li>\n  <li>ACORN_GROUP: Household group (A to Q)</li>\n</ul>\n<p>More information about households ACORN categories in <a href=\"http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf\">ACORN household User Guide</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947130_-1531708823","id":"20181128-120924_1668978468","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:68"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\ninformation_households=information_households.drop(\"ACORN_GROUP_NAME\") \ninformation_households=information_households.drop(\"FILE\") \ninformation_households=null_to_zero(information_households, False)\n    \na = information_households.alias('a')\nb = acorn_groups.alias('b')\ninformation_households = a.join(b, a.ACORN_GROUP == b.ACORN_GROUP)\ninformation_households=(information_households\n                        .select(\"METER_ID\",\"STD_TOU\",'ACORN_CAT','ACORN_CAT_NAME',a.ACORN_GROUP))\n                        \ninformation_households =(information_households\n                        .select(row_number().over(Window().orderBy(\"ACORN_CAT\", \"METER_ID\")).alias(\"ID\"), col(\"*\")))\n\nmes_et(startTimeQuery)\n\nprint(\"Information Households data count: \"+str(information_households.count())+' records')\ninformation_households.show(5)\ninformation_households.printSchema()","user":"hduser","dateUpdated":"2018-11-30T14:55:50-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.562376976013 seconds\nInformation Households data count: 5517 records\n+---+---------+-------+---------+------------------+-----------+\n| ID| METER_ID|STD_TOU|ACORN_CAT|    ACORN_CAT_NAME|ACORN_GROUP|\n+---+---------+-------+---------+------------------+-----------+\n|  1|MAC001074|    ToU|        0|             Other|     ACORN-|\n|  2|MAC005492|    ToU|        0|             Other|     ACORN-|\n|  3|MAC000002|    Std|        1|Affluent Achievers|    ACORN-A|\n|  4|MAC000005|    ToU|        1|Affluent Achievers|    ACORN-C|\n|  5|MAC000017|    ToU|        1|Affluent Achievers|    ACORN-C|\n+---+---------+-------+---------+------------------+-----------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- STD_TOU: string (nullable = true)\n |-- ACORN_CAT: integer (nullable = true)\n |-- ACORN_CAT_NAME: string (nullable = true)\n |-- ACORN_GROUP: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1543609947130_-1525850318","id":"20181107-133427_257021912","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"text":"%md\n### weather_daily_darksky dataframe\n\nRemove null records from dataframe and cast time and date fields to right formats. Details for each column available at [Dark Sky API](https://darksky.net/dev/docs#response-format)\n","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>weather_daily_darksky dataframe</h3>\n<p>Remove null records from dataframe and cast time and date fields to right formats. Details for each column available at <a href=\"https://darksky.net/dev/docs#response-format\">Dark Sky API</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947131_63194365","id":"20181128-132938_1595055429","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"text":"%pyspark\nstartTimeQuery = time.time()\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_MAX_TIME\", (weather_daily_darksky.TEMP_MAX_TIME.cast(TimestampType())))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_MIN_TIME\", weather_daily_darksky.TEMP_MIN_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_MIN_TIME\", weather_daily_darksky.APAR_TEMP_MIN_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_HI_TIME\", weather_daily_darksky.APAR_TEMP_HI_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TIME\", weather_daily_darksky.TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"SUNSET_TIME\", weather_daily_darksky.SUNSET_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"SUNRISE_TIME\", weather_daily_darksky.SUNRISE_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_HI_TIME\", weather_daily_darksky.TEMP_HI_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"UV_INDEX_TIME\", weather_daily_darksky.UV_INDEX_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_LO_TIME\", weather_daily_darksky.TEMP_LO_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_MAX_TIME\", weather_daily_darksky.APAR_TEMP_MAX_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_LO_TIME\", weather_daily_darksky.APAR_TEMP_LO_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"DATE\", to_date('TIME', \"yyyy-MM-dd\"))\n\nweather_daily_darksky=weather_daily_darksky.select(\"DATE\",\"TEMP_MAX\",\"TEMP_MAX_TIME\",\"TEMP_MIN\",\"TEMP_MIN_TIME\",\"PRESSURE\",\"HUMIDITY\",\"UV_INDEX\",\"SUNRISE_TIME\",\"SUNSET_TIME\")\n\ntimeFmt = \"yyyy-MM-dd'T'HH:mm:ss\"\ntimeDiff = (sqlFunctions.unix_timestamp(weather_daily_darksky[\"SUNSET_TIME\"], format=timeFmt)\n            - sqlFunctions.unix_timestamp(weather_daily_darksky[\"SUNRISE_TIME\"], format=timeFmt))/60/60\n\nweather_daily_darksky = weather_daily_darksky.withColumn(\"LIGHT_HOURS\", round(timeDiff,2))\n\nweather_daily_darksky=null_to_zero(weather_daily_darksky, True)\n\nweather_daily_darksky=(weather_daily_darksky\n                    .withColumn(\"UV_INDEX\", weather_daily_darksky.UV_INDEX.cast(IntegerType())))\n                    \nweather_daily_darksky =(weather_daily_darksky\n                    .select(row_number().over(Window().orderBy(\"DATE\")).alias(\"ID\"), col(\"*\")))\n\nmes_et(startTimeQuery)\nprint(\"Weather daily data count: \"+str(weather_daily_darksky.count())+' records')\nweather_daily_darksky.show(5) \nweather_daily_darksky.printSchema()","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nColumns with null values\n['UV_INDEX']\nDataframe count: 882 records\nELAPSED TIME: 2.35951089859 seconds\nWeather daily data count: 882 records\n+---+----------+--------+-------------------+--------+-------------------+--------+--------+--------+-------------------+-------------------+-----------+\n| ID|      DATE|TEMP_MAX|      TEMP_MAX_TIME|TEMP_MIN|      TEMP_MIN_TIME|PRESSURE|HUMIDITY|UV_INDEX|       SUNRISE_TIME|        SUNSET_TIME|LIGHT_HOURS|\n+---+----------+--------+-------------------+--------+-------------------+--------+--------+--------+-------------------+-------------------+-----------+\n|  1|2011-11-01|   15.57|2011-11-01 15:00:00|    9.68|2011-11-01 22:00:00| 1009.46|    0.84|       1|2011-11-01 06:54:29|2011-11-01 16:36:03|       9.69|\n|  2|2011-11-02|   15.19|2011-11-02 23:00:00|    8.88|2011-11-02 03:00:00| 1004.79|    0.87|       1|2011-11-02 06:56:16|2011-11-02 16:34:15|       9.63|\n|  3|2011-11-03|   17.41|2011-11-03 14:00:00|   12.79|2011-11-03 21:00:00|   993.4|    0.89|       1|2011-11-03 06:58:03|2011-11-03 16:32:29|       9.57|\n|  4|2011-11-04|   15.54|2011-11-04 11:00:00|   11.53|2011-11-04 23:00:00|  995.54|    0.91|       1|2011-11-04 06:59:49|2011-11-04 16:30:44|       9.52|\n|  5|2011-11-05|   13.94|2011-11-05 15:00:00|   10.17|2011-11-05 02:00:00| 1007.39|    0.92|       1|2011-11-05 07:01:36|2011-11-05 16:29:01|       9.46|\n+---+----------+--------+-------------------+--------+-------------------+--------+--------+--------+-------------------+-------------------+-----------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- DATE: date (nullable = true)\n |-- TEMP_MAX: double (nullable = true)\n |-- TEMP_MAX_TIME: timestamp (nullable = true)\n |-- TEMP_MIN: double (nullable = true)\n |-- TEMP_MIN_TIME: timestamp (nullable = true)\n |-- PRESSURE: double (nullable = true)\n |-- HUMIDITY: double (nullable = true)\n |-- UV_INDEX: integer (nullable = true)\n |-- SUNRISE_TIME: timestamp (nullable = true)\n |-- SUNSET_TIME: timestamp (nullable = true)\n |-- LIGHT_HOURS: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1543609947131_965623617","id":"20181105-162311_1635293860","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"text":"%md\n### weather_hourly_darksky dataframe\n\nRemove null records from dataframe and cast time and date fields to right formats. Details for each column available at [Dark Sky API](https://darksky.net/dev/docs#response-format)","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>weather_hourly_darksky dataframe</h3>\n<p>Remove null records from dataframe and cast time and date fields to right formats. Details for each column available at <a href=\"https://darksky.net/dev/docs#response-format\">Dark Sky API</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947132_69570513","id":"20181128-133509_1486972675","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\nweather_hourly_darksky=(weather_hourly_darksky\n                        .withColumn(\"DATETIME\", weather_hourly_darksky.TIME.cast(TimestampType())))\n                        \nweather_hourly_darksky=weather_hourly_darksky.select(\"DATETIME\", \"TEMPERATURE\",\"PRESSURE\",\"HUMIDITY\")\nweather_hourly_darksky=null_to_zero(weather_hourly_darksky, True)\n\nweather_hourly_darksky =(weather_hourly_darksky\n                    .select(row_number().over(Window().orderBy(\"DATETIME\")).alias(\"ID\"), col(\"*\")))\n\nmes_et(startTimeQuery)\n\nprint(\"Weather hourly data count: \"+str(weather_hourly_darksky.count())+' records')\nweather_hourly_darksky.show(5)\nweather_hourly_darksky.printSchema()\n","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nColumns with null values\n['PRESSURE']\nDataframe count: 21165 records\nELAPSED TIME: 1.02604699135 seconds\nWeather hourly data count: 21165 records\n+---+-------------------+-----------+--------+--------+\n| ID|           DATETIME|TEMPERATURE|PRESSURE|HUMIDITY|\n+---+-------------------+-----------+--------+--------+\n|  1|2011-11-01 00:00:00|      13.49| 1008.14|    0.88|\n|  2|2011-11-01 01:00:00|      12.73| 1007.88|    0.93|\n|  3|2011-11-01 02:00:00|      13.65| 1007.09|    0.91|\n|  4|2011-11-01 03:00:00|      14.13|  1006.5|    0.88|\n|  5|2011-11-01 04:00:00|      14.17| 1006.14|     0.9|\n+---+-------------------+-----------+--------+--------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- DATETIME: timestamp (nullable = true)\n |-- TEMPERATURE: double (nullable = true)\n |-- PRESSURE: double (nullable = false)\n |-- HUMIDITY: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1543609947132_-367458243","id":"20181107-083814_273178083","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"text":"%md\n### half_block (0-111) dataframes\n\nRemove null records and change Timestamp column to right format.\n\n- METER_ID:  Meter ID for each client\n- TIMESTAMP: Measurement date and time\n- ENERGY: Total energy consumptiion for each day\n\n### half_ts dataframes\n\nInformation about energy consumption for each client, each half hour in **TIME SERIES**. Union of all **half_block** [generated in Extraction Notebook](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ)\n\n- ID\n- METER_ID:  Meter ID for each client\n- TIMESTAMP: Measurement date and time\n- DATE: Measurement date\n- ENERGY: Total energy consumption for each half hour","user":"hduser","dateUpdated":"2018-12-11T14:37:25-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>half_block (0-111) dataframes</h3>\n<p>Remove null records and change Timestamp column to right format.</p>\n<ul>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>TIMESTAMP: Measurement date and time</li>\n  <li>ENERGY: Total energy consumptiion for each day</li>\n</ul>\n<h3>half_ts dataframes</h3>\n<p>Information about energy consumption for each client, each half hour in <strong>TIME SERIES</strong>. Union of all <strong>half_block</strong> <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">generated in Extraction Notebook</a></p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>TIMESTAMP: Measurement date and time</li>\n  <li>DATE: Measurement date</li>\n  <li>ENERGY: Total energy consumption for each half hour</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947134_-118510570","id":"20181129-093604_1799413332","dateCreated":"2018-11-30T14:32:27-0600","dateStarted":"2018-12-11T14:37:25-0600","dateFinished":"2018-12-11T14:37:25-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"text":"%pyspark\n#halfhourly_dataset/block_0-111\nstartTimeQuery = time.time()\nsubdir=\"halfhourly_dataset/\"\nargs = \"hdfs dfs -ls \"+dir_in+subdir+\" | awk '{print $8}'\"\nproc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\ns_output, s_err = proc.communicate()\nblock_list = s_output.split()\n\n#iterate through all files in directory to generate a dataframe for each file \nfor i in range(len(block_list)-test):\n    block=\"block_\"+`i`\n    block_name_str=\"half_\"+block\n    half=get_df_name(block_name_str)\n    #half=null_to_zero(half, True)\n    gbl[block_name_str]= half\n\n    if (i>0):\n        half_ts=half_ts.unionAll(half)\n    else:\n        half_ts=half\n\nhalf_ts=null_to_zero(half_ts, True)\n\n\nhalf_ts=half_ts.withColumn(\"TIMESTAMP\", half_ts.TIMESTAMP.cast(TimestampType()))\nhalf_ts=half_ts.withColumn(\"DATE\", to_date(\"TIMESTAMP\",\"yyyy-MM-dd hh:mm:ss\"))\n\nhalf_ts=(half_ts.filter(col(\"METER_ID\").isNotNull())\n                .filter(col(\"ENERGY\")>0))\nhalf_ts=half_ts.select(\"METER_ID\",\"DATE\",\"TIMESTAMP\",\"ENERGY\")\nhalf_ts = half_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))   \n\n\nmes_et(startTimeQuery)\nprint(\"Half block time series data count: \"+str(half_ts.count())+' records')\nhalf_ts.show(5)\nhalf_ts.printSchema()\n","user":"hduser","dateUpdated":"2018-12-07T15:26:39-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nColumns with null values\n['ENERGY']\nDataframe count: 167817021 records\nELAPSED TIME: 45.4642539024 seconds\nHalf block time series data count: 165809909 records\n+---+---------+----------+-------------------+------+\n| ID| METER_ID|      DATE|          TIMESTAMP|ENERGY|\n+---+---------+----------+-------------------+------+\n|  1|MAC000002|2012-10-12|2012-10-12 11:30:00| 0.143|\n|  2|MAC000002|2012-10-12|2012-10-12 12:00:00| 0.663|\n|  3|MAC000002|2012-10-12|2012-10-12 12:30:00| 0.256|\n|  4|MAC000002|2012-10-12|2012-10-12 13:00:00| 0.155|\n|  5|MAC000002|2012-10-12|2012-10-12 13:30:00| 0.199|\n+---+---------+----------+-------------------+------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- TIMESTAMP: timestamp (nullable = true)\n |-- ENERGY: double (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1543609947134_-801098010","id":"20181107-115836_57326027","dateCreated":"2018-11-30T14:32:27-0600","dateStarted":"2018-12-07T15:26:39-0600","dateFinished":"2018-12-07T15:31:57-0600","status":"ABORT","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"%md\n### hour_ts dataframe\n\nInformation about energy consumption for each client, each hour in TIME SERIES. Retrieved from half_ts dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- TIMESTAMP: Measurenent timestamp\n- DATE: Measurement date\n- ENERGY: Total energy consumption for each hour","user":"hduser","dateUpdated":"2018-12-11T14:38:08-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>hour_ts dataframe</h3>\n<p>Information about energy consumption for each client, each hour in TIME SERIES. Retrieved from half_ts dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>TIMESTAMP: Measurenent timestamp</li>\n  <li>DATE: Measurement date</li>\n  <li>ENERGY: Total energy consumption for each hour</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1544218003987_-1093313361","id":"20181207-152643_1415351278","dateCreated":"2018-12-07T15:26:43-0600","dateStarted":"2018-12-11T14:38:08-0600","dateFinished":"2018-12-11T14:38:08-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nhour_ts=(half_ts.groupBy('METER_ID',\"DATE\",hour(\"TIMESTAMP\").alias(\"HOUR\"))\n                .agg(sqlFunctions.sum(\"ENERGY\").alias(\"ENERGY\"))\n                .orderBy(\"METER_ID\",\"DATE\",\"HOUR\"))\n\nhour_ts=hour_ts.withColumn(\"ENERGY\",round(\"ENERGY\",3))\n\nhour_ts = hour_ts.join(uk_hd, hour_ts.DATE == uk_hd.HD_DATE, how = 'left_outer')\nhour_ts=hour_ts.drop(uk_hd.ID)\nhour_ts=hour_ts.withColumn(\"HD\", when(col(\"DATE\")==col(\"HD_DATE\"),True).otherwise(False))\nhour_ts=hour_ts.drop(\"HD_DATE\",\"HD_NAME\")\n\nhour_ts=hour_ts.select(\"METER_ID\",(concat(date_format(\"DATE\", \"yyyy-MM-dd\"),lit(\" \"),hour_ts.HOUR,lit(\":00:00\"))).cast(TimestampType()).alias(\"TIMESTAMP\"),\"DATE\",\"HD\",\"ENERGY\")\n\nhour_ts = hour_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"TIMESTAMP\")).alias(\"ID\"), col(\"*\")) \nprint(\"Hour block time series data count: \"+str(hour_ts.count())+' records')\nmes_et(startTimeQuery)\nhour_ts.show(5)\nhour_ts.printSchema()","user":"hduser","dateUpdated":"2018-12-07T16:00:32-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Hour block time series data count: 83204183 records\nELAPSED TIME: 92.0864989758 seconds\n+---+---------+-------------------+----------+-----+------+\n| ID| METER_ID|          TIMESTAMP|      DATE|   HD|ENERGY|\n+---+---------+-------------------+----------+-----+------+\n|  1|MAC000002|2012-10-12 11:00:00|2012-10-12|false| 0.143|\n|  2|MAC000002|2012-10-12 12:00:00|2012-10-12|false| 0.919|\n|  3|MAC000002|2012-10-12 13:00:00|2012-10-12|false| 0.354|\n|  4|MAC000002|2012-10-12 14:00:00|2012-10-12|false|  0.29|\n|  5|MAC000002|2012-10-12 15:00:00|2012-10-12|false| 0.288|\n+---+---------+-------------------+----------+-----+------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- TIMESTAMP: timestamp (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HD: boolean (nullable = false)\n |-- ENERGY: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1544213513453_-1549596774","id":"20181207-141153_1641642452","dateCreated":"2018-12-07T14:11:53-0600","dateStarted":"2018-12-07T16:00:32-0600","dateFinished":"2018-12-07T16:06:00-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"text":"%md\n\n### day_ts dataframe\n\nInformation about energy consumption for each client, each day in **TIME SERIES**. Retrieved from **hour_ts** dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- ENERGY: Total energy consumptiion for each day \n- E_MAX: maximum consumption (per half hour registered each day)","user":"hduser","dateUpdated":"2018-12-11T14:39:32-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>day_ts dataframe</h3>\n<p>Information about energy consumption for each client, each day in <strong>TIME SERIES</strong>. Retrieved from <strong>hour_ts</strong> dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>ENERGY: Total energy consumptiion for each day</li>\n  <li>E_MAX: maximum consumption (per half hour registered each day)</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1544560098579_-2097967751","id":"20181211-142818_421532737","dateCreated":"2018-12-11T14:28:18-0600","dateStarted":"2018-12-11T14:39:32-0600","dateFinished":"2018-12-11T14:39:32-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:78"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nday_ts=(hour_ts.groupBy(\"METER_ID\",\"DATE\")\n                .agg(sqlFunctions.sum(\"ENERGY\").alias(\"ENERGY\"),sqlFunctions.max(\"ENERGY\").alias(\"E_MAX\"))\n                .orderBy(\"METER_ID\",\"DATE\"))\n                \n#cond=[day_ts.MAX_E==hour_ts.ENERGY, day_ts.DATE==hour_ts.DATE, day_ts.METER_ID==hour_ts.METER_ID]\n#day_ts=day_ts.join(hour_ts, cond, how = 'inner').show(5)\nday_ts=day_ts.withColumn(\"ENERGY\", round (\"ENERGY\",3))       \nday_ts = day_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\nprint(\"Day time series data count: \"+str(day_ts.count())+' records')\nday_ts.show(5)                \nday_ts.printSchema()\n","user":"hduser","dateUpdated":"2018-12-11T14:31:58-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.143576145172 seconds\nDay time series data count: 3495265 records\n+---+---------+----------+------+-----+\n| ID| METER_ID|      DATE|ENERGY|MAX_E|\n+---+---------+----------+------+-----+\n|  1|MAC000002|2012-10-12| 7.098|1.413|\n|  2|MAC000002|2012-10-13|11.087|1.848|\n|  3|MAC000002|2012-10-14|13.223|2.031|\n|  4|MAC000002|2012-10-15|10.257|1.413|\n|  5|MAC000002|2012-10-16| 9.769|1.181|\n+---+---------+----------+------+-----+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- ENERGY: double (nullable = true)\n |-- MAX_E: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1544220092284_744421754","id":"20181207-160132_389602908","dateCreated":"2018-12-07T16:01:32-0600","dateStarted":"2018-12-11T14:23:18-0600","dateFinished":"2018-12-11T14:27:22-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:79"},{"text":"%md\n### daily_block (0-111) dataframes \n\nRemove null records and change Date column to right format for each block.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- E_MEDIAN: Energy median for each day\n- E_MEAN: Energy mean for each day\n- E_MAX: Energy maximum for each day\n- E_COUNT: Energy count (#measurements - half hour separated) for each day\n- E_STD: Starndard deviation for energy measurements each day\n- E_SUM: Total energy consumptiion for each day\n\n### day_ts2 dataframe\n\nInformation about energy consumption for each client, each day in **TIME SERIES**. Retrieved from **daily_dataset/block_0-111** dataframes.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- E_MEDIAN: median of measurements for each day\n- E_MEAN:mean of measurements for each day\n- E_MAX: maximum consumption (per half hour registered each day)\n- E_COUNT: number of measurements for each day. Dataframe has been filtered to only consider days with 48 ssamples (one every 30 min)\n- E_STD: standard deviation of measurements for each day\n- ENERGY: Total energy consumptiion for each day \n- E_MIN: minimum consumption (per half hour registered each day)\n","user":"hduser","dateUpdated":"2018-12-11T14:33:37-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>daily_block (0-111) dataframes</h3>\n<p>Remove null records and change Date column to right format for each block.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>E_MEDIAN: Energy median for each day</li>\n  <li>E_MEAN: Energy mean for each day</li>\n  <li>E_MAX: Energy maximum for each day</li>\n  <li>E_COUNT: Energy count (#measurements - half hour separated) for each day</li>\n  <li>E_STD: Starndard deviation for energy measurements each day</li>\n  <li>E_SUM: Total energy consumptiion for each day</li>\n</ul>\n<h3>day_ts2 dataframe</h3>\n<p>Information about energy consumption for each client, each day in <strong>TIME SERIES</strong>. Retrieved from <strong>daily_dataset/block_0-111</strong> dataframes.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>E_MEDIAN: median of measurements for each day</li>\n  <li>E_MEAN:mean of measurements for each day</li>\n  <li>E_MAX: maximum consumption (per half hour registered each day)</li>\n  <li>E_COUNT: number of measurements for each day. Dataframe has been filtered to only consider days with 48 ssamples (one every 30 min)</li>\n  <li>E_STD: standard deviation of measurements for each day</li>\n  <li>ENERGY: Total energy consumptiion for each day</li>\n  <li>E_MIN: minimum consumption (per half hour registered each day)</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947133_1710904177","id":"20181128-103935_1174953943","dateCreated":"2018-11-30T14:32:27-0600","dateStarted":"2018-12-11T14:33:37-0600","dateFinished":"2018-12-11T14:33:37-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:80"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\n#daily_dataset/block_0-111\n\nargs = \"hdfs dfs -ls \"+dir_in+subdir+\" | awk '{print $8}'\"\nproc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\ns_output, s_err = proc.communicate()\nblock_list = s_output.split()\n\n#iterate through all files in directory to generate a dataframe for each file \nfor i in range(len(block_list)-test):\n    block=\"block_\"+`i`\n    block_name_str=\"daily_\"+block\n    block_name=get_df_name(block_name_str)\n    block_name = block_name.withColumn(\"DATE\", to_date(block_name.DATE, \"yyyy-MM-dd\")) \n   # block_name=null_to_zero(block_name, True)\n    #block_name = block_name.select(row_number().over(Window().orderBy(\"DATE\")).alias(\"ID\"), col(\"*\"))\n\n    gbl[block_name_str]= block_name\n    \n    if (i>0):\n        day_ts2=day_ts2.unionAll(block_name)\n    else:\n        day_ts2=block_name\n\nday_ts2=null_to_zero(day_ts2, False)\nday_ts2=day_ts2.withColumn(\"DATE\", to_date(day_ts2.DATE,\"yyyy-MM-dd\"))\nday_ts2=day_ts2.filter(col(\"METER_ID\").isNotNull())\nday_ts2=day_ts2.filter(col(\"E_COUNT\")>47)\nday_ts2=(day_ts2\n        .withColumn(\"E_MEDIAN\",round(\"E_MEDIAN\",3))\n        .withColumn(\"E_MEAN\",round(\"E_MEAN\",3))\n        .withColumn(\"E_MAX\",round(\"E_MAX\",3))\n        .withColumn(\"E_STD\",round(\"E_STD\",3))\n        .withColumn(\"E_SUM\",round(\"E_SUM\",3)))\n        \nday_ts2 = day_ts2.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))   \n\n\nmes_et(startTimeQuery)\nprint(\"Day time series data count: \"+str(day_ts2.count())+' records')\ndaily_block_110.show(5)\nday_ts2.show(5)\ndaily_block_110.printSchema()\nday_ts2.printSchema()","user":"hduser","dateUpdated":"2018-12-11T14:32:42-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 36.9201660156 seconds\nDay time series data count: 3469352 records\n+---+---------+----------+--------+------+-----+-------+-----+------+-----+\n| ID| METER_ID|      DATE|E_MEDIAN|E_MEAN|E_MAX|E_COUNT|E_STD| E_SUM|E_MIN|\n+---+---------+----------+--------+------+-----+-------+-----+------+-----+\n|  1|MAC000002|2012-10-13|    0.18| 0.231|0.933|     48|0.192|11.087|0.076|\n|  2|MAC000002|2012-10-14|   0.158| 0.275|1.085|     48|0.275|13.223| 0.07|\n|  3|MAC000002|2012-10-15|   0.131| 0.214|1.164|     48|0.224|10.257| 0.07|\n|  4|MAC000002|2012-10-16|   0.145| 0.204|0.991|     48|0.184| 9.769|0.087|\n|  5|MAC000002|2012-10-17|   0.148| 0.227|0.784|     48|0.184|10.885|0.067|\n+---+---------+----------+--------+------+-----+-------+-----+------+-----+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- E_MEDIAN: double (nullable = true)\n |-- E_MEAN: double (nullable = true)\n |-- E_MAX: double (nullable = true)\n |-- E_COUNT: integer (nullable = true)\n |-- E_STD: double (nullable = true)\n |-- E_SUM: double (nullable = true)\n |-- E_MIN: double (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1543609947133_1760129706","id":"20181107-094839_910212766","dateCreated":"2018-11-30T14:32:27-0600","dateStarted":"2018-12-07T13:52:55-0600","dateFinished":"2018-12-07T13:53:51-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:81"},{"text":"%md\n### month_ts dataframe\n\nInformation about energy consumption for each client, each month in **TIME SERIES**. Retrieved from day_df dataframe\n\n- ID\n- METER_ID: Meter ID for each client\n- YEAR: Measurement Year\n- MONTH: Measurement Month\n- MONTH_E: Energy measurement for each month","user":"hduser","dateUpdated":"2018-12-11T14:40:02-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>month_ts dataframe</h3>\n<p>Information about energy consumption for each client, each month in <strong>TIME SERIES</strong>. Retrieved from day_df dataframe</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>YEAR: Measurement Year</li>\n  <li>MONTH: Measurement Month</li>\n  <li>MONTH_E: Energy measurement for each month</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947136_-700354608","id":"20181129-100440_1103742090","dateCreated":"2018-11-30T14:32:27-0600","dateStarted":"2018-12-11T14:40:02-0600","dateFinished":"2018-12-11T14:40:02-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:82"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nmonth_ts=day_ts\nmonth_ts=month_ts.select('ID','METER_ID',date_format('DATE','yyyy').alias(\"YEAR\"),date_format('DATE','MM').alias(\"MONTH\"),date_format('DATE','d').alias(\"DAY\"),'ENERGY')\n\n\nmonth_ts=month_ts.groupBy('METER_ID',\"YEAR\", \"MONTH\").agg(sqlFunctions.sum(day_ts['ENERGY']).alias('MONTH_E'),sqlFunctions.count(day_ts['ENERGY']).alias('COUNT_MONTH'),sqlFunctions.avg(day_ts['ENERGY']).alias('AVG_DAY'),sqlFunctions.max(day_ts['ENERGY']).alias('MAX_DAY_E')).orderBy('METER_ID',\"YEAR\", \"MONTH\")\n\nmonth_ts=month_ts.filter(month_ts.COUNT_MONTH>27)\nmonth_ts=month_ts.withColumn(\"MONTH_E\", round(col(\"MONTH_E\"),3)).withColumn(\"AVG_DAY\", round(col(\"AVG_DAY\"),3))\n\nmonth_ts = month_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"YEAR\",\"MONTH\",)).alias(\"ID\"), col(\"*\"))\n\nmes_et(startTimeQuery)\n\nprint(\"Month data count: \"+str(month_ts.count())+' records')\nmonth_ts.show(5)\n","user":"hduser","dateUpdated":"2018-12-11T14:45:18-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.553560972214 seconds\nMonth data count: 1691 records\n+---+---------+----+-----+-------+-----------+-------+---------+\n| ID| METER_ID|YEAR|MONTH|MONTH_E|COUNT_MONTH|AVG_DAY|MAX_DAY_E|\n+---+---------+----+-----+-------+-----------+-------+---------+\n|  1|MAC000002|2012|   12|342.432|         30| 11.414|   17.932|\n|  2|MAC000002|2013|   01|359.872|         31| 11.609|   16.922|\n|  3|MAC000002|2013|   02|381.622|         28| 13.629|   32.628|\n|  4|MAC000002|2013|   03|479.684|         31| 15.474|   39.284|\n|  5|MAC000002|2013|   04|362.588|         30| 12.086|   25.958|\n+---+---------+----+-----+-------+-----------+-------+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1543609947137_1562835665","id":"20181107-140604_1646812641","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:83"},{"text":"%md\n### hh_block (0-111) dataframes\n\nRemove null records and change Date column to right format.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- HHX: Energy measurement for each 30 minutes. From HH0 = 00:00 to HH47=23:30\n\n### hh_df dataframe\n\nInformation about energy consumption for each client, each half hour. Union of all hh_blocks\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- HHX: Energy measurement for each 30 minutes. From HH0 = 00:00 to HH47=23:30","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>hh_block (0-111) dataframes</h3>\n<p>Remove null records and change Date column to right format.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>HHX: Energy measurement for each 30 minutes. From HH0 = 00:00 to HH47=23:30</li>\n</ul>\n<h3>hh_df dataframe</h3>\n<p>Information about energy consumption for each client, each half hour. Union of all hh_blocks</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>HHX: Energy measurement for each 30 minutes. From HH0 = 00:00 to HH47=23:30</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947135_-480669854","id":"20181129-093719_266618668","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:84"},{"text":"%pyspark\n#hhblock_dataset/block_0-111\nstartTimeQuery = time.time()\nsubdir=\"hhblock_dataset/\"\nargs = \"hdfs dfs -ls \"+dir_in+subdir+\" | awk '{print $8}'\"\nproc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\ns_output, s_err = proc.communicate()\nblock_list = s_output.split()\n\n#iterate through all files in directory to generate a dataframe for each file \nfor i in range(len(block_list)-test):\n    block=\"block_\"+`i`\n    block_name_hh_str=\"hh_\"+block\n    #block_name_hour_str=\"hour_\"+block\n    #block_name_day_str=\"day_\"+block\n    \n    \n    hh=get_df_name(block_name_hh_str)\n    hh = hh.withColumn(\"DATE\", to_date(hh.DATE, \"yyyy-MM-dd\"))\n    hh=null_to_zero(hh, False)\n    hh = hh.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))\n    \n    #This is to save each block in a separate dataframe\n    gbl[block_name_hh_str]= hh\n    \n    ##BLOCK UNION TO GET ONE DATAFRAME FOR ALL\n    ##APPLIES UNION OVER HALFHOUR, HOUR AND DAY DATAFRAMES\n    if (i>0):\n        hh_df=hh_df.unionAll(hh)\n    else:\n        hh_df=hh\n    \nfor j in range (48):\n    hstr='HH'+str(j)\n    hh_df = hh_df.withColumn(hstr, round(hstr,3))\n    \n\n'''\n    # IF YOU INTEND TO CREATE BLOCKS FOR HOUR AND DAY:\n    \n    hour=hh\n    for j in range (24):\n        hstr='H'+str(j)\n        hhstr0='HH'+str(2*j)\n        hhstr1='HH'+str(2*j+1)\n        hour = hour.withColumn(hstr, hour[hhstr0]+hour[hhstr1])\n        hour=hour.drop(hhstr0)\n        hour=hour.drop(hhstr1)\n        \n        \n    day=hour.withColumn('DAY_E',hour['H0']*0)\n    for j in range (24):\n        hstr='H'+str(j)\n        hhstr0='HH'+str(2*j)\n        hhstr1='HH'+str(2*j+1)\n        day = day.withColumn('DAY_E', day['DAY_E']+day[hstr])\n        day=day.drop(hstr)\n    \n    ##BLOCK UNION TO GET ONE DATAFRAME FOR ALL\n    ##APPLIES UNION OVER HALFHOUR, HOUR AND DAY DATAFRAMES\n    if (i>0):\n        hh_df=hh_df.unionAll(hh)\n        hour_df=hour_df.unionAll(hour)\n        day_df=day_df.unionAll(day)\n    else:\n        hh_df=hh\n        hour_df=hour\n        day_df=day\n    \n    gbl[block_name_day_str]= day\n    gbl[block_name_hour_str]= hour\n    gbl[block_name_hh_str]= hh\n    \n'''\nmes_et(startTimeQuery)\nprint(\"Half hour data count: \"+str(hh_df.count())+' records')\nhh_df.show(5)\nhh_df.printSchema()\n","user":"hduser","dateUpdated":"2018-12-07T10:02:28-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 19.6501731873 seconds\nHalf hour data count: 56529 records\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n| ID| METER_ID|      DATE|  HH0|  HH1|  HH2|  HH3|  HH4|  HH5|  HH6|  HH7|  HH8|  HH9| HH10| HH11| HH12| HH13| HH14| HH15| HH16| HH17| HH18| HH19| HH20| HH21| HH22| HH23| HH24| HH25| HH26| HH27| HH28| HH29| HH30| HH31| HH32| HH33| HH34| HH35| HH36| HH37| HH38| HH39| HH40| HH41| HH42| HH43| HH44| HH45| HH46| HH47|\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n|  1|MAC000002|2012-10-13|0.263|0.269|0.275|0.256|0.211|0.136|0.161|0.119|0.167|0.109|0.168|0.107|0.166|0.117|0.157|0.126|0.146|0.106|0.135|0.191|0.915|0.933|0.122|0.138|0.076|0.133|0.076|0.133|0.085|0.263|0.134|0.235|0.124|0.184| 0.23|0.176|0.388| 0.26|0.918|0.278|0.267|0.239| 0.23|0.233|0.235|0.188|0.259| 0.25|\n|  2|MAC000002|2012-10-14|0.262|0.166|0.226|0.088|0.126|0.082|0.123|0.083| 0.12|0.079|0.121|0.075|0.124|0.073|0.125| 0.07| 0.13|0.108|0.196|0.346|0.524|0.076|0.129|0.667| 0.23| 0.22|0.163|0.091| 0.17| 0.11| 0.11|0.121|0.099|0.157|0.093|0.371|0.386|1.085|1.075|0.956|0.821|0.745|0.712|0.511|0.231| 0.21|0.278|0.159|\n|  3|MAC000002|2012-10-15|0.192|0.097|0.141|0.083|0.132| 0.07| 0.13|0.074|0.124|0.078|0.118|0.082|0.112|0.087|0.106| 0.14| 0.12|1.075|0.146|0.123|0.082|0.127|0.077|0.551|0.149|0.129|0.075| 0.13|0.075|0.129|0.075|0.128|0.166|0.194|0.695| 0.26|0.227|0.255|1.164|0.249|0.225|0.258| 0.26|0.334|0.299|0.236|0.241|0.237|\n|  4|MAC000002|2012-10-16|0.237|0.237|0.193|0.118|0.098|0.107|0.094|0.109|0.091|0.105|0.091|0.104|0.092|0.103|0.093|0.101|0.144|  0.1|0.408|0.102|  0.1|0.116|0.354|0.146| 0.19|0.991| 0.31|0.121|0.113|0.094|0.119|0.087| 0.13|0.238|0.204|0.284|0.447|0.266|0.966|0.172|0.192|0.228|0.203|0.211|0.188|0.213|0.157|0.202|\n|  5|MAC000002|2012-10-17|0.157|0.211|0.155|0.169|0.101|0.117|0.084|0.118| 0.08|0.119|0.075|0.123|0.071|0.126|0.067|0.124|0.118|0.132|0.358|0.628|0.784|0.681|0.749|0.593|0.502|0.115|0.113|0.092|0.124|0.084|0.125|0.078|0.136|0.227|0.207|0.141|0.258|0.217|0.223|0.075| 0.23|0.208|0.265|0.377|0.327|0.277|0.288|0.256|\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HH0: double (nullable = true)\n |-- HH1: double (nullable = true)\n |-- HH2: double (nullable = true)\n |-- HH3: double (nullable = true)\n |-- HH4: double (nullable = true)\n |-- HH5: double (nullable = true)\n |-- HH6: double (nullable = true)\n |-- HH7: double (nullable = true)\n |-- HH8: double (nullable = true)\n |-- HH9: double (nullable = true)\n |-- HH10: double (nullable = true)\n |-- HH11: double (nullable = true)\n |-- HH12: double (nullable = true)\n |-- HH13: double (nullable = true)\n |-- HH14: double (nullable = true)\n |-- HH15: double (nullable = true)\n |-- HH16: double (nullable = true)\n |-- HH17: double (nullable = true)\n |-- HH18: double (nullable = true)\n |-- HH19: double (nullable = true)\n |-- HH20: double (nullable = true)\n |-- HH21: double (nullable = true)\n |-- HH22: double (nullable = true)\n |-- HH23: double (nullable = true)\n |-- HH24: double (nullable = true)\n |-- HH25: double (nullable = true)\n |-- HH26: double (nullable = true)\n |-- HH27: double (nullable = true)\n |-- HH28: double (nullable = true)\n |-- HH29: double (nullable = true)\n |-- HH30: double (nullable = true)\n |-- HH31: double (nullable = true)\n |-- HH32: double (nullable = true)\n |-- HH33: double (nullable = true)\n |-- HH34: double (nullable = true)\n |-- HH35: double (nullable = true)\n |-- HH36: double (nullable = true)\n |-- HH37: double (nullable = true)\n |-- HH38: double (nullable = true)\n |-- HH39: double (nullable = true)\n |-- HH40: double (nullable = true)\n |-- HH41: double (nullable = true)\n |-- HH42: double (nullable = true)\n |-- HH43: double (nullable = true)\n |-- HH44: double (nullable = true)\n |-- HH45: double (nullable = true)\n |-- HH46: double (nullable = true)\n |-- HH47: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1543609947135_1357198174","id":"20181107-130448_655374845","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:85"},{"text":"%md\n### hour_df dataframe\n\nInformation about energy consumption for each client, each hour. Retrieved from hh_df dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- HHX: Energy measurement for each hour of the day\n- HD: boolean indicating True for Holidays\n- MAX_E: max energy consumption \n- MAX_TIME: hour in day with max energy consumption\n\n### day_df dataframe\n\nInformation about energy consumption for each client, each day. Retrieved from hour_df dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- HD: boolean indicating True for Holidays\n- MAX_E: max energy consumption \n- MAX_TIME: hour in day with max energy consumption\n- DAY_E: Energy measurement for each day\n","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>hour_df dataframe</h3>\n<p>Information about energy consumption for each client, each hour. Retrieved from hh_df dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>HHX: Energy measurement for each hour of the day</li>\n  <li>HD: boolean indicating True for Holidays</li>\n  <li>MAX_E: max energy consumption</li>\n  <li>MAX_TIME: hour in day with max energy consumption</li>\n</ul>\n<h3>day_df dataframe</h3>\n<p>Information about energy consumption for each client, each day. Retrieved from hour_df dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>HD: boolean indicating True for Holidays</li>\n  <li>MAX_E: max energy consumption</li>\n  <li>MAX_TIME: hour in day with max energy consumption</li>\n  <li>DAY_E: Energy measurement for each day</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947135_1424905642","id":"20181129-123036_535779135","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:86"},{"text":"%pyspark\n\nhour_df=hh_df\nfor j in range (24):\n    hstr='H'+str(j)\n    hhstr0='HH'+str(2*j)\n    hhstr1='HH'+str(2*j+1)\n    hour_df = hour_df.withColumn(hstr, round(hour_df[hhstr0]+hour_df[hhstr1],3))\n    hour_df=hour_df.drop(hhstr0)\n    hour_df=hour_df.drop(hhstr1)\n        \nhour_df = hour_df.join(uk_hd, hour_df.DATE == uk_hd.HD_DATE, how = 'left_outer')\nhour_df=hour_df.drop(uk_hd.ID)\nhour_df=hour_df.withColumn(\"HD\", when(col(\"DATE\")==col(\"HD_DATE\"),True).otherwise(False))\nhour_df=hour_df.drop(\"HD_DATE\",\"HD_NAME\")\n\nslice_hours=hour_df.columns[3:27]\nhour_df=hour_df.withColumn(\"MAX_E\", greatest(*slice_hours))\n\ncond = (\"sqlFunctions.when\" + \".when\"\n        .join([\"(sqlFunctions.col('\" + c + \"') == sqlFunctions.col('MAX_E'), sqlFunctions.lit('\" + c + \"'))\" for c in slice_hours]))\n        \nhour_df=hour_df.withColumn(\"MAX_TIME\", eval(cond))\n\nhour_df=(hour_df\n        .withColumn(\"MAX_TIME\", regexp_extract('MAX_TIME', r'^H(\\d+)$', 1).alias('Title').cast(IntegerType())))\n\nday_df=hour_df.withColumn('DAY_E',hour_df['H0']*0)\n\nfor j in range (24):\n    hstr='H'+str(j)\n    day_df = day_df.withColumn('DAY_E', round((day_df['DAY_E']+day_df[hstr]),3))\n    day_df=day_df.drop(hstr)\n\nmes_et(startTimeQuery)\nprint(\"Hour data count: \"+str(hour_df.count())+' records')\nprint(\"Day data count: \"+str(day_df.count())+' records')\nhour_df.show(5)\nday_df.show(5)\nhour_df.printSchema()\nday_df.printSchema()","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 26.0485010147 seconds\nHour data count: 56529 records\nDay data count: 56529 records\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+--------+\n| ID| METER_ID|      DATE|   H0|   H1|   H2|   H3|   H4|   H5|   H6|   H7|   H8|   H9|  H10|  H11|  H12|  H13|  H14|  H15|  H16|  H17|  H18|  H19|  H20|  H21|  H22|  H23|   HD|MAX_E|MAX_TIME|\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+--------+\n|  1|MAC000002|2012-10-13|0.532|0.531|0.347| 0.28|0.276|0.275|0.283|0.283|0.252|0.326|1.848| 0.26|0.209|0.209|0.348|0.369|0.308|0.406|0.648|1.196|0.506|0.463|0.423|0.509|false|1.848|      10|\n|  2|MAC000002|2012-10-14|0.428|0.314|0.208|0.206|0.199|0.196|0.197|0.195|0.238|0.542|  0.6|0.796| 0.45|0.254| 0.28|0.231|0.256|0.464|1.471|2.031|1.566|1.223|0.441|0.437|false|2.031|      19|\n|  3|MAC000002|2012-10-15|0.289|0.224|0.202|0.204|0.202|  0.2|0.199|0.246|1.195|0.269|0.209|0.628|0.278|0.205|0.204|0.203| 0.36|0.955|0.482|1.413|0.483|0.594|0.535|0.478|false|1.413|      19|\n|  4|MAC000002|2012-10-16|0.474|0.311|0.205|0.203|0.196|0.195|0.195|0.194|0.244| 0.51|0.216|  0.5|1.181|0.431|0.207|0.206|0.368|0.488|0.713|1.138| 0.42|0.414|0.401|0.359|false|1.181|      12|\n|  5|MAC000002|2012-10-17|0.368|0.324|0.218|0.202|0.199|0.198|0.197|0.191| 0.25|0.986|1.465|1.342|0.617|0.205|0.208|0.203|0.363|0.348|0.475|0.298|0.438|0.642|0.604|0.544|false|1.465|      10|\n+---+---------+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+--------+\nonly showing top 5 rows\n\n+---+---------+----------+-----+-----+--------+------+\n| ID| METER_ID|      DATE|   HD|MAX_E|MAX_TIME| DAY_E|\n+---+---------+----------+-----+-----+--------+------+\n|  1|MAC000002|2012-10-13|false|1.848|      10|11.087|\n|  2|MAC000002|2012-10-14|false|2.031|      19|13.223|\n|  3|MAC000002|2012-10-15|false|1.413|      19|10.257|\n|  4|MAC000002|2012-10-16|false|1.181|      12| 9.769|\n|  5|MAC000002|2012-10-17|false|1.465|      10|10.885|\n+---+---------+----------+-----+-----+--------+------+\nonly showing top 5 rows\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- H0: double (nullable = true)\n |-- H1: double (nullable = true)\n |-- H2: double (nullable = true)\n |-- H3: double (nullable = true)\n |-- H4: double (nullable = true)\n |-- H5: double (nullable = true)\n |-- H6: double (nullable = true)\n |-- H7: double (nullable = true)\n |-- H8: double (nullable = true)\n |-- H9: double (nullable = true)\n |-- H10: double (nullable = true)\n |-- H11: double (nullable = true)\n |-- H12: double (nullable = true)\n |-- H13: double (nullable = true)\n |-- H14: double (nullable = true)\n |-- H15: double (nullable = true)\n |-- H16: double (nullable = true)\n |-- H17: double (nullable = true)\n |-- H18: double (nullable = true)\n |-- H19: double (nullable = true)\n |-- H20: double (nullable = true)\n |-- H21: double (nullable = true)\n |-- H22: double (nullable = true)\n |-- H23: double (nullable = true)\n |-- HD: boolean (nullable = false)\n |-- MAX_E: double (nullable = true)\n |-- MAX_TIME: integer (nullable = true)\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HD: boolean (nullable = false)\n |-- MAX_E: double (nullable = true)\n |-- MAX_TIME: integer (nullable = true)\n |-- DAY_E: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1543609947136_-1842779638","id":"20181129-123153_1365351373","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:87"},{"text":"%md\n### tariff_val dataframe\nInformation about tariff for ToU users (with price information). Retrieved from tariff dataframe.\n\n- Normal tariff, 11.76 p/kWh\n- High tariff, 67.20 p/kWh\n- Low tariff, 3.99 p/kWh\n\nColumns are:\n\n- ID\n- DATE: Tariff date\n- HHX: tariff price for each half hour","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>tariff_val dataframe</h3>\n<p>Information about tariff for ToU users (with price information). Retrieved from tariff dataframe.</p>\n<ul>\n  <li>Normal tariff, 11.76 p/kWh</li>\n  <li>High tariff, 67.20 p/kWh</li>\n  <li>Low tariff, 3.99 p/kWh</li>\n</ul>\n<p>Columns are:</p>\n<ul>\n  <li>ID</li>\n  <li>DATE: Tariff date</li>\n  <li>HHX: tariff price for each half hour</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947137_1975594952","id":"20181129-100909_1707779033","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:88"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\ntariff = tariff.withColumn(\"DATE\", to_date(tariff['Date'], \"dd/MM/yyyy\"))\ntariff_val=tariff\n\nfor col_name in tariff_val.columns[1::]:\n    tariff_val = (tariff_val\n                .withColumn(col_name, when(col(col_name) == 0, 11.76).when(col(col_name) == 1, 67.20).otherwise(3.99)))\n\ntariff_val = tariff_val.select(row_number().over(Window().orderBy(\"DATE\")).alias(\"ID\"), col(\"*\"))\n\nmes_et(startTimeQuery)\n\nprint('Tariff data count: '+str(tariff_val.count())+' records')\ntariff_val.printSchema()\n","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 1.01776194572 seconds\nTariff data count: 365 records\nroot\n |-- ID: integer (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HH0: double (nullable = false)\n |-- HH1: double (nullable = false)\n |-- HH2: double (nullable = false)\n |-- HH3: double (nullable = false)\n |-- HH4: double (nullable = false)\n |-- HH5: double (nullable = false)\n |-- HH6: double (nullable = false)\n |-- HH7: double (nullable = false)\n |-- HH8: double (nullable = false)\n |-- HH9: double (nullable = false)\n |-- HH10: double (nullable = false)\n |-- HH11: double (nullable = false)\n |-- HH12: double (nullable = false)\n |-- HH13: double (nullable = false)\n |-- HH14: double (nullable = false)\n |-- HH15: double (nullable = false)\n |-- HH16: double (nullable = false)\n |-- HH17: double (nullable = false)\n |-- HH18: double (nullable = false)\n |-- HH19: double (nullable = false)\n |-- HH20: double (nullable = false)\n |-- HH21: double (nullable = false)\n |-- HH22: double (nullable = false)\n |-- HH23: double (nullable = false)\n |-- HH24: double (nullable = false)\n |-- HH25: double (nullable = false)\n |-- HH26: double (nullable = false)\n |-- HH27: double (nullable = false)\n |-- HH28: double (nullable = false)\n |-- HH29: double (nullable = false)\n |-- HH30: double (nullable = false)\n |-- HH31: double (nullable = false)\n |-- HH32: double (nullable = false)\n |-- HH33: double (nullable = false)\n |-- HH34: double (nullable = false)\n |-- HH35: double (nullable = false)\n |-- HH36: double (nullable = false)\n |-- HH37: double (nullable = false)\n |-- HH38: double (nullable = false)\n |-- HH39: double (nullable = false)\n |-- HH40: double (nullable = false)\n |-- HH41: double (nullable = false)\n |-- HH42: double (nullable = false)\n |-- HH43: double (nullable = false)\n |-- HH44: double (nullable = false)\n |-- HH45: double (nullable = false)\n |-- HH46: double (nullable = false)\n |-- HH47: double (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1543609947137_217653688","id":"20181126-160835_79221582","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:89"},{"text":"%md\n## USERS DATABASE - Consumption patterns\n\nFinal database with main consumption characteristics by client (meter)\n\n- ID\n- METER_ID: Meter ID for each client\n- STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff\n- ACORN_CAT: Household ACORN category (0 to 5)\n- ACORN_CAT_NAME: HouseholdACORN category name\n- ACORN_GROUP: Household group (A to Q)\n- MEAN_MONTH: AVG montly consumption\n- MEAN_HD: AVG consumption on holidays\n- MEAN_WD: AVG consumption on labor days (tuesday, wednesday)\n- MEAN_SD: AVG consumption on sundays (weekend)\n- MEAN_MAX: AVG of Max consumption (per day)\n- MEAN_MAX_H: AVG of Max consumption (per hour) \n- MEAN_MAX_H_TIME: Hour in labor days (not HD, saturday or sunday) where a max consumption is measured","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>USERS DATABASE - Consumption patterns</h2>\n<p>Final database with main consumption characteristics by client (meter)</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff</li>\n  <li>ACORN_CAT: Household ACORN category (0 to 5)</li>\n  <li>ACORN_CAT_NAME: HouseholdACORN category name</li>\n  <li>ACORN_GROUP: Household group (A to Q)</li>\n  <li>MEAN_MONTH: AVG montly consumption</li>\n  <li>MEAN_HD: AVG consumption on holidays</li>\n  <li>MEAN_WD: AVG consumption on labor days (tuesday, wednesday)</li>\n  <li>MEAN_SD: AVG consumption on sundays (weekend)</li>\n  <li>MEAN_MAX: AVG of Max consumption (per day)</li>\n  <li>MEAN_MAX_H: AVG of Max consumption (per hour)</li>\n  <li>MEAN_MAX_H_TIME: Hour in labor days (not HD, saturday or sunday) where a max consumption is measured</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1543609947138_-706169417","id":"20181129-191030_2133670526","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:90"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\nmonth_avg=(month_df\n        .groupBy('METER_ID')\n        .agg(sqlFunctions.avg(month_df[\"MONTH_E\"]).alias(\"MEAN_MONTH\")))\n\nhd_avg=(day_df\n        .filter(day_df.HD)\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.DAY_E).alias(\"MEAN_HD\")))\n        \nwd_avg=(day_df\n        .filter(((date_format(day_df['DATE'], 'u')==2 )|(date_format(day_df['DATE'], 'u')==3)) & (day_df.HD==False))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.DAY_E).alias(\"MEAN_WD\")))              \n\nsd_avg=(day_df\n        .filter((date_format(day_df['DATE'], 'u')==7 ))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.DAY_E).alias(\"MEAN_SD\")))   \n        \nmax_day=(month_df\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(month_df.MAX_DAY_E).alias(\"MEAN_MAX\")))\n\nmax_avg_hour=(day_df\n        .filter((~day_df.HD) & (~(date_format(day_df['DATE'], 'u')==6 )|(date_format(day_df['DATE'], 'u')==7)))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.MAX_E).alias(\"MEAN_MAX_H\")))\n        \nmax_avg_hour_time=(day_df\n        .filter((~day_df.HD) & (~(date_format(day_df['DATE'], 'u')==6)|(date_format(day_df['DATE'], 'u')==7 )))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.MAX_TIME).alias(\"MEAN_MAX_H_TIME\")))\n        \nmax_avg_hour_time=(max_avg_hour_time\n        .withColumn('MEAN_MAX_H_TIME',(col('MEAN_MAX_H_TIME')).cast(IntegerType())))\n\n\nmeters_db=information_households.join(month_avg, information_households.METER_ID==month_avg.METER_ID)\nmeters_db=meters_db.drop(month_avg.METER_ID)\n\nmeters_db=meters_db.join(hd_avg, meters_db.METER_ID==hd_avg.METER_ID)\nmeters_db=meters_db.drop(hd_avg.METER_ID)\n\nmeters_db=meters_db.join(wd_avg, meters_db.METER_ID==wd_avg.METER_ID)\nmeters_db=meters_db.drop(wd_avg.METER_ID)\n\nmeters_db=meters_db.join(sd_avg, meters_db.METER_ID==sd_avg.METER_ID)\nmeters_db=meters_db.drop(sd_avg.METER_ID)\n\nmeters_db=meters_db.join(max_day, meters_db.METER_ID==max_day.METER_ID)\nmeters_db=meters_db.drop(max_day.METER_ID)\n\nmeters_db=meters_db.join(max_avg_hour, meters_db.METER_ID==max_avg_hour.METER_ID)\nmeters_db=meters_db.drop(max_avg_hour.METER_ID)\n\nmeters_db=meters_db.join(max_avg_hour_time, meters_db.METER_ID==max_avg_hour_time.METER_ID)\nmeters_db=meters_db.drop(max_avg_hour_time.METER_ID)\n\nmeters_db=meters_db.drop(meters_db.ID)\nmeters_db = meters_db.select(row_number().over(Window().orderBy(\"METER_ID\")).alias(\"ID\"), col(\"*\"))\n\nmeters_db=(meters_db\n        .withColumn(\"MEAN_MONTH\",round(\"MEAN_MONTH\",3))\n        .withColumn(\"MEAN_HD\",round(\"MEAN_HD\",3))\n        .withColumn(\"MEAN_WD\",round(\"MEAN_WD\",3))\n        .withColumn(\"MEAN_SD\",round(\"MEAN_SD\",3))\n        .withColumn(\"MEAN_MAX\",round(\"MEAN_MAX\",3))\n        .withColumn(\"MEAN_MAX_H\",round(\"MEAN_MAX_H\",3)))\n\n\nmes_et(startTimeQuery)\nprint('Meters database count: '+str(meters_db.count())+' records')\nmeters_db.show(5)\nmeters_db.printSchema()","user":"hduser","dateUpdated":"2018-11-30T14:32:27-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 8.81546401978 seconds\n+---+---------+-------+---------+------------------+-----------+----------+-------+-------+-------+--------+----------+---------------+\n| ID| METER_ID|STD_TOU|ACORN_CAT|    ACORN_CAT_NAME|ACORN_GROUP|MEAN_MONTH|MEAN_HD|MEAN_WD|MEAN_SD|MEAN_MAX|MEAN_MAX_H|MEAN_MAX_H_TIME|\n+---+---------+-------+---------+------------------+-----------+----------+-------+-------+-------+--------+----------+---------------+\n|  1|MAC000002|    Std|        1|Affluent Achievers|    ACORN-A|   359.125|  7.957| 11.855| 13.268|  21.259|     1.572|             17|\n|  2|MAC000246|    Std|        1|Affluent Achievers|    ACORN-A|    507.76| 18.792| 16.612| 21.898|  29.458|     2.807|             16|\n|  3|MAC000323|    Std|        1|Affluent Achievers|    ACORN-A|   483.153| 20.233| 14.997| 17.742|  28.746|     2.008|             17|\n|  4|MAC000379|    Std|        1|Affluent Achievers|    ACORN-A|    995.12|  32.56| 31.657| 33.903|  46.056|     3.127|             16|\n|  5|MAC000386|    Std|        1|Affluent Achievers|    ACORN-A|   348.358| 12.308| 11.057| 12.418|  16.472|     1.596|             13|\n+---+---------+-------+---------+------------------+-----------+----------+-------+-------+-------+--------+----------+---------------+\nonly showing top 5 rows\n\nMeters database count: 100 records\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- STD_TOU: string (nullable = true)\n |-- ACORN_CAT: integer (nullable = true)\n |-- ACORN_CAT_NAME: string (nullable = true)\n |-- ACORN_GROUP: string (nullable = true)\n |-- MEAN_MONTH: double (nullable = true)\n |-- MEAN_HD: double (nullable = true)\n |-- MEAN_WD: double (nullable = true)\n |-- MEAN_SD: double (nullable = true)\n |-- MEAN_MAX: double (nullable = true)\n |-- MEAN_MAX_H: double (nullable = true)\n |-- MEAN_MAX_H_TIME: integer (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1543609947138_-740425114","id":"20181128-160629_840876992","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:91"},{"text":"%md\n### tariff_val time series dataframe\nInformation about tariff for ToU users (with price information). Retrieved from **tariff dataframe** generated in [Extraction Notebook](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ).\n\n- Normal tariff, 11.76 p/kWh\n- High tariff, 67.20 p/kWh\n- Low tariff, 3.99 p/kWh\n\nColumns are:\n\n- ID\n- TIMESTAMP: Tariff date\n- TARIFF: Tariff code name\n- VALUE:  Tariff value","user":"hduser","dateUpdated":"2018-12-11T16:26:35-0600","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>tariff_val time series dataframe</h3>\n<p>Information about tariff for ToU users (with price information). Retrieved from <strong>tariff dataframe</strong> generated in <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">Extraction Notebook</a>.</p>\n<ul>\n  <li>Normal tariff, 11.76 p/kWh</li>\n  <li>High tariff, 67.20 p/kWh</li>\n  <li>Low tariff, 3.99 p/kWh</li>\n</ul>\n<p>Columns are:</p>\n<ul>\n  <li>ID</li>\n  <li>TIMESTAMP: Tariff date</li>\n  <li>TARIFF: Tariff code name</li>\n  <li>VALUE: Tariff value</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1544567192665_749118324","id":"20181211-162632_1833634001","dateCreated":"2018-12-11T16:26:32-0600","dateStarted":"2018-12-11T16:26:35-0600","dateFinished":"2018-12-11T16:26:35-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:92"},{"text":"%pyspark\n%\n\nstartTimeQuery = time.time()\ntariff_ts=tariff_ts.withColumn(\"Value\", when(col(\"Tariff\")==\"Normal\",11.76).otherwise(when(col(\"Tariff\")==\"High\",67.20).otherwise(3.99))).alias(\"VALUE\")\ntariff_ts=tariff_ts.withColumn(\"TariffDateTime\", to_timestamp(\"TariffDateTime\", \"dd/MM/yyyy HH:mm\"))\ntariff_ts=tariff_ts.filter(col(\"TariffDateTime\").isNotNull())\ntariff_ts = (tariff_ts.withColumnRenamed(\"TariffDateTime\", \"TIMESTAMP\")\n            .withColumnRenamed(\"Tariff\",\"TARIFF\")\n            .withColumnRenamed(\"Value\",\"VALUE\"))\ntariff_ts = tariff_ts.select(row_number().over(Window().orderBy(\"TIMESTAMP\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\nprint('Meters database count: '+str(tariff_ts.count())+' records')\ntariff_ts.show(5)\ntariff_ts.printSchema()","user":"hduser","dateUpdated":"2018-12-11T16:26:27-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1543609947139_1454582028","id":"20181129-155957_264682935","dateCreated":"2018-11-30T14:32:27-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93"}],"name":"JSGP/london/Test_ETL-T","id":"2DW6NN4WY","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}