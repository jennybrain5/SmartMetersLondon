{"paragraphs":[{"text":"%md\n# **ETL - TRANSFORMATION**\n\nThis notebook takes data from *ETL - EXTRACTION* notebook and performs all transformation needed. Please run [ETL - EXTRACTION](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ) notebook first. Final processed dataframes are: \n\n1. uk_hd\n2. acorn_cats\n3. acorn_groups\n2. information_households\n3. weather_daily_darksky\n4. weather_hourly_darksky\n5. hh_ts\n6. hour_ts\n7. day_ts\n8. month_ts\n9. hh_df\n10. hour_df\n11. day_df\n9. tariff_val\n10. meters_db","user":"hduser","dateUpdated":"2019-02-04T02:41:22-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1><strong>ETL - TRANSFORMATION</strong></h1>\n<p>This notebook takes data from <em>ETL - EXTRACTION</em> notebook and performs all transformation needed. Please run <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">ETL - EXTRACTION</a> notebook first. Final processed dataframes are: </p>\n<ol>\n  <li>uk_hd</li>\n  <li>acorn_cats</li>\n  <li>acorn_groups</li>\n  <li>information_households</li>\n  <li>weather_daily_darksky</li>\n  <li>weather_hourly_darksky</li>\n  <li>hh_ts</li>\n  <li>hour_ts</li>\n  <li>day_ts</li>\n  <li>month_ts</li>\n  <li>hh_df</li>\n  <li>hour_df</li>\n  <li>day_df</li>\n  <li>tariff_val</li>\n  <li>meters_db</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813038_623849825","id":"20181107-135809_84367222","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:22-0600","dateFinished":"2019-02-04T02:41:22-0600","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:55"},{"text":"%md\n### Imports and Basic Functions\n\nImport all needed libraries. Some pre-defined variables and functions are:\n\n1. test: How many of 112 blocks you need to dismiss for tests. Test=0 means you consider all 112 blocks in data processing\n2. count_null(col_name): Count null values for a column\n3. null_to_zero(dataframe, display): Replace null values from \"dataframe\" to zero (integer). If Display is true, shows column counts for null values before and after this function\n4. get_df_name(name): Return a dataframe with name= _name_ string","user":"hduser","dateUpdated":"2019-02-04T02:41:22-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Imports and Basic Functions</h3>\n<p>Import all needed libraries. Some pre-defined variables and functions are:</p>\n<ol>\n  <li>test: How many of 112 blocks you need to dismiss for tests. Test=0 means you consider all 112 blocks in data processing</li>\n  <li>count_null(col_name): Count null values for a column</li>\n  <li>null_to_zero(dataframe, display): Replace null values from &ldquo;dataframe&rdquo; to zero (integer). If Display is true, shows column counts for null values before and after this function</li>\n  <li>get_df_name(name): Return a dataframe with name= <em>name</em> string</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813042_-205895358","id":"20181128-115514_2019636023","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:22-0600","dateFinished":"2019-02-04T02:41:22-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:56"},{"text":"%pyspark\nfrom pyspark.sql.types import StructType\nfrom pyspark.sql.types import StructField\nfrom pyspark.sql import functions as sqlFunctions\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.functions import unix_timestamp,from_unixtime, date_format\nfrom pyspark.sql.functions import when, col\nfrom pyspark.sql.functions import monotonically_increasing_id\nfrom pyspark.sql.types import DateType\nfrom datetime import datetime\nimport subprocess\n\ngbl = globals()\n#How many of 112 blocks you need to dismiss for tests. Test=0 means you consider all 112 blocks in data processing\ntest=0\n\n# Count null values for a column\ndef count_null(col_name):\n    return sum(col(col_name).isNull().cast('integer')).alias(col_name)\n\n# Replace null values from \"dataframe\" to zero (integer)\n# display = true for showing column counts for null values before and after this function\ndef null_to_zero(dataframe, display):\n    bad_rows=dataframe.select([count(when(col(c).isNull(), c)).alias(c) for c in dataframe.columns])\n    \n    exprs = []\n    for col_name in bad_rows.columns:\n        if(bad_rows.groupBy().agg(sum(col_name)).collect()[0][0])>0:\n            exprs.append(col_name)\n    if (display==True):\n        print(\"\\nColumns with null values\")\n        print(exprs)\n    if (len(exprs)>0):\n        #print(\"\\nNull values count per column\")\n        for col_name in exprs:\n            dataframe = dataframe.na.fill({col_name: 0})\n        exprs = []\n        for col_name in dataframe.columns:\n            exprs.append(count_null(col_name))\n        #print(\"\\nNull values count per column after function\")\n        #dataframe.agg(*exprs).show()\n    if (display==True):\n        print(\"Dataframe count: \"+str(dataframe.count())+' records')\n    return dataframe\n    \ndef get_df_name(name):\n    for (k, v) in globals().items():\n        #if isinstance(v, DataFrame) for DataType filter instead name\n        if (k==name):\n            return v\n    ","user":"hduser","dateUpdated":"2019-02-13T17:42:47-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1548964813043_-1524644911","id":"20181025-135053_1999611944","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:23-0600","dateFinished":"2019-02-04T02:41:23-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:57"},{"text":"%md\n### uk_hd dataframe\n\nConvert String to Date in uk_hd and remove null records\n\n- ID\n- HD_DATE: Holiday Date\n- HD_NAME: Holiday Name","user":"hduser","dateUpdated":"2019-02-04T02:41:23-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>uk_hd dataframe</h3>\n<p>Convert String to Date in uk_hd and remove null records</p>\n<ul>\n  <li>ID</li>\n  <li>HD_DATE: Holiday Date</li>\n  <li>HD_NAME: Holiday Name</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813043_-1964932617","id":"20181128-120003_478121274","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:23-0600","dateFinished":"2019-02-04T02:41:23-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:58"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\n# Convert String to Date in uk_hd\nuk_hd = (uk_hd\n        .withColumn(\"HD_DATE\", to_date(uk_hd.HD_DATE, \"dd/MM/yyyy\")))\n        \nuk_hd=null_to_zero(uk_hd, False)\nuk_hd = uk_hd.select(row_number().over(Window().orderBy(\"HD_DATE\")).alias(\"ID\"), col(\"*\"))\n\nmes_et(startTimeQuery)\n\nprint(\"Holidays data count: \"+str(uk_hd.count())+' records')\n#uk_hd.show()\nuk_hd.printSchema()\n","user":"hduser","dateUpdated":"2019-02-13T17:42:55-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 3.01604509354 seconds\nHolidays data count: 25 records\nroot\n |-- ID: integer (nullable = true)\n |-- HD_DATE: date (nullable = true)\n |-- HD_NAME: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813044_2032570434","id":"20181107-133346_1458365935","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:23-0600","dateFinished":"2019-02-04T02:41:26-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:59"},{"text":"%md\n### acorn_cats dataframe\nA list with Households' ACORN categories and the % of population for each one.\n\n- ACORN_CAT: ID Category number (0-5)\n- ACORN_CAT_NAME: Category name\n- CAT_POPULATION: % of households classified under each category\n\nMore information about households ACORN categories in [ACORN household User Guide](http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf)","user":"hduser","dateUpdated":"2019-02-04T02:41:26-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>acorn_cats dataframe</h3>\n<p>A list with Households&rsquo; ACORN categories and the % of population for each one.</p>\n<ul>\n  <li>ACORN_CAT: ID Category number (0-5)</li>\n  <li>ACORN_CAT_NAME: Category name</li>\n  <li>CAT_POPULATION: % of households classified under each category</li>\n</ul>\n<p>More information about households ACORN categories in <a href=\"http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf\">ACORN household User Guide</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813044_428057920","id":"20181130-151511_1094072595","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:26-0600","dateFinished":"2019-02-04T02:41:26-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:60"},{"text":"%pyspark\nacorn_cats.printSchema()","user":"hduser","dateUpdated":"2019-02-04T02:41:26-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- ACORN_CAT: integer (nullable = true)\n |-- ACORN_CAT_NAME: string (nullable = true)\n |-- CAT_POPULATION: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813045_1429262491","id":"20181130-151520_455660545","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:26-0600","dateFinished":"2019-02-04T02:41:26-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61"},{"text":"%md\n### acorn_groups dataframe\nA list with Households' ACORN groups and the category for each one.\n\n- ID\n- ACORN_CAT: Category number (0-5)\n- ACORN_GROUP: ACORN Group (A to Q)\n- ACORN_CAT_NAME: Category name\n\nMore information about households ACORN categories in [ACORN household User Guide](http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf)","user":"hduser","dateUpdated":"2019-02-04T02:41:27-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>acorn_groups dataframe</h3>\n<p>A list with Households&rsquo; ACORN groups and the category for each one.</p>\n<ul>\n  <li>ID</li>\n  <li>ACORN_CAT: Category number (0-5)</li>\n  <li>ACORN_GROUP: ACORN Group (A to Q)</li>\n  <li>ACORN_CAT_NAME: Category name</li>\n</ul>\n<p>More information about households ACORN categories in <a href=\"http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf\">ACORN household User Guide</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813045_-325696208","id":"20181130-151549_184717255","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:27-0600","dateFinished":"2019-02-04T02:41:27-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62"},{"text":"%pyspark\nstartTimeQuery = time.time()\nacorn_groups=null_to_zero(acorn_groups, False)\nacorn_groups = acorn_groups.select(row_number().over(Window().orderBy(\"ACORN_CAT\",\"ACORN_GROUP\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\n#acorn_groups.show()\nacorn_groups.printSchema()","user":"hduser","dateUpdated":"2019-02-13T17:43:03-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 3.25916409492 seconds\nroot\n |-- ID: integer (nullable = true)\n |-- ACORN_CAT: integer (nullable = true)\n |-- ACORN_GROUP: string (nullable = true)\n |-- ACORN_CAT_NAME: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813046_314367244","id":"20181130-151600_371384821","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:27-0600","dateFinished":"2019-02-04T02:41:30-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:63"},{"text":"%md\n### information_households dataframe\n\nGive an ACORN Category (0 to 5)  to each ACORN group (A to Q) and remove null records from dataframe.\n\n- ID\n- METER_ID: Meter ID for each client\n- STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff\n- ACORN_CAT: Household ACORN category (0 to 5)\n- ACORN_CAT_NAME: HouseholdACORN category name\n- ACORN_GROUP: Household group (A to Q)\n\nMore information about households ACORN categories in [ACORN household User Guide](http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf)","user":"hduser","dateUpdated":"2019-02-04T02:41:30-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>information_households dataframe</h3>\n<p>Give an ACORN Category (0 to 5) to each ACORN group (A to Q) and remove null records from dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff</li>\n  <li>ACORN_CAT: Household ACORN category (0 to 5)</li>\n  <li>ACORN_CAT_NAME: HouseholdACORN category name</li>\n  <li>ACORN_GROUP: Household group (A to Q)</li>\n</ul>\n<p>More information about households ACORN categories in <a href=\"http://www.caci.co.uk/sites/default/files/resources/Household_Acorn_UG.pdf\">ACORN household User Guide</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813046_-321749134","id":"20181128-120924_1668978468","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:30-0600","dateFinished":"2019-02-04T02:41:30-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\ninformation_households=information_households.drop(\"ACORN_GROUP_NAME\") \ninformation_households=information_households.drop(\"FILE\") \ninformation_households=null_to_zero(information_households, False)\n    \na = information_households.alias('a')\nb = acorn_groups.alias('b')\ninformation_households = a.join(b, a.ACORN_GROUP == b.ACORN_GROUP)\n\ninformation_households=(information_households\n                        .select(\"METER_ID\",\"STD_TOU\",'ACORN_CAT','ACORN_CAT_NAME',a.ACORN_GROUP))\ninformation_households=information_households.filter(information_households.ACORN_CAT<>0)\ninformation_households=information_households.withColumn('CAT', when(col(\"ACORN_CAT\") == 1, 1).when(col(\"ACORN_CAT\") == 5, 3).when(col(\"ACORN_CAT\") == 0, 0).otherwise(2))\ninformation_households=information_households.withColumn('CAT_NAME', when(col(\"ACORN_CAT\") == 1, \"Affluent\").when(col(\"ACORN_CAT\") == 5, \"Stretched\").when(col(\"ACORN_CAT\") == 0, \"Other\").otherwise(\"Comfortable\"))\n                        \ninformation_households = information_households.select(row_number().over(Window().orderBy(\"ACORN_CAT\", \"METER_ID\")).alias(\"ID\"), col(\"*\"))\n\n\nmes_et(startTimeQuery)\ninformation_households.cache()\nprint(\"Information Households data count: \"+str(information_households.count())+' records')\n#information_households.show(5)\n\ninformation_households.printSchema()","user":"hduser","dateUpdated":"2019-02-13T17:43:10-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 1.48035097122 seconds\nInformation Households data count: 5515 records\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- STD_TOU: string (nullable = true)\n |-- ACORN_CAT: integer (nullable = true)\n |-- ACORN_CAT_NAME: string (nullable = true)\n |-- ACORN_GROUP: string (nullable = true)\n |-- CAT: integer (nullable = false)\n |-- CAT_NAME: string (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813047_-689126480","id":"20181107-133427_257021912","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:30-0600","dateFinished":"2019-02-04T02:41:33-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"text":"%md\n### weather_daily_darksky dataframe\n\nRemove null records from dataframe and cast time and date fields to right formats. Details for each column available at [Dark Sky API](https://darksky.net/dev/docs#response-format)\n","user":"hduser","dateUpdated":"2019-02-04T02:41:33-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>weather_daily_darksky dataframe</h3>\n<p>Remove null records from dataframe and cast time and date fields to right formats. Details for each column available at <a href=\"https://darksky.net/dev/docs#response-format\">Dark Sky API</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813047_461170154","id":"20181128-132938_1595055429","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:33-0600","dateFinished":"2019-02-04T02:41:33-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:66"},{"text":"%pyspark\nstartTimeQuery = time.time()\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_MAX_TIME\", (weather_daily_darksky.TEMP_MAX_TIME.cast(TimestampType())))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_MIN_TIME\", weather_daily_darksky.TEMP_MIN_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_MIN_TIME\", weather_daily_darksky.APAR_TEMP_MIN_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_HI_TIME\", weather_daily_darksky.APAR_TEMP_HI_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TIME\", weather_daily_darksky.TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"SUNSET_TIME\", weather_daily_darksky.SUNSET_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"SUNRISE_TIME\", weather_daily_darksky.SUNRISE_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_HI_TIME\", weather_daily_darksky.TEMP_HI_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"UV_INDEX_TIME\", weather_daily_darksky.UV_INDEX_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"TEMP_LO_TIME\", weather_daily_darksky.TEMP_LO_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_MAX_TIME\", weather_daily_darksky.APAR_TEMP_MAX_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"APAR_TEMP_LO_TIME\", weather_daily_darksky.APAR_TEMP_LO_TIME.cast(TimestampType()))\nweather_daily_darksky=weather_daily_darksky.withColumn(\"DATE\", to_date('TIME', \"yyyy-MM-dd\"))\n\nweather_daily_darksky=weather_daily_darksky.select(\"DATE\",\"TEMP_MAX\",\"TEMP_MAX_TIME\",\"TEMP_MIN\",\"TEMP_MIN_TIME\",\"PRESSURE\",\"HUMIDITY\",\"UV_INDEX\",\"SUNRISE_TIME\",\"SUNSET_TIME\")\n\ntimeFmt = \"yyyy-MM-dd HH:mm:ss\"\ntimeDiff = (sqlFunctions.unix_timestamp(weather_daily_darksky[\"SUNSET_TIME\"], format=timeFmt)\n            - sqlFunctions.unix_timestamp(weather_daily_darksky[\"SUNRISE_TIME\"], format=timeFmt))/60/60\n\nweather_daily_darksky = weather_daily_darksky.withColumn(\"LIGHT_HOURS\", round(timeDiff,2))\n\nweather_daily_darksky=null_to_zero(weather_daily_darksky, False)\n\nweather_daily_darksky=(weather_daily_darksky\n                    .withColumn(\"UV_INDEX\", weather_daily_darksky.UV_INDEX.cast(IntegerType())))\n                    \nweather_daily_darksky = weather_daily_darksky.select(row_number().over(Window().orderBy(\"DATE\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\nprint(\"Weather daily data count: \"+str(weather_daily_darksky.count())+' records')\n#weather_daily_darksky.show(5) \nweather_daily_darksky.printSchema()","user":"hduser","dateUpdated":"2019-02-13T17:43:16-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 14.7826809883 seconds\nWeather daily data count: 882 records\nroot\n |-- ID: integer (nullable = true)\n |-- DATE: date (nullable = true)\n |-- TEMP_MAX: double (nullable = true)\n |-- TEMP_MAX_TIME: timestamp (nullable = true)\n |-- TEMP_MIN: double (nullable = true)\n |-- TEMP_MIN_TIME: timestamp (nullable = true)\n |-- PRESSURE: double (nullable = true)\n |-- HUMIDITY: double (nullable = true)\n |-- UV_INDEX: integer (nullable = true)\n |-- SUNRISE_TIME: timestamp (nullable = true)\n |-- SUNSET_TIME: timestamp (nullable = true)\n |-- LIGHT_HOURS: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813048_-1911520616","id":"20181105-162311_1635293860","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:33-0600","dateFinished":"2019-02-04T02:41:49-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"text":"%md\n### weather_hourly_darksky dataframe\n\nRemove null records from dataframe and cast time and date fields to right formats. Details for each column available at [Dark Sky API](https://darksky.net/dev/docs#response-format)","user":"hduser","dateUpdated":"2019-02-04T02:41:49-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>weather_hourly_darksky dataframe</h3>\n<p>Remove null records from dataframe and cast time and date fields to right formats. Details for each column available at <a href=\"https://darksky.net/dev/docs#response-format\">Dark Sky API</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813048_-1633250317","id":"20181128-133509_1486972675","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:49-0600","dateFinished":"2019-02-04T02:41:49-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:68"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\nweather_hourly_darksky=(weather_hourly_darksky\n                        .withColumn(\"DATETIME\", weather_hourly_darksky.TIME.cast(TimestampType())))\nweather_hourly_darksky=weather_hourly_darksky.withColumn(\"DATE\", to_date(\"DATETIME\", \"yyyy-MM-dd HH:mm:ss\"))    \nweather_hourly_darksky=weather_hourly_darksky.select(\"DATETIME\", \"DATE\",\"TEMPERATURE\",\"PRESSURE\",\"HUMIDITY\")\nweather_hourly_darksky=null_to_zero(weather_hourly_darksky, True)\n\nweather_hourly_darksky = weather_hourly_darksky.select(row_number().over(Window().orderBy(\"DATETIME\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\nprint(\"Weather hourly data count: \"+str(weather_hourly_darksky.count())+' records')\n#weather_hourly_darksky.show(5)\nweather_hourly_darksky.printSchema()\n\n","user":"hduser","dateUpdated":"2019-02-13T17:43:25-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nColumns with null values\n['PRESSURE']\nDataframe count: 21165 records\nELAPSED TIME: 1.66955590248 seconds\nWeather hourly data count: 21165 records\nroot\n |-- ID: integer (nullable = true)\n |-- DATETIME: timestamp (nullable = true)\n |-- DATE: date (nullable = true)\n |-- TEMPERATURE: double (nullable = true)\n |-- PRESSURE: double (nullable = false)\n |-- HUMIDITY: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813049_-1544188349","id":"20181107-083814_273178083","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:49-0600","dateFinished":"2019-02-04T02:41:51-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"text":"%md\n### half_ts dataframes\n\nInformation about energy consumption for each client, each half hour in **TIME SERIES**. Union of all **half_block** [generated in Extraction Notebook](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ)\n\n- ID\n- METER_ID:  Meter ID for each client\n- TIMESTAMP: Measurement date and time\n- DATE: Measurement date\n- ENERGY: Total energy consumption for each half hour\n\n#### _half_ts_ dataframe is later broke into several dataframes, one for each year: half_11, half_12, etc","user":"hduser","dateUpdated":"2019-02-04T02:41:51-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>half_ts dataframes</h3>\n<p>Information about energy consumption for each client, each half hour in <strong>TIME SERIES</strong>. Union of all <strong>half_block</strong> <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">generated in Extraction Notebook</a></p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>TIMESTAMP: Measurement date and time</li>\n  <li>DATE: Measurement date</li>\n  <li>ENERGY: Total energy consumption for each half hour</li>\n</ul>\n<h4><em>half_ts</em> dataframe is later broke into several dataframes, one for each year: half_11, half_12, etc</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813050_182260204","id":"20181211-143704_478090300","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:51-0600","dateFinished":"2019-02-04T02:41:51-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"text":"%pyspark\n#halfhourly_dataset/block_0-111\nstartTimeQuery = time.time()\nsubdir=\"halfhourly_dataset/\"\nargs = \"hdfs dfs -ls \"+dir_in+subdir+\" | awk '{print $8}'\"\nproc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\ns_output, s_err = proc.communicate()\nblock_list = s_output.split()\n\n#iterate through all files in directory to generate a dataframe for each file \nfor i in range(len(block_list)-test):\n    block=\"block_\"+`i`\n    block_name_str=\"half_\"+block\n    half=get_df_name(block_name_str)\n    \n    if (i>0):\n        half_ts=half_ts.unionAll(half)\n    else:\n        half_ts=half\n\nhalf_ts=null_to_zero(half_ts, True)\n\n\nhalf_ts=half_ts.withColumn(\"TIMESTAMP\", half_ts.TIMESTAMP.cast(TimestampType()))\nhalf_ts=half_ts.withColumn(\"DATE\", to_date(\"TIMESTAMP\",\"yyyy-MM-dd HH:mm:ss\"))\n\nhalf_ts=(half_ts.filter(col(\"METER_ID\").isNotNull())\n                .filter(col(\"ENERGY\")>0))\nhalf_ts=half_ts.select(\"METER_ID\",\"DATE\",\"TIMESTAMP\",\"ENERGY\")\nhalf_ts = half_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))   \n\nmes_et(startTimeQuery)\nprint(\"Half block time series data count: \"+str(half_ts.count())+' records')\n#half_ts.show(5)\nhalf_ts.printSchema()\n","user":"hduser","dateUpdated":"2019-02-13T17:43:35-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nColumns with null values\n['ENERGY']\nDataframe count: 167817021 records\nELAPSED TIME: 57.039372921 seconds\nHalf block time series data count: 165809909 records\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- TIMESTAMP: timestamp (nullable = true)\n |-- ENERGY: double (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813050_-670601247","id":"20181211-143734_713986091","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:41:51-0600","dateFinished":"2019-02-04T02:43:04-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nhalf_11=half_ts.filter(date_format('DATE','yyyy')==2011)\nhalf_12=half_ts.filter(date_format('DATE','yyyy')==2012)\nhalf_13=half_ts.filter(date_format('DATE','yyyy')==2013)\nhalf_14=half_ts.filter(date_format('DATE','yyyy')==2014)\n\nmes_et(startTimeQuery)\n\nprint(\"Half block data count for 2011: \"+str(half_11.count())+' records')\nprint(\"Half block data count for 2012: \"+str(half_12.count())+' records')\nprint(\"Half block data count for 2013: \"+str(half_13.count())+' records')\nprint(\"Half block data count for 2014: \"+str(half_14.count())+' records')\n","user":"hduser","dateUpdated":"2019-02-04T02:43:04-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.0600287914276 seconds\nHalf block data count for 2011: 394306 records\nHalf block data count for 2012: 59706396 records\nHalf block data count for 2013: 91861554 records\nHalf block data count for 2014: 13847653 records\n"}]},"apps":[],"jobName":"paragraph_1548964813051_-693527740","id":"20181213-082729_1454443086","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:43:04-0600","dateFinished":"2019-02-04T02:45:21-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nacorn=half_ts.join(information_households.select([\"METER_ID\",\"ACORN_CAT\"]), half_ts.METER_ID==information_households.METER_ID).drop(information_households.METER_ID)\n\nacorn1=acorn.filter(col(\"ACORN_CAT\")==1).drop(\"ACORN_CAT\")\nacorn1 = acorn1.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))  \n\nacorn2=acorn.filter(col(\"ACORN_CAT\")==2).drop(\"ACORN_CAT\")\nacorn2 = acorn2.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))  \n\nacorn3=acorn.filter(col(\"ACORN_CAT\")==3).drop(\"ACORN_CAT\")\nacorn3 = acorn3.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))  \n\nacorn4=acorn.filter(col(\"ACORN_CAT\")==4).drop(\"ACORN_CAT\")\nacorn4 = acorn4.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))  \n\nacorn5=acorn.filter(col(\"ACORN_CAT\")==5).drop(\"ACORN_CAT\")\nacorn5 = acorn5.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))  \n\nmes_et(startTimeQuery)\n\n#print(\"Half block data count for ACORN 1: \"+str(acorn1.count())+' records')\n#print(\"Half block data count for ACORN 2: \"+str(acorn2.count())+' records')\n#print(\"Half block data count for ACORN 3: \"+str(acorn3.count())+' records')\n#print(\"Half block data count for ACORN 4: \"+str(acorn4.count())+' records')\n#print(\"Half block data count for ACORN 5: \"+str(acorn5.count())+' records')\n#acorn5.show(5)","user":"hduser","dateUpdated":"2019-02-13T17:43:41-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.250306129456 seconds\nHalf block data count for ACORN 1: 9355241 records\nHalf block data count for ACORN 2: 57071019 records\nHalf block data count for ACORN 3: 44390456 records\nHalf block data count for ACORN 4: 22255121 records\nHalf block data count for ACORN 5: 31376430 records\n"}]},"apps":[],"jobName":"paragraph_1548964813052_-25381625","id":"20181213-113714_1707154132","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:45:21-0600","dateFinished":"2019-02-04T02:46:38-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"text":"%md\n### hour_ts dataframe\n\nInformation about energy consumption for each client, each hour in TIME SERIES. Retrieved from half_ts dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- TIMESTAMP: Measurenent timestamp\n- DATE: Measurement date\n- ENERGY: Total energy consumption for each hour\n\n#### _hour_ts_ dataframe is later broke into several dataframes, one for each year: hour_11, hour_12, etc","user":"hduser","dateUpdated":"2019-02-04T02:46:38-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>hour_ts dataframe</h3>\n<p>Information about energy consumption for each client, each hour in TIME SERIES. Retrieved from half_ts dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>TIMESTAMP: Measurenent timestamp</li>\n  <li>DATE: Measurement date</li>\n  <li>ENERGY: Total energy consumption for each hour</li>\n</ul>\n<h4><em>hour_ts</em> dataframe is later broke into several dataframes, one for each year: hour_11, hour_12, etc</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813052_-1363411256","id":"20181211-143802_216346205","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:46:38-0600","dateFinished":"2019-02-04T02:46:38-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nhour_ts=(half_ts.groupBy('METER_ID',\"DATE\",hour(\"TIMESTAMP\").alias(\"HOUR\"))\n                .agg(sqlFunctions.sum(\"ENERGY\").alias(\"ENERGY\"))\n                .orderBy(\"METER_ID\",\"DATE\",\"HOUR\"))\n\nhour_ts=hour_ts.withColumn(\"ENERGY\",round(\"ENERGY\",3))\n\nhour_ts = hour_ts.join(uk_hd, hour_ts.DATE == uk_hd.HD_DATE, how = 'left_outer')\nhour_ts=hour_ts.drop(uk_hd.ID)\nhour_ts=hour_ts.withColumn(\"HD\", when(col(\"DATE\")==col(\"HD_DATE\"),True).otherwise(False))\nhour_ts=hour_ts.drop(\"HD_DATE\",\"HD_NAME\")\n\nhour_ts=hour_ts.select(\"METER_ID\",(concat(date_format(\"DATE\", \"yyyy-MM-dd\"),lit(\" \"),hour_ts.HOUR,lit(\":00:00\"))).cast(TimestampType()).alias(\"TIMESTAMP\"),\"DATE\",\"HD\",\"ENERGY\")\n\nhour_ts = hour_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"TIMESTAMP\")).alias(\"ID\"), col(\"*\")) \n#print(\"Hour block time series data count: \"+str(hour_ts.count())+' records')\nmes_et(startTimeQuery)\n#hour_ts.show(5)\nhour_ts.printSchema()\n","user":"hduser","dateUpdated":"2019-02-04T03:01:10-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Hour block time series data count: 83204183 records\nELAPSED TIME: 90.8829638958 seconds\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- TIMESTAMP: timestamp (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HD: boolean (nullable = false)\n |-- ENERGY: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813053_-901496154","id":"20181211-143817_2130045967","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:46:38-0600","dateFinished":"2019-02-04T02:48:09-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nhour_11=hour_ts.filter(date_format('DATE','yyyy')==2011)\nhour_12=hour_ts.filter(date_format('DATE','yyyy')==2012)\nhour_13=hour_ts.filter(date_format('DATE','yyyy')==2013)\nhour_14=hour_ts.filter(date_format('DATE','yyyy')==2014)\nhour_13.cache()\nmes_et(startTimeQuery)\n\n#print(\"Half block data count for 2011: \"+str(hour_11.count())+' records')\n#print(\"Half block data count for 2012: \"+str(hour_12.count())+' records')\n#print(\"Half block data count for 2013: \"+str(hour_13.count())+' records')\n#print(\"Half block data count for 2014: \"+str(hour_14.count())+' records')\n\n","user":"hduser","dateUpdated":"2019-02-04T02:48:09-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 68.0188639164 seconds\n"}]},"apps":[],"jobName":"paragraph_1548964813053_-609993305","id":"20181213-083427_587835007","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:48:09-0600","dateFinished":"2019-02-04T02:49:17-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"text":"%md\n\n### day_ts dataframe\n\nInformation about energy consumption for each client, each day in **TIME SERIES**. Retrieved from **hour_ts** dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- ENERGY: Total energy consumptiion for each day \n- E_MAX: maximum consumption (per half hour registered each day)","user":"hduser","dateUpdated":"2019-02-04T02:49:17-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>day_ts dataframe</h3>\n<p>Information about energy consumption for each client, each day in <strong>TIME SERIES</strong>. Retrieved from <strong>hour_ts</strong> dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>ENERGY: Total energy consumptiion for each day</li>\n  <li>E_MAX: maximum consumption (per half hour registered each day)</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813054_-384907296","id":"20181211-143921_436688174","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:49:17-0600","dateFinished":"2019-02-04T02:49:17-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nday_ts=(hour_ts.groupBy(\"METER_ID\",\"DATE\")\n                .agg(sqlFunctions.sum(\"ENERGY\").alias(\"ENERGY\"),sqlFunctions.max(\"ENERGY\").alias(\"E_MAX\"))\n                .orderBy(\"METER_ID\",\"DATE\"))\n                \nday_ts=day_ts.withColumn(\"ENERGY\", round (\"ENERGY\",3))       \nday_ts = day_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\n#print(\"Day time series data count: \"+str(day_ts.count())+' records')\n#day_ts.show(5)                \nday_ts.printSchema()\n","user":"hduser","dateUpdated":"2019-02-13T17:43:56-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.193712949753 seconds\nDay time series data count: 3495265 records\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- ENERGY: double (nullable = true)\n |-- E_MAX: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813054_202092295","id":"20181211-143939_454141032","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:49:17-0600","dateFinished":"2019-02-04T02:50:53-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:78"},{"text":"%md\n### month_ts dataframe\n\nInformation about energy consumption for each client, each month in **TIME SERIES**. Retrieved from day_df dataframe\n\n- ID\n- METER_ID: Meter ID for each client\n- YEAR: Measurement Year\n- MONTH: Measurement Month\n- MONTH_E: Energy measurement for each month","user":"hduser","dateUpdated":"2019-02-04T02:50:53-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>month_ts dataframe</h3>\n<p>Information about energy consumption for each client, each month in <strong>TIME SERIES</strong>. Retrieved from day_df dataframe</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>YEAR: Measurement Year</li>\n  <li>MONTH: Measurement Month</li>\n  <li>MONTH_E: Energy measurement for each month</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813055_732282470","id":"20181211-143953_1929367721","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:50:53-0600","dateFinished":"2019-02-04T02:50:53-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:79"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\nmonth_ts=day_ts\nmonth_ts=month_ts.select('ID','METER_ID',date_format('DATE','yyyy').alias(\"YEAR\"),date_format('DATE','MM').alias(\"MONTH\"),date_format('DATE','d').alias(\"DAY\"),'ENERGY')\n\n\nmonth_ts=month_ts.groupBy('METER_ID',\"YEAR\", \"MONTH\").agg(sqlFunctions.sum(day_ts['ENERGY']).alias('MONTH_E'),sqlFunctions.count(day_ts['ENERGY']).alias('COUNT_MONTH'),sqlFunctions.avg(day_ts['ENERGY']).alias('AVG_DAY'),sqlFunctions.max(day_ts['ENERGY']).alias('MAX_DAY_E')).orderBy('METER_ID',\"YEAR\", \"MONTH\")\n\nmonth_ts=month_ts.filter(month_ts.COUNT_MONTH>27)\nmonth_ts=month_ts.withColumn(\"MONTH_E\", round(col(\"MONTH_E\"),3)).withColumn(\"AVG_DAY\", round(col(\"AVG_DAY\"),3))\n\nmonth_ts = month_ts.select(row_number().over(Window().orderBy(\"METER_ID\",\"YEAR\",\"MONTH\",)).alias(\"ID\"), col(\"*\"))\n\nmes_et(startTimeQuery)\n\n#print(\"Month data count: \"+str(month_ts.count())+' records')\n#month_ts.show(5)","user":"hduser","dateUpdated":"2019-02-04T03:01:10-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.314684152603 seconds\nMonth data count: 112056 records\n"}]},"apps":[],"jobName":"paragraph_1548964813055_470474884","id":"20181211-144009_194378805","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:50:54-0600","dateFinished":"2019-02-04T02:53:15-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:80"},{"text":"%md\n### hh_df dataframe\n\nInformation about energy consumption for each client, each half hour. Union of all **hh_blocks** [generated in Extraction Notebook](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ)\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- HHX: Energy measurement for each 30 minutes. From HH0 = 00:00 to HH47=23:30","user":"hduser","dateUpdated":"2019-02-04T02:53:15-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>hh_df dataframe</h3>\n<p>Information about energy consumption for each client, each half hour. Union of all <strong>hh_blocks</strong> <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">generated in Extraction Notebook</a></p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>HHX: Energy measurement for each 30 minutes. From HH0 = 00:00 to HH47=23:30</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813056_-692018018","id":"20181129-093719_266618668","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:53:15-0600","dateFinished":"2019-02-04T02:53:15-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:81"},{"text":"%pyspark\n#hhblock_dataset/block_0-111\nstartTimeQuery = time.time()\nsubdir=\"hhblock_dataset/\"\nargs = \"hdfs dfs -ls \"+dir_in+subdir+\" | awk '{print $8}'\"\nproc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\ns_output, s_err = proc.communicate()\nblock_list = s_output.split()\n\n#iterate through all files in directory \nfor i in range(len(block_list)-test):\n    block=\"block_\"+`i`\n    block_name_hh_str=\"hh_\"+block\n    hh=get_df_name(block_name_hh_str)\n    \n    #This is to save each block in a separate dataframe\n    #gbl[block_name_hh_str]= hh \n    \n    ##BLOCK UNION TO GET ONE DATAFRAME FOR ALL\n    if (i>0):\n        hh_df=hh_df.unionAll(hh)\n    else:\n        hh_df=hh\n    \nfor j in range (48):\n    hstr='HH'+str(j)\n    hh_df = hh_df.withColumn(hstr, round(hstr,3))\n\nhh_df = hh_df.withColumn(\"DATE\", to_date(hh_df.DATE, \"yyyy-MM-dd\"))\nhh_df=null_to_zero(hh_df, False)\n    \n    \n    \nhh_df = hh_df.select(row_number().over(Window().orderBy(\"METER_ID\",\"DATE\")).alias(\"ID\"), col(\"*\"))\n\n\nmes_et(startTimeQuery)\n#print(\"Half hour data count: \"+str(hh_df.count())+' records')\n#hh_df.show(5)\nhh_df.printSchema()\n","user":"hduser","dateUpdated":"2019-02-13T17:44:14-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 248.695285082 seconds\nHalf hour data count: 3469352 records\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HH0: double (nullable = true)\n |-- HH1: double (nullable = true)\n |-- HH2: double (nullable = true)\n |-- HH3: double (nullable = true)\n |-- HH4: double (nullable = true)\n |-- HH5: double (nullable = true)\n |-- HH6: double (nullable = true)\n |-- HH7: double (nullable = true)\n |-- HH8: double (nullable = true)\n |-- HH9: double (nullable = true)\n |-- HH10: double (nullable = true)\n |-- HH11: double (nullable = true)\n |-- HH12: double (nullable = true)\n |-- HH13: double (nullable = true)\n |-- HH14: double (nullable = true)\n |-- HH15: double (nullable = true)\n |-- HH16: double (nullable = true)\n |-- HH17: double (nullable = true)\n |-- HH18: double (nullable = true)\n |-- HH19: double (nullable = false)\n |-- HH20: double (nullable = true)\n |-- HH21: double (nullable = true)\n |-- HH22: double (nullable = true)\n |-- HH23: double (nullable = true)\n |-- HH24: double (nullable = true)\n |-- HH25: double (nullable = false)\n |-- HH26: double (nullable = false)\n |-- HH27: double (nullable = true)\n |-- HH28: double (nullable = true)\n |-- HH29: double (nullable = true)\n |-- HH30: double (nullable = false)\n |-- HH31: double (nullable = true)\n |-- HH32: double (nullable = true)\n |-- HH33: double (nullable = true)\n |-- HH34: double (nullable = true)\n |-- HH35: double (nullable = true)\n |-- HH36: double (nullable = false)\n |-- HH37: double (nullable = true)\n |-- HH38: double (nullable = true)\n |-- HH39: double (nullable = true)\n |-- HH40: double (nullable = true)\n |-- HH41: double (nullable = true)\n |-- HH42: double (nullable = true)\n |-- HH43: double (nullable = true)\n |-- HH44: double (nullable = true)\n |-- HH45: double (nullable = true)\n |-- HH46: double (nullable = true)\n |-- HH47: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813056_1255050205","id":"20181107-130448_655374845","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:53:15-0600","dateFinished":"2019-02-04T02:57:29-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:82"},{"text":"%md\n### hour_df dataframe\n\nInformation about energy consumption for each client, each hour. Retrieved from hh_df dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- HHX: Energy measurement for each hour of the day\n- HD: boolean indicating True for Holidays\n- MAX_E: max energy consumption \n- MAX_TIME: hour in day with max energy consumption\n\n### day_df dataframe\n\nInformation about energy consumption for each client, each day. Retrieved from hour_df dataframe.\n\n- ID\n- METER_ID:  Meter ID for each client\n- DATE: Measurement date\n- HD: boolean indicating True for Holidays\n- MAX_E: max energy consumption \n- MAX_TIME: hour in day with max energy consumption\n- DAY_E: Energy measurement for each day\n","user":"hduser","dateUpdated":"2019-02-04T02:57:29-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>hour_df dataframe</h3>\n<p>Information about energy consumption for each client, each hour. Retrieved from hh_df dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>HHX: Energy measurement for each hour of the day</li>\n  <li>HD: boolean indicating True for Holidays</li>\n  <li>MAX_E: max energy consumption</li>\n  <li>MAX_TIME: hour in day with max energy consumption</li>\n</ul>\n<h3>day_df dataframe</h3>\n<p>Information about energy consumption for each client, each day. Retrieved from hour_df dataframe.</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>DATE: Measurement date</li>\n  <li>HD: boolean indicating True for Holidays</li>\n  <li>MAX_E: max energy consumption</li>\n  <li>MAX_TIME: hour in day with max energy consumption</li>\n  <li>DAY_E: Energy measurement for each day</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813057_901143151","id":"20181129-123036_535779135","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:57:29-0600","dateFinished":"2019-02-04T02:57:29-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:83"},{"text":"%pyspark\n\nhour_df=hh_df\nfor j in range (24):\n    hstr='H'+str(j)\n    hhstr0='HH'+str(2*j)\n    hhstr1='HH'+str(2*j+1)\n    hour_df = hour_df.withColumn(hstr, round(hour_df[hhstr0]+hour_df[hhstr1],3))\n    hour_df=hour_df.drop(hhstr0)\n    hour_df=hour_df.drop(hhstr1)\n        \nhour_df = hour_df.join(uk_hd, hour_df.DATE == uk_hd.HD_DATE, how = 'left_outer')\nhour_df=hour_df.drop(uk_hd.ID)\nhour_df=hour_df.withColumn(\"HD\", when(col(\"DATE\")==col(\"HD_DATE\"),True).otherwise(False))\nhour_df=hour_df.drop(\"HD_DATE\",\"HD_NAME\")\n\nslice_hours=hour_df.columns[3:27]\nhour_df=hour_df.withColumn(\"MAX_E\", greatest(*slice_hours))\n\ncond = (\"sqlFunctions.when\" + \".when\"\n        .join([\"(sqlFunctions.col('\" + c + \"') == sqlFunctions.col('MAX_E'), sqlFunctions.lit('\" + c + \"'))\" for c in slice_hours]))\n        \nhour_df=hour_df.withColumn(\"MAX_TIME\", eval(cond))\n\nhour_df=(hour_df\n        .withColumn(\"MAX_TIME\", regexp_extract('MAX_TIME', r'^H(\\d+)$', 1).alias('Title').cast(IntegerType())))\n\nday_df=hour_df.withColumn('DAY_E',hour_df['H0']*0)\n\nfor j in range (24):\n    hstr='H'+str(j)\n    day_df = day_df.withColumn('DAY_E', round((day_df['DAY_E']+day_df[hstr]),3))\n    day_df=day_df.drop(hstr)\n\nmes_et(startTimeQuery)\n#print(\"Hour data count: \"+str(hour_df.count())+' records')\n#print(\"Day data count: \"+str(day_df.count())+' records')\n#hour_df.show(5)\n#day_df.show(5)\nhour_df.printSchema()\nday_df.printSchema()","user":"hduser","dateUpdated":"2019-02-04T03:01:10-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 261.26526618 seconds\nHour data count: 3469352 records\nDay data count: 3469352 records\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- H0: double (nullable = true)\n |-- H1: double (nullable = true)\n |-- H2: double (nullable = true)\n |-- H3: double (nullable = true)\n |-- H4: double (nullable = true)\n |-- H5: double (nullable = true)\n |-- H6: double (nullable = true)\n |-- H7: double (nullable = true)\n |-- H8: double (nullable = true)\n |-- H9: double (nullable = true)\n |-- H10: double (nullable = true)\n |-- H11: double (nullable = true)\n |-- H12: double (nullable = true)\n |-- H13: double (nullable = true)\n |-- H14: double (nullable = true)\n |-- H15: double (nullable = true)\n |-- H16: double (nullable = true)\n |-- H17: double (nullable = true)\n |-- H18: double (nullable = true)\n |-- H19: double (nullable = true)\n |-- H20: double (nullable = true)\n |-- H21: double (nullable = true)\n |-- H22: double (nullable = true)\n |-- H23: double (nullable = true)\n |-- HD: boolean (nullable = false)\n |-- MAX_E: double (nullable = true)\n |-- MAX_TIME: integer (nullable = true)\n\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HD: boolean (nullable = false)\n |-- MAX_E: double (nullable = true)\n |-- MAX_TIME: integer (nullable = true)\n |-- DAY_E: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813057_2023856547","id":"20181129-123153_1365351373","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:57:29-0600","dateFinished":"2019-02-04T02:57:49-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:84"},{"text":"%md\n### tariff_val dataframe\nInformation about tariff for ToU users (with price information). Retrieved from **tariff dataframe** generated in [Extraction Notebook](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ).\n\n- Normal tariff, 11.76 p/kWh\n- High tariff, 67.20 p/kWh\n- Low tariff, 3.99 p/kWh\n\nColumns are:\n\n- ID\n- DATE: Tariff date\n- HHX: tariff price for each half hour\n- HD: if date is holiday or not","user":"hduser","dateUpdated":"2019-02-04T02:57:50-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>tariff_val dataframe</h3>\n<p>Information about tariff for ToU users (with price information). Retrieved from <strong>tariff dataframe</strong> generated in <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">Extraction Notebook</a>.</p>\n<ul>\n  <li>Normal tariff, 11.76 p/kWh</li>\n  <li>High tariff, 67.20 p/kWh</li>\n  <li>Low tariff, 3.99 p/kWh</li>\n</ul>\n<p>Columns are:</p>\n<ul>\n  <li>ID</li>\n  <li>DATE: Tariff date</li>\n  <li>HHX: tariff price for each half hour</li>\n  <li>HD: if date is holiday or not</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813058_-1721962506","id":"20181129-100909_1707779033","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:57:50-0600","dateFinished":"2019-02-04T02:57:50-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:85"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\ntariff = tariff.withColumn(\"DATE\", to_date(tariff['Date'], \"dd/MM/yyyy\"))\ntariff_val=tariff\n\nfor col_name in tariff_val.columns[1::]:\n    tariff_val = (tariff_val\n                .withColumn(col_name, when(col(col_name) == 0, 11.76).when(col(col_name) == 1, 67.20).otherwise(3.99)))\n\n\ntariff_val = tariff_val.join(uk_hd, tariff_val.DATE == uk_hd.HD_DATE, how = 'left_outer')\ntariff_val=tariff_val.drop(uk_hd.ID)\ntariff_val=tariff_val.withColumn(\"HD\", when(col(\"DATE\")==col(\"HD_DATE\"),True).otherwise(False))\ntariff_val=tariff_val.drop(\"HD_DATE\")\ntariff_val=tariff_val.drop(\"HD_NAME\")\ntariff_val = tariff_val.select(row_number().over(Window().orderBy(\"DATE\")).alias(\"ID\"), col(\"*\"))\n\nmes_et(startTimeQuery)\n\n#print('Tariff data count: '+str(tariff_val.count())+' records')\n#tariff_val.show(5)\ntariff_val.printSchema()\n\n","user":"hduser","dateUpdated":"2019-02-13T17:44:25-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 1.32942700386 seconds\nTariff data count: 365 records\nroot\n |-- ID: integer (nullable = true)\n |-- DATE: date (nullable = true)\n |-- HH0: double (nullable = false)\n |-- HH1: double (nullable = false)\n |-- HH2: double (nullable = false)\n |-- HH3: double (nullable = false)\n |-- HH4: double (nullable = false)\n |-- HH5: double (nullable = false)\n |-- HH6: double (nullable = false)\n |-- HH7: double (nullable = false)\n |-- HH8: double (nullable = false)\n |-- HH9: double (nullable = false)\n |-- HH10: double (nullable = false)\n |-- HH11: double (nullable = false)\n |-- HH12: double (nullable = false)\n |-- HH13: double (nullable = false)\n |-- HH14: double (nullable = false)\n |-- HH15: double (nullable = false)\n |-- HH16: double (nullable = false)\n |-- HH17: double (nullable = false)\n |-- HH18: double (nullable = false)\n |-- HH19: double (nullable = false)\n |-- HH20: double (nullable = false)\n |-- HH21: double (nullable = false)\n |-- HH22: double (nullable = false)\n |-- HH23: double (nullable = false)\n |-- HH24: double (nullable = false)\n |-- HH25: double (nullable = false)\n |-- HH26: double (nullable = false)\n |-- HH27: double (nullable = false)\n |-- HH28: double (nullable = false)\n |-- HH29: double (nullable = false)\n |-- HH30: double (nullable = false)\n |-- HH31: double (nullable = false)\n |-- HH32: double (nullable = false)\n |-- HH33: double (nullable = false)\n |-- HH34: double (nullable = false)\n |-- HH35: double (nullable = false)\n |-- HH36: double (nullable = false)\n |-- HH37: double (nullable = false)\n |-- HH38: double (nullable = false)\n |-- HH39: double (nullable = false)\n |-- HH40: double (nullable = false)\n |-- HH41: double (nullable = false)\n |-- HH42: double (nullable = false)\n |-- HH43: double (nullable = false)\n |-- HH44: double (nullable = false)\n |-- HH45: double (nullable = false)\n |-- HH46: double (nullable = false)\n |-- HH47: double (nullable = false)\n |-- HD: boolean (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813058_-2142793681","id":"20181126-160835_79221582","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:57:50-0600","dateFinished":"2019-02-04T02:57:51-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:86"},{"text":"%md\n## USERS DATABASE - Consumption patterns\n\nFinal database with main consumption characteristics by client (meter)\n\n- ID\n- METER_ID: Meter ID for each client\n- STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff\n- ACORN_CAT: Household ACORN category (0 to 5)\n- ACORN_CAT_NAME: HouseholdACORN category name\n- ACORN_GROUP: Household group (A to Q)\n- MEAN_MONTH: AVG montly consumption\n- MEAN_HD: AVG consumption on holidays\n- MEAN_WD: AVG consumption on labor days (tuesday, wednesday)\n- MEAN_SD: AVG consumption on sundays (weekend)\n- MEAN_MAX: AVG of Max consumption (per day)\n- MEAN_MAX_H: AVG of Max consumption (per hour) \n- MEAN_MAX_H_TIME: Hour in labor days (not HD, saturday or sunday) where a max consumption is measured","user":"hduser","dateUpdated":"2019-02-04T02:57:51-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>USERS DATABASE - Consumption patterns</h2>\n<p>Final database with main consumption characteristics by client (meter)</p>\n<ul>\n  <li>ID</li>\n  <li>METER_ID: Meter ID for each client</li>\n  <li>STD_TOU: Indicates weather a client is participating in Standard or TimeOfUse tariff</li>\n  <li>ACORN_CAT: Household ACORN category (0 to 5)</li>\n  <li>ACORN_CAT_NAME: HouseholdACORN category name</li>\n  <li>ACORN_GROUP: Household group (A to Q)</li>\n  <li>MEAN_MONTH: AVG montly consumption</li>\n  <li>MEAN_HD: AVG consumption on holidays</li>\n  <li>MEAN_WD: AVG consumption on labor days (tuesday, wednesday)</li>\n  <li>MEAN_SD: AVG consumption on sundays (weekend)</li>\n  <li>MEAN_MAX: AVG of Max consumption (per day)</li>\n  <li>MEAN_MAX_H: AVG of Max consumption (per hour)</li>\n  <li>MEAN_MAX_H_TIME: Hour in labor days (not HD, saturday or sunday) where a max consumption is measured</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813059_225016418","id":"20181129-191030_2133670526","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:57:51-0600","dateFinished":"2019-02-04T02:57:51-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87"},{"text":"%pyspark\nstartTimeQuery = time.time()\n\nmonth_avg=(month_ts\n        .groupBy('METER_ID')\n        .agg(sqlFunctions.avg(month_ts[\"MONTH_E\"]).alias(\"MEAN_MONTH\")))\n\nhd_avg=(day_df\n        .filter(day_df.HD)\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.DAY_E).alias(\"MEAN_HD\")))\n        \nwd_avg=(day_df\n        .filter(((date_format(day_df['DATE'], 'u')==2 )|(date_format(day_df['DATE'], 'u')==3)) & (day_df.HD==False))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.DAY_E).alias(\"MEAN_WD\")))              \n\nsd_avg=(day_df\n        .filter((date_format(day_df['DATE'], 'u')==7 ))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.DAY_E).alias(\"MEAN_SD\")))   \n        \nmax_day=(month_ts\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(month_ts.MAX_DAY_E).alias(\"MEAN_MAX\")))\n\nmax_avg_hour=(day_df\n        .filter((~day_df.HD) & (~(date_format(day_df['DATE'], 'u')==6 )|(date_format(day_df['DATE'], 'u')==7)))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.MAX_E).alias(\"MEAN_MAX_H\")))\n        \nmax_avg_hour_time=(day_df\n        .filter((~day_df.HD) & (~(date_format(day_df['DATE'], 'u')==6)|(date_format(day_df['DATE'], 'u')==7 )))\n        .groupBy(\"METER_ID\")\n        .agg(sqlFunctions.avg(day_df.MAX_TIME).alias(\"MEAN_MAX_H_TIME\")))\n        \nmax_avg_hour_time=(max_avg_hour_time\n        .withColumn('MEAN_MAX_H_TIME',(col('MEAN_MAX_H_TIME')).cast(IntegerType())))\n\n\nmeters_db=information_households.select([\"METER_ID\"]).join(month_avg, information_households.METER_ID==month_avg.METER_ID)\nmeters_db=meters_db.drop(month_avg.METER_ID)\n\nmeters_db=meters_db.join(hd_avg, meters_db.METER_ID==hd_avg.METER_ID)\nmeters_db=meters_db.drop(hd_avg.METER_ID)\n\nmeters_db=meters_db.join(wd_avg, meters_db.METER_ID==wd_avg.METER_ID)\nmeters_db=meters_db.drop(wd_avg.METER_ID)\n\nmeters_db=meters_db.join(sd_avg, meters_db.METER_ID==sd_avg.METER_ID)\nmeters_db=meters_db.drop(sd_avg.METER_ID)\n\nmeters_db=meters_db.join(max_day, meters_db.METER_ID==max_day.METER_ID)\nmeters_db=meters_db.drop(max_day.METER_ID)\n\nmeters_db=meters_db.join(max_avg_hour, meters_db.METER_ID==max_avg_hour.METER_ID)\nmeters_db=meters_db.drop(max_avg_hour.METER_ID)\n\nmeters_db=meters_db.join(max_avg_hour_time, meters_db.METER_ID==max_avg_hour_time.METER_ID)\nmeters_db=meters_db.drop(max_avg_hour_time.METER_ID)\n\nmeters_db=(meters_db\n        .withColumn(\"MEAN_MONTH\",round(\"MEAN_MONTH\",3))\n        .withColumn(\"MEAN_HD\",round(\"MEAN_HD\",3))\n        .withColumn(\"MEAN_WD\",round(\"MEAN_WD\",3))\n        .withColumn(\"MEAN_SD\",round(\"MEAN_SD\",3))\n        .withColumn(\"MEAN_MAX\",round(\"MEAN_MAX\",3))\n        .withColumn(\"MEAN_MAX_H\",round(\"MEAN_MAX_H\",3)))\n\n\nmeters_db = meters_db.select(row_number().over(Window().orderBy(\"METER_ID\")).alias(\"ID\"), col(\"*\"))\n#meters_db.cache()\nmes_et(startTimeQuery)\n#print('Meters database count: '+str(meters_db.count())+' records')\n#meters_db.show(5)\n\nmeters_db.printSchema()","user":"hduser","dateUpdated":"2019-02-13T17:44:30-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 8.38032722473 seconds\nMeters database count: 5498 records\nroot\n |-- ID: integer (nullable = true)\n |-- METER_ID: string (nullable = true)\n |-- MEAN_MONTH: double (nullable = true)\n |-- MEAN_HD: double (nullable = true)\n |-- MEAN_WD: double (nullable = true)\n |-- MEAN_SD: double (nullable = true)\n |-- MEAN_MAX: double (nullable = true)\n |-- MEAN_MAX_H: double (nullable = true)\n |-- MEAN_MAX_H_TIME: integer (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813059_-1257316108","id":"20181128-160629_840876992","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T02:57:51-0600","dateFinished":"2019-02-04T03:00:57-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:88"},{"text":"%md\n### tariff_val time series dataframe\nInformation about tariff for ToU users (with price information). Retrieved from **tariff dataframe** generated in [Extraction Notebook](http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ).\n\n- Normal tariff, 11.76 p/kWh\n- High tariff, 67.20 p/kWh\n- Low tariff, 3.99 p/kWh\n\nColumns are:\n\n- ID\n- TIMESTAMP: Tariff date\n- TARIFF: Tariff code name\n- VALUE:  Tariff value","user":"hduser","dateUpdated":"2019-02-04T03:00:57-0600","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>tariff_val time series dataframe</h3>\n<p>Information about tariff for ToU users (with price information). Retrieved from <strong>tariff dataframe</strong> generated in <a href=\"http://big0.iie.org.mx:10002/#/notebook/2DUXFQPGZ\">Extraction Notebook</a>.</p>\n<ul>\n  <li>Normal tariff, 11.76 p/kWh</li>\n  <li>High tariff, 67.20 p/kWh</li>\n  <li>Low tariff, 3.99 p/kWh</li>\n</ul>\n<p>Columns are:</p>\n<ul>\n  <li>ID</li>\n  <li>TIMESTAMP: Tariff date</li>\n  <li>TARIFF: Tariff code name</li>\n  <li>VALUE: Tariff value</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1548964813060_1241737861","id":"20181211-162456_1449214931","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T03:00:57-0600","dateFinished":"2019-02-04T03:00:57-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:89"},{"text":"%pyspark\n\nstartTimeQuery = time.time()\ntariff_ts=tariff_ts.withColumn(\"Value\", when(col(\"Tariff\")==\"Normal\",11.76).otherwise(when(col(\"Tariff\")==\"High\",67.20).otherwise(3.99))).alias(\"VALUE\")\ntariff_ts=tariff_ts.withColumn(\"TariffDateTime\", to_timestamp(\"TariffDateTime\", \"dd/MM/yyyy HH:mm\"))\ntariff_ts=tariff_ts.filter(col(\"TariffDateTime\").isNotNull())\ntariff_ts = (tariff_ts.withColumnRenamed(\"TariffDateTime\", \"TIMESTAMP\")\n            .withColumnRenamed(\"Tariff\",\"TARIFF\")\n            .withColumnRenamed(\"Value\",\"VALUE\"))\ntariff_ts = tariff_ts.select(row_number().over(Window().orderBy(\"TIMESTAMP\")).alias(\"ID\"), col(\"*\"))\nmes_et(startTimeQuery)\n#print('Meters database count: '+str(tariff_ts.count())+' records')\n#tariff_ts.show(5)\ntariff_ts.printSchema()","user":"hduser","dateUpdated":"2019-02-04T03:01:07-0600","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ELAPSED TIME: 0.0633780956268 seconds\nMeters database count: 17518 records\nroot\n |-- ID: integer (nullable = true)\n |-- TIMESTAMP: timestamp (nullable = true)\n |-- TARIFF: string (nullable = true)\n |-- VALUE: double (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1548964813060_713289486","id":"20181129-155957_264682935","dateCreated":"2019-01-31T14:00:13-0600","dateStarted":"2019-02-04T03:00:58-0600","dateFinished":"2019-02-04T03:00:58-0600","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:90"}],"name":"JSGP/london/ETL/Transformation","id":"2E36CDEPC","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"python:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}